
---
rclasses:
  columns:
  - id
  - name
  - created_at
  - updated_at
  records: 
  - - 1
    - ARGF
    - '2013-06-22 12:09:28.412146'
    - '2013-06-22 12:09:28.412146'
  - - 2
    - ArgumentError ::none :(
    - '2013-06-22 12:09:28.571991'
    - '2013-06-23 00:07:12.013920'
  - - 3
    - Array
    - '2013-06-22 12:09:28.741016'
    - '2013-06-22 12:09:28.741016'
  - - 4
    - BasicObject
    - '2013-06-22 12:09:28.909150'
    - '2013-06-22 12:09:28.909150'
  - - 5
    - Bignum
    - '2013-06-22 12:09:29.076727'
    - '2013-06-22 12:09:29.076727'
  - - 6
    - Binding
    - '2013-06-22 12:09:29.245345'
    - '2013-06-22 12:09:29.245345'
  - - 7
    - Class
    - '2013-06-22 12:09:29.412683'
    - '2013-06-22 12:09:29.412683'
  - - 8
    - Comparable
    - '2013-06-22 12:09:29.558671'
    - '2013-06-22 12:09:29.558671'
  - - 9
    - Complex
    - '2013-06-22 12:09:29.704370'
    - '2013-06-22 12:09:29.704370'
  - - 10
    - Complex::compatible
    - '2013-06-22 12:09:29.850138'
    - '2013-06-22 12:09:29.850138'
  - - 11
    - Continuation
    - '2013-06-22 12:09:30.020386'
    - '2013-06-22 12:09:30.020386'
  - - 12
    - Data ::none :(
    - '2013-06-22 12:09:30.188054'
    - '2013-06-23 00:07:18.049573'
  - - 13
    - Dir
    - '2013-06-22 12:09:30.355856'
    - '2013-06-22 12:09:30.355856'
  - - 14
    - ENV
    - '2013-06-22 12:09:30.523728'
    - '2013-06-22 12:09:30.523728'
  - - 15
    - EOFError ::none :(
    - '2013-06-22 12:09:30.681083'
    - '2013-06-23 00:07:22.032280'
  - - 16
    - Encoding
    - '2013-06-22 12:09:30.826740'
    - '2013-06-22 12:09:30.826740'
  - - 17
    - Encoding::CompatibilityError
    - '2013-06-22 12:09:30.972581'
    - '2013-06-22 12:09:30.972581'
  - - 18
    - Encoding::Converter
    - '2013-06-22 12:09:31.240731'
    - '2013-06-22 12:09:31.240731'
  - - 19
    - Encoding::ConverterNotFoundError
    - '2013-06-22 12:09:31.408382'
    - '2013-06-22 12:09:31.408382'
  - - 20
    - Encoding::InvalidByteSequenceError
    - '2013-06-22 12:09:31.578853'
    - '2013-06-22 12:09:31.578853'
  - - 21
    - Encoding::UndefinedConversionError
    - '2013-06-22 12:09:31.725139'
    - '2013-06-22 12:09:31.725139'
  - - 22
    - EncodingError ::none :(
    - '2013-06-22 12:09:31.871056'
    - '2013-06-23 00:07:26.686662'
  - - 23
    - Enumerable
    - '2013-06-22 12:09:32.016131'
    - '2013-06-22 12:09:32.016131'
  - - 24
    - Enumerator
    - '2013-06-22 12:09:32.172437'
    - '2013-06-22 12:09:32.172437'
  - - 25
    - Enumerator::Generator
    - '2013-06-22 12:09:32.340612'
    - '2013-06-22 12:09:32.340612'
  - - 26
    - Enumerator::Lazy
    - '2013-06-22 12:09:32.508304'
    - '2013-06-22 12:09:32.508304'
  - - 27
    - Enumerator::Yielder
    - '2013-06-22 12:09:32.676177'
    - '2013-06-22 12:09:32.676177'
  - - 28
    - Errno ::none :(
    - '2013-06-22 12:09:32.846128'
    - '2013-06-23 00:07:33.140300'
  - - 29
    - Exception
    - '2013-06-22 12:09:33.003028'
    - '2013-06-22 12:09:33.003028'
  - - 30
    - FalseClass
    - '2013-06-22 12:09:33.138026'
    - '2013-06-22 12:09:33.138026'
  - - 31
    - Fiber
    - '2013-06-22 12:09:33.295833'
    - '2013-06-22 12:09:33.295833'
  - - 32
    - FiberError ::none :(
    - '2013-06-22 12:09:33.462754'
    - '2013-06-23 00:08:05.074909'
  - - 33
    - File
    - '2013-06-22 12:09:33.630589'
    - '2013-06-22 12:09:33.630589'
  - - 34
    - File::Constants
    - '2013-06-22 12:09:33.798566'
    - '2013-06-22 12:09:33.798566'
  - - 35
    - File::Stat
    - '2013-06-22 12:09:34.022077'
    - '2013-06-22 12:09:34.022077'
  - - 36
    - FileTest
    - '2013-06-22 12:09:34.189999'
    - '2013-06-22 12:09:34.189999'
  - - 37
    - Fixnum
    - '2013-06-22 12:09:34.337423'
    - '2013-06-22 12:09:34.337423'
  - - 38
    - Float
    - '2013-06-22 12:09:34.483199'
    - '2013-06-22 12:09:34.483199'
  - - 39
    - FloatDomainError ::none :(
    - '2013-06-22 12:09:34.640622'
    - '2013-06-23 00:09:25.113701'
  - - 40
    - GC
    - '2013-06-22 12:09:34.808432'
    - '2013-06-22 12:09:34.808432'
  - - 41
    - GC::Profiler
    - '2013-06-22 12:09:34.998305'
    - '2013-06-22 12:09:34.998305'
  - - 42
    - Hash
    - '2013-06-22 12:09:35.166182'
    - '2013-06-22 12:09:35.166182'
  - - 43
    - IO
    - '2013-06-22 12:09:35.334097'
    - '2013-06-22 12:09:35.334097'
  - - 44
    - IO::EAGAINWaitReadable
    - '2013-06-22 12:09:35.501931'
    - '2013-06-22 12:09:35.501931'
  - - 45
    - IO::EAGAINWaitWritable
    - '2013-06-22 12:09:35.647978'
    - '2013-06-22 12:09:35.647978'
  - - 46
    - IO::EINPROGRESSWaitReadable
    - '2013-06-22 12:09:35.795527'
    - '2013-06-22 12:09:35.795527'
  - - 47
    - IO::EINPROGRESSWaitWritable
    - '2013-06-22 12:09:35.963038'
    - '2013-06-22 12:09:35.963038'
  - - 48
    - IO::EWOULDBLOCKWaitReadable
    - '2013-06-22 12:09:36.143052'
    - '2013-06-22 12:09:36.143052'
  - - 49
    - IO::EWOULDBLOCKWaitWritable
    - '2013-06-22 12:09:36.333694'
    - '2013-06-22 12:09:36.333694'
  - - 50
    - IO::WaitReadable
    - '2013-06-22 12:09:36.502142'
    - '2013-06-22 12:09:36.502142'
  - - 51
    - IO::WaitWritable
    - '2013-06-22 12:09:36.647705'
    - '2013-06-22 12:09:36.647705'
  - - 52
    - IOError ::none :(
    - '2013-06-22 12:09:36.793539'
    - '2013-06-23 00:09:29.758300'
  - - 53
    - IndexError ::none :(
    - '2013-06-22 12:09:36.941399'
    - '2013-06-23 00:10:15.395209'
  - - 54
    - Integer
    - '2013-06-22 12:09:37.109095'
    - '2013-06-22 12:09:37.109095'
  - - 55
    - Interrupt ::none :(
    - '2013-06-22 12:09:37.298638'
    - '2013-06-23 00:10:19.691576'
  - - 56
    - Kernel
    - '2013-06-22 12:09:37.467614'
    - '2013-06-22 12:09:37.467614'
  - - 57
    - KeyError ::none :(
    - '2013-06-22 12:09:37.635409'
    - '2013-06-23 00:15:11.459377'
  - - 58
    - LoadError ::none :(
    - '2013-06-22 12:09:37.792424'
    - '2013-06-23 00:15:13.761387'
  - - 59
    - LocalJumpError
    - '2013-06-22 12:09:37.926793'
    - '2013-06-22 12:09:37.926793'
  - - 60
    - Marshal
    - '2013-06-22 12:09:38.061327'
    - '2013-06-22 12:09:38.061327'
  - - 61
    - MatchData
    - '2013-06-22 12:09:38.207176'
    - '2013-06-22 12:09:38.207176'
  - - 62
    - Math
    - '2013-06-22 12:09:38.377061'
    - '2013-06-22 12:09:38.377061'
  - - 63
    - Math::DomainError
    - '2013-06-22 12:09:38.544752'
    - '2013-06-22 12:09:38.544752'
  - - 64
    - Method
    - '2013-06-22 12:09:38.713412'
    - '2013-06-22 12:09:38.713412'
  - - 65
    - Module
    - '2013-06-22 12:09:38.870255'
    - '2013-06-22 12:09:38.870255'
  - - 66
    - Mutex
    - '2013-06-22 12:09:39.016668'
    - '2013-06-22 12:09:39.016668'
  - - 67
    - NameError
    - '2013-06-22 12:09:39.161568'
    - '2013-06-22 12:09:39.161568'
  - - 68
    - NilClass
    - '2013-06-22 12:09:39.318206'
    - '2013-06-22 12:09:39.318206'
  - - 69
    - NoMemoryError ::none :(
    - '2013-06-22 12:09:39.474931'
    - '2013-06-23 00:17:42.911827'
  - - 70
    - NoMethodError
    - '2013-06-22 12:09:39.642966'
    - '2013-06-22 12:09:39.642966'
  - - 71
    - NotImplementedError ::none :(
    - '2013-06-22 12:09:39.812492'
    - '2013-06-23 00:17:51.303749'
  - - 72
    - Numeric
    - '2013-06-22 12:09:39.969297'
    - '2013-06-22 12:09:39.969297'
  - - 73
    - Object
    - '2013-06-22 12:09:40.115437'
    - '2013-06-22 12:09:40.115437'
  - - 74
    - ObjectSpace
    - '2013-06-22 12:09:40.249831'
    - '2013-06-22 12:09:40.249831'
  - - 75
    - ObjectSpace::WeakMap
    - '2013-06-22 12:09:40.395686'
    - '2013-06-22 12:09:40.395686'
  - - 76
    - Proc
    - '2013-06-22 12:09:40.575111'
    - '2013-06-22 12:09:40.575111'
  - - 77
    - Process
    - '2013-06-22 12:09:40.742490'
    - '2013-06-22 12:09:40.742490'
  - - 78
    - Process::GID
    - '2013-06-22 12:09:40.910680'
    - '2013-06-22 12:09:40.910680'
  - - 79
    - Process::Status
    - '2013-06-22 12:09:41.080633'
    - '2013-06-22 12:09:41.080633'
  - - 80
    - Process::Sys
    - '2013-06-22 12:09:41.237365'
    - '2013-06-22 12:09:41.237365'
  - - 81
    - Process::UID
    - '2013-06-22 12:09:41.383369'
    - '2013-06-22 12:09:41.383369'
  - - 82
    - Random
    - '2013-06-22 12:09:41.529272'
    - '2013-06-22 12:09:41.529272'
  - - 83
    - Range
    - '2013-06-22 12:09:41.685616'
    - '2013-06-22 12:09:41.685616'
  - - 84
    - RangeError ::none :(
    - '2013-06-22 12:09:41.853981'
    - '2013-06-23 00:19:49.026087'
  - - 85
    - Rational
    - '2013-06-22 12:09:42.032347'
    - '2013-06-22 12:09:42.032347'
  - - 86
    - Rational::compatible
    - '2013-06-22 12:09:42.212146'
    - '2013-06-22 12:09:42.212146'
  - - 87
    - Regexp
    - '2013-06-22 12:09:42.413163'
    - '2013-06-22 12:09:42.413163'
  - - 88
    - RegexpError ::none :(
    - '2013-06-22 12:09:42.561204'
    - '2013-06-23 00:20:17.507382'
  - - 89
    - RubyVM ::none :(
    - '2013-06-22 12:09:42.707212'
    - '2013-06-23 00:20:20.171724'
  - - 90
    - RubyVM::Env
    - '2013-06-22 12:09:42.863312'
    - '2013-06-22 12:09:42.863312'
  - - 91
    - RubyVM::InstructionSequence
    - '2013-06-22 12:09:43.031425'
    - '2013-06-22 12:09:43.031425'
  - - 92
    - RuntimeError ::none :(
    - '2013-06-22 12:09:43.225669'
    - '2013-06-23 00:20:23.254505'
  - - 93
    - ScriptError ::none :(
    - '2013-06-22 12:09:43.612527'
    - '2013-06-23 00:20:25.211741'
  - - 94
    - SecurityError ::none :(
    - '2013-06-22 12:09:43.780967'
    - '2013-06-23 00:20:27.106818'
  - - 95
    - Signal
    - '2013-06-22 12:09:43.948853'
    - '2013-06-22 12:09:43.948853'
  - - 96
    - SignalException
    - '2013-06-22 12:09:44.107586'
    - '2013-06-22 12:09:44.107586'
  - - 97
    - StandardError ::none :(
    - '2013-06-22 12:09:44.275395'
    - '2013-06-23 00:20:36.406012'
  - - 98
    - StopIteration
    - '2013-06-22 12:09:44.454559'
    - '2013-06-22 12:09:44.454559'
  - - 99
    - String
    - '2013-06-22 12:09:44.811818'
    - '2013-06-22 12:09:44.811818'
  - - 100
    - Struct
    - '2013-06-22 12:09:44.990938'
    - '2013-06-22 12:09:44.990938'
  - - 101
    - Symbol
    - '2013-06-22 12:09:45.159131'
    - '2013-06-22 12:09:45.159131'
  - - 102
    - SyntaxError ::none :(
    - '2013-06-22 12:09:45.316599'
    - '2013-06-23 00:22:17.951785'
  - - 103
    - SystemCallError
    - '2013-06-22 12:09:45.461995'
    - '2013-06-22 12:09:45.461995'
  - - 104
    - SystemExit
    - '2013-06-22 12:09:45.609024'
    - '2013-06-22 12:09:45.609024'
  - - 105
    - SystemStackError ::none :(
    - '2013-06-22 12:09:45.933281'
    - '2013-06-23 00:22:27.792054'
  - - 106
    - Thread
    - '2013-06-22 12:09:46.111753'
    - '2013-06-22 12:09:46.111753'
  - - 107
    - Thread::Backtrace::Location
    - '2013-06-22 12:09:46.291835'
    - '2013-06-22 12:09:46.291835'
  - - 108
    - ThreadError ::none :(
    - '2013-06-22 12:09:46.459256'
    - '2013-06-23 00:22:56.279045'
  - - 109
    - ThreadGroup
    - '2013-06-22 12:09:46.616238'
    - '2013-06-22 12:09:46.616238'
  - - 110
    - Time
    - '2013-06-22 12:09:46.917708'
    - '2013-06-22 12:09:46.917708'
  - - 111
    - TracePoint
    - '2013-06-22 12:09:47.063181'
    - '2013-06-22 12:09:47.063181'
  - - 112
    - TrueClass
    - '2013-06-22 12:09:47.221723'
    - '2013-06-22 12:09:47.221723'
  - - 113
    - TypeError ::none :(
    - '2013-06-22 12:09:47.401031'
    - '2013-06-23 00:23:11.317791'
  - - 114
    - UnboundMethod
    - '2013-06-22 12:09:47.579685'
    - '2013-06-22 12:09:47.579685'
  - - 115
    - ZeroDivisionError ::none :(
    - '2013-06-22 12:09:47.747727'
    - '2013-06-23 00:25:05.782474'
  - - 116
    - fatal ::none :(
    - '2013-06-22 12:09:48.060377'
    - '2013-06-23 00:25:12.140656'
  - - 117
    - unknown ::none :(
    - '2013-06-22 12:09:48.216859'
    - '2013-06-23 00:25:14.099203'

---
rmethods:
  columns:
  - id
  - name
  - rclass_id
  - created_at
  - updated_at
  - label
  - code
  records: 
  - - 1
    - Array#new(size=0, obj=nil)
    - 3
    - '2013-06-22 13:00:47.559334'
    - '2013-06-23 06:48:44.284385'
    - 
    - 
  - - 2
    - Array#new(array)
    - 3
    - '2013-06-22 13:00:47.942617'
    - '2013-06-23 06:48:44.443113'
    - 
    - 
  - - 3
    - Array#new(size) {|index| block }
    - 3
    - '2013-06-22 13:00:48.291385'
    - '2013-06-24 08:07:46.935038'
    - Returns a new array.
    - 
  - - 4
    - Array#try_convert(obj) =>array or nil
    - 3
    - '2013-06-22 13:00:48.626863'
    - '2013-06-25 06:09:31.348255'
    - ! 'Tries to convert obj into an array, using to_ary

      method.  Returns the converted array or nil if

      obj cannot be converted for any reason. This method can be

      used to check if an argument is an array.'
    - 
  - - 5
    - Array#& other_ary =>new_ary
    - 3
    - '2013-06-22 13:00:49.052037'
    - '2013-06-25 06:09:31.603108'
    - ! 'Set Intersection — Returns a new array containing elements common to the

      two arrays, excluding any duplicates. The order is preserved from the

      original array.'
    - 
  - - 6
    - Array#* int =>new_ary
    - 3
    - '2013-06-22 13:00:49.376908'
    - '2013-06-25 06:09:31.759526'
    - 
    - 
  - - 7
    - Array#* str =>new_string
    - 3
    - '2013-06-22 13:00:49.690818'
    - '2013-06-25 06:09:31.905835'
    - ! 'Repetition — With a String argument, equivalent

      to ary.join(str).'
    - 
  - - 8
    - Array#+ other_ary =>new_ary
    - 3
    - '2013-06-22 13:00:50.017027'
    - '2013-06-25 06:09:32.062748'
    - ! 'Concatenation — Returns a new array built by concatenating the two arrays

      together to produce a third array.'
    - 
  - - 9
    - Array#- other_ary =>new_ary
    - 3
    - '2013-06-22 13:00:50.308425'
    - '2013-06-25 06:09:32.219111'
    - Array Difference
    - 
  - - 10
    - ! 'Array#click to toggle source '
    - 3
    - '2013-06-22 13:00:50.622006'
    - '2013-06-25 03:04:49.331644'
    - ! 'Append—Pushes the given object on to the end of this array. This expression

      returns the array itself, so several appends may be chained together.'
    - 
  - - 11
    - Array#other_ary =>-1, 0, +1 or nil
    - 3
    - '2013-06-22 13:00:50.935636'
    - '2013-06-25 06:09:32.375354'
    - ! 'Comparison — Returns an integer (-1, 0, or

      +1) if this array is less than, equal to, or greater than

      other_ary.'
    - 
  - - 12
    - Array#== other_ary =>bool
    - 3
    - '2013-06-22 13:00:51.262206'
    - '2013-06-25 06:09:32.543362'
    - ! 'Equality — Two arrays are equal if they contain the same number of elements

      and if each element is equal to (according to Object#==) the corresponding

      element in other_ary.'
    - 
  - - 13
    - Array#[index] =>obj or nil
    - 3
    - '2013-06-22 13:00:51.564896'
    - '2013-06-25 06:09:32.702953'
    - 
    - 
  - - 14
    - Array#[start, length] =>new_ary or nil
    - 3
    - '2013-06-22 13:00:51.900794'
    - '2013-06-25 06:09:32.882279'
    - 
    - 
  - - 15
    - Array#[range] =>new_ary or nil
    - 3
    - '2013-06-22 13:00:52.247855'
    - '2013-06-25 06:09:33.050214'
    - 
    - 
  - - 16
    - Array#slice(index) =>obj or nil
    - 3
    - '2013-06-22 13:00:52.605526'
    - '2013-06-25 06:09:33.195822'
    - 
    - 
  - - 17
    - Array#slice(start, length) =>new_ary or nil
    - 3
    - '2013-06-22 13:00:52.899062'
    - '2013-06-25 06:09:33.341744'
    - 
    - 
  - - 18
    - Array#slice(range) =>new_ary or nil
    - 3
    - '2013-06-22 13:00:53.223645'
    - '2013-06-25 06:09:33.498331'
    - ! 'Element Reference — Returns the element at index, or returns a

      subarray starting at the start index and continuing for

      length elements, or returns a subarray specified by

      range of indices.'
    - 
  - - 19
    - Array#[index] = obj =>obj
    - 3
    - '2013-06-22 13:00:53.570529'
    - '2013-06-25 06:09:33.655219'
    - 
    - 
  - - 20
    - Array#[start, length] = obj or other_ary or nil =>obj or other_ary or nil
    - 3
    - '2013-06-22 13:00:53.917623'
    - '2013-06-25 06:09:33.823287'
    - 
    - 
  - - 21
    - Array#[range] = obj or other_ary or nil =>obj or other_ary or nil
    - 3
    - '2013-06-22 13:00:54.220825'
    - '2013-06-25 06:09:34.003996'
    - ! 'Element Assignment — Sets the element at index, or replaces a

      subarray from the start index for length

      elements, or replaces a subarray specified by the range of

      indices.'
    - 
  - - 22
    - Array#assoc(obj) =>new_ary or nil
    - 3
    - '2013-06-22 13:00:54.591838'
    - '2013-06-25 06:09:34.161061'
    - ! 'Searches through an array whose elements are also arrays comparing

      obj with the first element of each contained array using

      obj.==.'
    - 
  - - 23
    - Array#at(index) =>obj or nil
    - 3
    - '2013-06-22 13:00:54.949546'
    - '2013-06-25 06:09:34.307805'
    - ! 'Returns the element at index. A negative index counts from the

      end of self. Returns nil if the index is out of

      range. See also Array#[].'
    - 
  - - 24
    - Array#bsearch {|x| block } =>elem
    - 3
    - '2013-06-22 13:00:55.285003'
    - '2013-06-25 06:09:34.464627'
    - ! 'By using binary search, finds a value from this array which meets the given

      condition in O(log n) where n is the size of the array.'
    - 
  - - 25
    - Array#clear =>ary
    - 3
    - '2013-06-22 13:00:55.576655'
    - '2013-06-25 06:09:34.621540'
    - Removes all elements from self.
    - 
  - - 26
    - Array#collect { |item| block } =>new_ary
    - 3
    - '2013-06-22 13:00:56.226015'
    - '2013-06-25 06:09:34.778296'
    - 
    - 
  - - 27
    - Array#collect =>Enumerator
    - 3
    - '2013-06-22 13:00:56.583806'
    - '2013-06-25 06:09:34.933916'
    - Invokes the given block once for each element of self.
    - 
  - - 28
    - Array#collect! {|item| block } =>ary
    - 3
    - '2013-06-22 13:00:56.919333'
    - '2013-06-25 06:09:35.069025'
    - 
    - 
  - - 29
    - Array#collect! =>Enumerator
    - 3
    - '2013-06-22 13:00:57.199653'
    - '2013-06-25 06:09:35.238998'
    - ! 'Invokes the given block once for each element of self,

      replacing the element with the value returned by the block.'
    - 
  - - 30
    - Array#combination(n) { |c| block } =>ary
    - 3
    - '2013-06-22 13:00:57.537319'
    - '2013-06-25 06:09:35.384802'
    - 
    - 
  - - 31
    - Array#combination(n) =>Enumerator
    - 3
    - '2013-06-22 13:00:57.884379'
    - '2013-06-25 06:09:35.530488'
    - ! 'When invoked with a block, yields all combinations of length n

      of elements from the array and then returns the array itself.'
    - 
  - - 32
    - Array#compact =>new_ary
    - 3
    - '2013-06-22 13:00:58.207942'
    - '2013-06-25 06:09:35.676525'
    - ! 'Returns a copy of self with all nil elements

      removed.'
    - 
  - - 33
    - Array#compact! =>ary or nil
    - 3
    - '2013-06-22 13:00:58.490219'
    - '2013-06-25 06:09:35.821987'
    - Removes nil elements from the array.
    - 
  - - 34
    - Array#concat(other_ary) =>ary
    - 3
    - '2013-06-22 13:00:58.827600'
    - '2013-06-25 06:09:35.990038'
    - Appends the elements of other_ary to self.
    - 
  - - 35
    - Array#count =>int
    - 3
    - '2013-06-22 13:00:59.163682'
    - '2013-06-25 06:09:36.158351'
    - 
    - 
  - - 36
    - Array#count(obj) =>int
    - 3
    - '2013-06-22 13:00:59.444192'
    - '2013-06-25 06:09:36.336945'
    - 
    - 
  - - 37
    - Array#count { |item| block } =>int
    - 3
    - '2013-06-22 13:00:59.746673'
    - '2013-06-25 06:09:36.516103'
    - Returns the number of elements.
    - 
  - - 38
    - Array#cycle(n=nil) { |obj| block } =>nil
    - 3
    - '2013-06-22 13:01:00.093413'
    - '2013-06-25 06:09:36.675309'
    - 
    - 
  - - 39
    - Array#cycle(n=nil) =>Enumerator
    - 3
    - '2013-06-22 13:01:00.420117'
    - '2013-06-25 06:09:36.831763'
    - ! 'Calls the given block for each element n times or forever if

      nil is given.'
    - 
  - - 40
    - Array#delete(obj) =>item or nil
    - 3
    - '2013-06-22 13:01:00.979037'
    - '2013-06-25 06:09:36.978359'
    - 
    - 
  - - 41
    - Array#delete(obj) { block } =>item or result of block
    - 3
    - '2013-06-22 13:01:01.315164'
    - '2013-06-25 06:09:37.145636'
    - ! 'Deletes all items from self that are equal to

      obj.'
    - 
  - - 42
    - Array#delete_at(index) =>obj or nil
    - 3
    - '2013-06-22 13:01:01.817935'
    - '2013-06-25 06:09:37.302301'
    - ! 'Deletes the element at the specified index, returning that

      element, or nil if the index is out of range.'
    - 
  - - 43
    - Array#delete_if { |item| block } =>ary
    - 3
    - '2013-06-22 13:01:02.110843'
    - '2013-06-25 06:09:37.470022'
    - 
    - 
  - - 44
    - Array#delete_if =>Enumerator
    - 3
    - '2013-06-22 13:01:02.402495'
    - '2013-06-25 06:09:37.615916'
    - ! 'Deletes every element of self for which block evaluates to

      true.'
    - 
  - - 45
    - Array#drop(n) =>new_ary
    - 3
    - '2013-06-22 13:01:02.771688'
    - '2013-06-25 06:09:37.784280'
    - ! 'Drops first n elements from ary and returns the

      rest of the elements in an array.'
    - 
  - - 46
    - Array#drop_while { |arr| block } =>new_ary
    - 3
    - '2013-06-22 13:01:03.118211'
    - '2013-06-25 06:09:37.943204'
    - 
    - 
  - - 47
    - Array#drop_while =>Enumerator
    - 3
    - '2013-06-22 13:01:03.433513'
    - '2013-06-25 06:09:38.100155'
    - ! 'Drops elements up to, but not including, the first element for which the

      block returns nil or false and returns an array

      containing the remaining elements.'
    - 
  - - 48
    - Array#each { |item| block } =>ary
    - 3
    - '2013-06-22 13:01:03.891633'
    - '2013-06-25 06:09:38.256608'
    - 
    - 
  - - 49
    - Array#each =>Enumerator
    - 3
    - '2013-06-22 13:01:04.216509'
    - '2013-06-25 06:09:38.413052'
    - ! 'Calls the given block once for each element in self, passing

      that element as a parameter.'
    - 
  - - 50
    - Array#each_index { |index| block } =>ary
    - 3
    - '2013-06-22 13:01:04.563286'
    - '2013-06-25 06:09:38.560773'
    - 
    - 
  - - 51
    - Array#each_index =>Enumerator
    - 3
    - '2013-06-22 13:01:05.043490'
    - '2013-06-25 06:09:38.727241'
    - ! 'Same as #each, but passes the

      index of the element instead of the element itself.'
    - 
  - - 52
    - Array#empty? =>true or false
    - 3
    - '2013-06-22 13:01:05.336809'
    - '2013-06-25 06:09:38.895454'
    - Returns true if self contains no elements.
    - 
  - - 53
    - Array#eql?(other) =>true or false
    - 3
    - '2013-06-22 13:01:05.672359'
    - '2013-06-25 06:09:39.052334'
    - ! 'Returns true if self and other are

      the same object, or are both arrays with the same content (according to Object#eql?).'
    - 
  - - 54
    - Array#fetch(index) =>obj
    - 3
    - '2013-06-22 13:01:06.164384'
    - '2013-06-25 06:09:39.197884'
    - 
    - 
  - - 55
    - Array#fetch(index, default) =>obj
    - 3
    - '2013-06-22 13:01:06.488947'
    - '2013-06-25 06:09:39.346427'
    - 
    - 
  - - 56
    - Array#fetch(index) { |index| block } =>obj
    - 3
    - '2013-06-22 13:01:06.804177'
    - '2013-06-25 06:09:39.502539'
    - ! 'Tries to return the element at position index, but throws an

      IndexError exception if the referenced

      index lies outside of the array bounds.  This error can be

      prevented by supplying a second argument, which will act as a

      default value.'
    - 
  - - 57
    - Array#fill(obj) =>ary
    - 3
    - '2013-06-22 13:01:07.273606'
    - '2013-06-25 06:09:39.670125'
    - 
    - 
  - - 58
    - Array#fill(obj, start [, length]) =>ary
    - 3
    - '2013-06-22 13:01:07.620616'
    - '2013-06-25 06:09:39.838803'
    - 
    - 
  - - 59
    - Array#fill(obj, range ) =>ary
    - 3
    - '2013-06-22 13:01:07.967112'
    - '2013-06-25 06:09:40.006202'
    - 
    - 
  - - 60
    - Array#fill { |index| block } =>ary
    - 3
    - '2013-06-22 13:01:08.314761'
    - '2013-06-25 06:09:40.185773'
    - 
    - 
  - - 61
    - Array#fill(start [, length] ) { |index| block } =>ary
    - 3
    - '2013-06-22 13:01:08.997046'
    - '2013-06-25 06:09:40.332538'
    - 
    - 
  - - 62
    - Array#fill(range) { |index| block } =>ary
    - 3
    - '2013-06-22 13:01:09.681449'
    - '2013-06-25 06:09:40.477891'
    - ! 'The first three forms set the selected elements of self (which

      may be the entire array) to obj.'
    - 
  - - 63
    - Array#find_index(obj) =>int or nil
    - 3
    - '2013-06-22 13:01:10.358428'
    - '2013-06-25 06:09:40.635908'
    - 
    - 
  - - 64
    - Array#find_index { |item| block } =>int or nil
    - 3
    - '2013-06-22 13:01:11.027378'
    - '2013-06-25 06:09:40.803553'
    - 
    - 
  - - 65
    - Array#find_index =>Enumerator
    - 3
    - '2013-06-22 13:01:11.715192'
    - '2013-06-25 06:09:40.949739'
    - ! 'Returns the index of the first object in ary such

      that the object is == to obj.'
    - 
  - - 66
    - Array#first =>obj or nil
    - 3
    - '2013-06-22 13:01:12.780229'
    - '2013-06-25 06:09:41.106891'
    - 
    - 
  - - 67
    - Array#first(n) =>new_ary
    - 3
    - '2013-06-22 13:01:13.205185'
    - '2013-06-25 06:09:41.264289'
    - ! 'Returns the first element, or the first n elements, of the

      array. If the array is empty, the first form returns nil, and

      the second form returns an empty array. See also #last for the opposite effect.'
    - 
  - - 68
    - Array#flatten =>new_ary
    - 3
    - '2013-06-22 13:01:13.696242'
    - '2013-06-25 06:09:41.443088'
    - 
    - 
  - - 69
    - Array#flatten(level) =>new_ary
    - 3
    - '2013-06-22 13:01:14.045979'
    - '2013-06-25 06:09:41.588550'
    - ! 'Returns a new array that is a one-dimensional flattening of

      self (recursively).'
    - 
  - - 70
    - Array#flatten! =>ary or nil
    - 3
    - '2013-06-22 13:01:14.370170'
    - '2013-06-25 06:09:41.746663'
    - 
    - 
  - - 71
    - Array#flatten!(level) =>ary or nil
    - 3
    - '2013-06-22 13:01:14.816789'
    - '2013-06-25 06:09:41.915539'
    - Flattens self in place.
    - 
  - - 72
    - Array#frozen? =>true or false
    - 3
    - '2013-06-22 13:01:15.141475'
    - '2013-06-25 06:09:42.083494'
    - ! 'Return true if this array is frozen (or temporarily frozen

      while being sorted). See also Object#frozen?'
    - 
  - - 73
    - Array#hash =>fixnum
    - 3
    - '2013-06-22 13:01:15.490079'
    - '2013-06-25 06:09:42.241016'
    - Compute a hash-code for this array.
    - 
  - - 74
    - Array#include?(object) =>true or false
    - 3
    - '2013-06-22 13:01:15.948526'
    - '2013-06-25 06:09:42.398980'
    - ! 'Returns true if the given object is present in

      self (that is, if any element ==

      object), otherwise returns false.'
    - 
  - - 75
    - Array#index(obj) =>int or nil
    - 3
    - '2013-06-22 13:01:16.394905'
    - '2013-06-25 06:09:42.543549'
    - 
    - 
  - - 76
    - Array#index { |item| block } =>int or nil
    - 3
    - '2013-06-22 13:01:17.053010'
    - '2013-06-25 06:09:42.679329'
    - 
    - 
  - - 77
    - Array#index =>Enumerator
    - 3
    - '2013-06-22 13:01:17.688965'
    - '2013-06-25 06:09:42.823814'
    - ! 'Returns the index of the first object in ary such

      that the object is == to obj.'
    - 
  - - 78
    - Array#initialize_copy(other_ary) =>ary
    - 3
    - '2013-06-22 13:01:18.293310'
    - '2013-06-25 06:09:42.958308'
    - ! 'Replaces the contents of self with the contents of

      other_ary, truncating or expanding if necessary.'
    - 
  - - 79
    - Array#insert(index, obj...) =>ary
    - 3
    - '2013-06-22 13:01:18.751370'
    - '2013-06-25 06:09:43.128783'
    - ! 'Inserts the given values before the element with the given

      index.'
    - 
  - - 80
    - Array#inspect =>string
    - 3
    - '2013-06-22 13:01:19.387220'
    - '2013-06-25 06:09:43.285393'
    - 
    - 
  - - 81
    - Array#to_s =>string
    - 3
    - '2013-06-22 13:01:20.045043'
    - '2013-06-25 06:09:43.442345'
    - Creates a string representation of self.
    - 
  - - 82
    - Array#join(separator=$,) =>str
    - 3
    - '2013-06-22 13:01:20.389866'
    - '2013-06-25 06:09:43.587688'
    - ! 'Returns a string created by converting each element of the array to a

      string, separated by the given separator. If the

      separator is nil, it uses current $,. If both the

      separator and $, are nil, it uses empty string.'
    - 
  - - 83
    - Array#keep_if { |item| block } =>ary
    - 3
    - '2013-06-22 13:01:20.717703'
    - '2013-06-25 06:09:43.745273'
    - 
    - 
  - - 84
    - Array#keep_if =>Enumerator
    - 3
    - '2013-06-22 13:01:21.031600'
    - '2013-06-25 06:09:43.890760'
    - ! 'Deletes every element of self for which the given block

      evaluates to false.'
    - 
  - - 85
    - Array#last =>obj or nil
    - 3
    - '2013-06-22 13:01:21.378625'
    - '2013-06-25 06:09:44.036710'
    - 
    - 
  - - 86
    - Array#last(n) =>new_ary
    - 3
    - '2013-06-22 13:01:21.714568'
    - '2013-06-25 06:09:44.216403'
    - ! 'Returns the last element(s) of self. If the array is empty,

      the first form returns nil.'
    - 
  - - 87
    - Array#length =>int
    - 3
    - '2013-06-22 13:01:22.030119'
    - '2013-06-25 06:09:44.419217'
    - Returns the number of elements in self. May be zero.
    - 
  - - 88
    - Array#map { |item| block } =>new_ary
    - 3
    - '2013-06-22 13:01:22.343348'
    - '2013-06-25 06:09:44.576671'
    - 
    - 
  - - 89
    - Array#map =>Enumerator
    - 3
    - '2013-06-22 13:01:22.690354'
    - '2013-06-25 06:09:44.722617'
    - Invokes the given block once for each element of self.
    - 
  - - 90
    - Array#map! {|item| block } =>ary
    - 3
    - '2013-06-22 13:01:23.015393'
    - '2013-06-25 06:09:44.867681'
    - 
    - 
  - - 91
    - Array#map! =>Enumerator
    - 3
    - '2013-06-22 13:01:23.362096'
    - '2013-06-25 06:09:45.003019'
    - ! 'Invokes the given block once for each element of self,

      replacing the element with the value returned by the block.'
    - 
  - - 92
    - Array#pack ( aTemplateString ) =>aBinaryString
    - 3
    - '2013-06-22 13:01:23.688630'
    - '2013-06-25 06:09:45.148754'
    - ! 'Packs the contents of arr into a binary sequence according to the

      directives in aTemplateString (see the table below) Directives

      “A,” “a,” and “Z” may be followed by a count, which gives the width of the

      resulting field. The remaining directives also may take a count, indicating

      the number of array elements to convert. If the count is an asterisk

      (“*”), all remaining array elements will be converted. Any of

      the directives “sSiIlL” may be followed by an underscore

      (“_”) or exclamation mark (“!”) to use the

      underlying platform’s native size for the specified type; otherwise, they

      use a platform-independent size. Spaces are ignored in the template string.

      See also String#unpack.'
    - 
  - - 93
    - Array#permutation { |p| block } =>ary
    - 3
    - '2013-06-22 13:01:24.024815'
    - '2013-06-25 06:09:45.483136'
    - 
    - 
  - - 94
    - Array#permutation =>Enumerator
    - 3
    - '2013-06-22 13:01:24.505241'
    - '2013-06-25 06:09:45.740165'
    - 
    - 
  - - 95
    - Array#permutation(n) { |p| block } =>ary
    - 3
    - '2013-06-22 13:01:24.829946'
    - '2013-06-25 06:09:45.910566'
    - 
    - 
  - - 96
    - Array#permutation(n) =>Enumerator
    - 3
    - '2013-06-22 13:01:25.156284'
    - '2013-06-25 06:09:46.056542'
    - ! 'When invoked with a block, yield all permutations of length n

      of the elements of the array, then return the array itself.'
    - 
  - - 97
    - Array#pop =>obj or nil
    - 3
    - '2013-06-22 13:01:25.625771'
    - '2013-06-25 06:09:46.201897'
    - 
    - 
  - - 98
    - Array#pop(n) =>new_ary
    - 3
    - '2013-06-22 13:01:25.939023'
    - '2013-06-25 06:09:46.358592'
    - ! 'Removes the last element from self and returns it, or

      nil if the array is empty.'
    - 
  - - 99
    - Array#product(other_ary, ...) =>new_ary
    - 3
    - '2013-06-22 13:01:26.241390'
    - '2013-06-25 06:09:46.682697'
    - 
    - 
  - - 100
    - Array#product(other_ary, ...) { |p| block } =>ary
    - 3
    - '2013-06-22 13:01:26.669165'
    - '2013-06-25 06:09:46.850538'
    - Returns an array of all combinations of elements from all arrays.
    - 
  - - 101
    - Array#push(obj, ... ) =>ary
    - 3
    - '2013-06-22 13:01:27.004234'
    - '2013-06-25 06:09:47.019877'
    - ! 'Append — Pushes the given object(s) on to the end of this array. This

      expression returns the array itself, so several appends may be chained

      together. See also #pop for the

      opposite effect.'
    - 
  - - 102
    - Array#rassoc(obj) =>new_ary or nil
    - 3
    - '2013-06-22 13:01:27.329116'
    - '2013-06-25 06:09:47.186229'
    - Searches through the array whose elements are also arrays.
    - 
  - - 103
    - Array#reject {|item| block } =>new_ary
    - 3
    - '2013-06-22 13:01:27.787100'
    - '2013-06-25 06:09:47.354461'
    - 
    - 
  - - 104
    - Array#reject =>Enumerator
    - 3
    - '2013-06-22 13:01:28.089422'
    - '2013-06-25 06:09:47.836148'
    - ! 'Returns a new array containing the items in self for which the

      given block is not true.'
    - 
  - - 105
    - Array#reject! { |item| block } =>ary or nil
    - 3
    - '2013-06-22 13:01:28.415707'
    - '2013-06-25 06:09:48.037271'
    - 
    - 
  - - 106
    - Array#reject! =>Enumerator
    - 3
    - '2013-06-22 13:01:28.922658'
    - '2013-06-25 06:09:48.216274'
    - ! 'Equivalent to #delete_if,

      deleting elements from self for which the block evaluates to

      true, but returns nil if no changes were made.'
    - 
  - - 107
    - Array#repeated_combination(n) { |c| block } =>ary
    - 3
    - '2013-06-22 13:01:29.242849'
    - '2013-06-25 06:09:48.384072'
    - 
    - 
  - - 108
    - Array#repeated_combination(n) =>Enumerator
    - 3
    - '2013-06-22 13:01:29.545574'
    - '2013-06-25 06:09:48.553668'
    - ! 'When invoked with a block, yields all repeated combinations of length

      n of elements from the array and then returns the array

      itself.'
    - 
  - - 109
    - Array#repeated_permutation(n) { |p| block } =>ary
    - 3
    - '2013-06-22 13:01:30.037137'
    - '2013-06-25 06:09:48.720870'
    - 
    - 
  - - 110
    - Array#repeated_permutation(n) =>Enumerator
    - 3
    - '2013-06-22 13:01:30.519236'
    - '2013-06-25 06:09:49.054748'
    - ! 'When invoked with a block, yield all repeated permutations of length

      n of the elements of the array, then return the array itself.'
    - 
  - - 111
    - Array#replace(other_ary) =>ary
    - 3
    - '2013-06-22 13:01:31.354910'
    - '2013-06-25 06:09:49.256763'
    - ! 'Replaces the contents of self with the contents of

      other_ary, truncating or expanding if necessary.'
    - 
  - - 112
    - Array#reverse =>new_ary
    - 3
    - '2013-06-22 13:01:32.002314'
    - '2013-06-25 06:09:49.452146'
    - ! 'Returns a new array containing self‘s elements in reverse

      order.'
    - 
  - - 113
    - Array#reverse! =>ary
    - 3
    - '2013-06-22 13:01:32.626583'
    - '2013-06-25 06:09:49.619904'
    - Reverses self in place.
    - 
  - - 114
    - Array#reverse_each { |item| block } =>ary
    - 3
    - '2013-06-22 13:01:33.253356'
    - '2013-06-25 06:09:49.799085'
    - 
    - 
  - - 115
    - Array#reverse_each =>Enumerator
    - 3
    - '2013-06-22 13:01:33.722371'
    - '2013-06-25 06:09:50.155900'
    - ! 'Same as #each, but traverses

      self in reverse order.'
    - 
  - - 116
    - Array#rindex(obj) =>int or nil
    - 3
    - '2013-06-22 13:01:34.347822'
    - '2013-06-25 06:09:50.357701'
    - 
    - 
  - - 117
    - Array#rindex { |item| block } =>int or nil
    - 3
    - '2013-06-22 13:01:35.017023'
    - '2013-06-25 06:09:50.558622'
    - 
    - 
  - - 118
    - Array#rindex =>Enumerator
    - 3
    - '2013-06-22 13:01:36.138968'
    - '2013-06-25 06:09:50.748450'
    - ! 'Returns the index of the last object in self

      == to obj.'
    - 
  - - 119
    - Array#rotate(count=1) =>new_ary
    - 3
    - '2013-06-22 13:01:37.677052'
    - '2013-06-25 06:09:50.928165'
    - ! 'Returns a new array by rotating self so that the element at

      count is the first element of the new array.'
    - 
  - - 120
    - Array#rotate!(count=1) =>ary
    - 3
    - '2013-06-22 13:01:39.353747'
    - '2013-06-25 06:09:51.286687'
    - ! 'Rotates self in place so that the element at

      count comes first, and returns self.'
    - 
  - - 121
    - Array#sample =>obj
    - 3
    - '2013-06-22 13:01:41.164514'
    - '2013-06-25 06:09:51.454303'
    - 
    - 
  - - 122
    - ! 'Array#sample(random: rng) =>obj'
    - 3
    - '2013-06-22 13:01:42.562273'
    - '2013-06-25 06:09:51.622969'
    - 
    - 
  - - 123
    - Array#sample(n) =>new_ary
    - 3
    - '2013-06-22 13:01:43.847948'
    - '2013-06-25 06:09:51.768354'
    - 
    - 
  - - 124
    - ! 'Array#sample(n, random: rng) =>new_ary'
    - 3
    - '2013-06-22 13:01:44.495295'
    - '2013-06-25 06:09:51.913994'
    - Choose a random element or n random elements from the array.
    - 
  - - 125
    - Array#select { |item| block } =>new_ary
    - 3
    - '2013-06-22 13:01:45.133924'
    - '2013-06-25 06:09:52.070866'
    - 
    - 
  - - 126
    - Array#select =>Enumerator
    - 3
    - '2013-06-22 13:01:45.602155'
    - '2013-06-25 06:09:52.249591'
    - ! 'Returns a new array containing all elements of ary for which

      the given block returns a true value.'
    - 
  - - 127
    - Array#select! {|item| block } =>ary or nil
    - 3
    - '2013-06-22 13:01:46.237798'
    - '2013-06-25 06:09:52.551026'
    - 
    - 
  - - 128
    - Array#select! =>Enumerator
    - 3
    - '2013-06-22 13:01:46.873676'
    - '2013-06-25 06:09:52.707832'
    - ! 'Invokes the given block passing in successive elements from

      self, deleting elements for which the block returns a

      false value.'
    - 
  - - 129
    - Array#shift =>obj or nil
    - 3
    - '2013-06-22 13:01:47.533813'
    - '2013-06-25 06:09:52.866802'
    - 
    - 
  - - 130
    - Array#shift(n) =>new_ary
    - 3
    - '2013-06-22 13:01:48.037162'
    - '2013-06-25 06:09:53.012701'
    - ! 'Removes the first element of self and returns it (shifting all

      other elements down by one). Returns nil if the array is

      empty.'
    - 
  - - 131
    - Array#shuffle =>new_ary
    - 3
    - '2013-06-22 13:01:48.527692'
    - '2013-06-25 06:09:53.146842'
    - 
    - 
  - - 132
    - ! 'Array#shuffle(random: rng) =>new_ary'
    - 3
    - '2013-06-22 13:01:49.163121'
    - '2013-06-25 06:09:53.281529'
    - Returns a new array with elements of self shuffled.
    - 
  - - 133
    - Array#shuffle! =>ary
    - 3
    - '2013-06-22 13:01:49.809753'
    - '2013-06-25 06:09:53.593798'
    - 
    - 
  - - 134
    - ! 'Array#shuffle!(random: rng) =>ary'
    - 3
    - '2013-06-22 13:01:50.481636'
    - '2013-06-25 06:09:53.762017'
    - Shuffles elements in self in place.
    - 
  - - 135
    - Array#slice(index) =>obj or nil
    - 3
    - '2013-06-22 13:01:51.129077'
    - '2013-06-25 06:09:53.929789'
    - 
    - 
  - - 136
    - Array#slice(start, length) =>new_ary or nil
    - 3
    - '2013-06-22 13:01:51.808912'
    - '2013-06-25 06:09:54.097625'
    - 
    - 
  - - 137
    - Array#slice(range) =>new_ary or nil
    - 3
    - '2013-06-22 13:01:52.278193'
    - '2013-06-25 06:09:54.265967'
    - 
    - 
  - - 138
    - Array#slice!(index) =>obj or nil
    - 3
    - '2013-06-22 13:01:52.882857'
    - '2013-06-25 06:09:54.413840'
    - 
    - 
  - - 139
    - Array#slice!(start, length) =>new_ary or nil
    - 3
    - '2013-06-22 13:01:53.274592'
    - '2013-06-25 06:09:54.714799'
    - 
    - 
  - - 140
    - Array#slice!(range) =>new_ary or nil
    - 3
    - '2013-06-22 13:01:53.621489'
    - '2013-06-25 06:09:54.928328'
    - ! 'Deletes the element(s) given by an index (optionally up to

      length elements) or by a range.'
    - 
  - - 141
    - Array#sort =>new_ary
    - 3
    - '2013-06-22 13:01:53.991448'
    - '2013-06-25 06:09:55.107573'
    - 
    - 
  - - 142
    - Array#sort { |a, b| block } =>new_ary
    - 3
    - '2013-06-22 13:01:54.328781'
    - '2013-06-25 06:09:55.275379'
    - Returns a new array created by sorting self.
    - 
  - - 143
    - Array#sort! =>ary
    - 3
    - '2013-06-22 13:01:54.719806'
    - '2013-06-25 06:09:55.443114'
    - 
    - 
  - - 144
    - Array#sort! { |a, b| block } =>ary
    - 3
    - '2013-06-22 13:01:55.066714'
    - '2013-06-25 06:09:55.599918'
    - Sorts self in place.
    - 
  - - 145
    - Array#sort_by! { |obj| block } =>ary
    - 3
    - '2013-06-22 13:01:55.347518'
    - '2013-06-25 06:09:55.914899'
    - 
    - 
  - - 146
    - Array#sort_by! =>Enumerator
    - 3
    - '2013-06-22 13:01:55.682935'
    - '2013-06-25 06:09:56.082230'
    - ! 'Sorts self in place using a set of keys generated by mapping

      the values in self through the given block.'
    - 
  - - 147
    - Array#take(n) =>new_ary
    - 3
    - '2013-06-22 13:01:56.020855'
    - '2013-06-25 06:09:56.239100'
    - Returns first n elements from the array.
    - 
  - - 148
    - Array#take_while { |arr| block } =>new_ary
    - 3
    - '2013-06-22 13:01:56.356651'
    - '2013-06-25 06:09:56.418490'
    - 
    - 
  - - 149
    - Array#take_while =>Enumerator
    - 3
    - '2013-06-22 13:01:56.681129'
    - '2013-06-25 06:09:56.597537'
    - ! 'Passes elements to the block until the block returns nil or

      false, then stops iterating and returns an array of all prior

      elements.'
    - 
  - - 150
    - Array#to_a =>ary
    - 3
    - '2013-06-22 13:01:56.973519'
    - '2013-06-25 06:09:56.765366'
    - Returns self.
    - 
  - - 151
    - Array#to_ary =>ary
    - 3
    - '2013-06-22 13:01:57.321567'
    - '2013-06-25 06:09:57.088876'
    - Returns self.
    - 
  - - 152
    - Array#transpose =>new_ary
    - 3
    - '2013-06-22 13:01:57.646158'
    - '2013-06-25 06:09:57.245770'
    - ! 'Assumes that self is an array of arrays and transposes the

      rows and columns.'
    - 
  - - 153
    - Array#uniq =>new_ary
    - 3
    - '2013-06-22 13:01:57.949318'
    - '2013-06-25 06:09:57.391651'
    - 
    - 
  - - 154
    - Array#uniq { |item| ... } =>new_ary
    - 3
    - '2013-06-22 13:01:58.274129'
    - '2013-06-25 06:09:57.549873'
    - Returns a new array by removing duplicate values in self.
    - 
  - - 155
    - Array#uniq! =>ary or nil
    - 3
    - '2013-06-22 13:01:58.620240'
    - '2013-06-25 06:09:57.729191'
    - 
    - 
  - - 156
    - Array#uniq! { |item| ... } =>ary or nil
    - 3
    - '2013-06-22 13:01:58.946685'
    - '2013-06-25 06:09:57.908188'
    - Removes duplicate elements from self.
    - 
  - - 157
    - Array#unshift(obj, ...) =>ary
    - 3
    - '2013-06-22 13:01:59.227252'
    - '2013-06-25 06:09:58.220227'
    - ! 'Prepends objects to the front of self, moving other elements

      upwards. See also #shift for the

      opposite effect.'
    - 
  - - 158
    - Array#values_at(selector, ...) =>new_ary
    - 3
    - '2013-06-22 13:01:59.585427'
    - '2013-06-25 06:09:58.388334'
    - ! 'Returns an array containing the elements in self corresponding

      to the given selector(s).'
    - 
  - - 159
    - Array#zip(arg, ...) =>new_ary
    - 3
    - '2013-06-22 13:01:59.943403'
    - '2013-06-25 06:09:58.556973'
    - 
    - 
  - - 160
    - Array#zip(arg, ...) { |arr| block } =>nil
    - 3
    - '2013-06-22 13:02:00.281024'
    - '2013-06-25 06:09:58.690992'
    - ! 'Converts any arguments to arrays, then merges elements of self

      with corresponding elements from each argument.'
    - 
  - - 161
    - Array#| other_ary =>new_ary
    - 3
    - '2013-06-22 13:02:00.720636'
    - '2013-06-25 06:09:58.847505'
    - ! 'Set Union — Returns a new array by joining ary with

      other_ary, excluding any duplicates and preserving the order

      from the original array.'
    - 
  - - 162
    - ARGF#argv =>ARGV
    - 1
    - '2013-06-22 13:07:10.605968'
    - '2013-06-25 06:09:58.982116'
    - ! 'Returns the ARGV array, which contains the arguments passed to

      your script, one per element.'
    - 
  - - 163
    - ARGF#binmode =>ARGF
    - 1
    - '2013-06-22 13:07:10.986126'
    - '2013-06-25 06:09:59.119388'
    - ! 'Puts ARGF into binary mode. Once a stream is in binary mode,

      it cannot be reset to non-binary mode. This option has the following

      effects:'
    - 
  - - 164
    - ARGF#binmode? =>true or false
    - 1
    - '2013-06-22 13:07:11.291378'
    - '2013-06-25 06:09:59.431653'
    - ! 'For example:'
    - 
  - - 165
    - ARGF#close =>ARGF
    - 1
    - '2013-06-22 13:07:11.648189'
    - '2013-06-25 06:09:59.600082'
    - ! 'For example:'
    - 
  - - 166
    - ARGF#closed? =>true or false
    - 1
    - '2013-06-22 13:07:11.995506'
    - '2013-06-25 06:09:59.768012'
    - ! 'Returns true if the current file has been closed; false

      otherwise. Use ARGF.close to actually close the current file.'
    - 
  - - 167
    - ARGF#each(sep=$/) {|line| block } =>ARGF
    - 1
    - '2013-06-22 13:07:12.331063'
    - '2013-06-25 06:09:59.923496'
    - 
    - 
  - - 168
    - ARGF#each(sep=$/,limit) {|line| block } =>ARGF
    - 1
    - '2013-06-22 13:07:12.622403'
    - '2013-06-25 06:10:00.080848'
    - 
    - 
  - - 169
    - ARGF#each(...) =>an_enumerator
    - 1
    - '2013-06-22 13:07:12.960222'
    - '2013-06-25 06:10:00.215135'
    - 
    - 
  - - 170
    - ARGF#each_line(sep=$/) {|line| block } =>ARGF
    - 1
    - '2013-06-22 13:07:13.307087'
    - '2013-06-25 06:10:00.527609'
    - 
    - 
  - - 171
    - ARGF#each_line(sep=$/,limit) {|line| block } =>ARGF
    - 1
    - '2013-06-22 13:07:13.687387'
    - '2013-06-25 06:10:00.695505'
    - 
    - 
  - - 172
    - ARGF#each_line(...) =>an_enumerator
    - 1
    - '2013-06-22 13:07:13.989678'
    - '2013-06-25 06:10:00.877073'
    - ! 'Returns an enumerator which iterates over each line (separated by

      sep, which defaults to your platform’s newline character) of each

      file in ARGV. If a block is supplied, each line in turn will

      be yielded to the block, otherwise an enumerator is returned. The optional

      limit argument is a Fixnum specifying the maximum

      length of each line; longer lines will be split according to this limit.'
    - 
  - - 173
    - ARGF#bytes {|byte| block } =>ARGF
    - 1
    - '2013-06-22 13:07:14.316121'
    - '2013-06-25 06:10:01.044046'
    - 
    - 
  - - 174
    - ARGF#bytes =>an_enumerator
    - 1
    - '2013-06-22 13:07:14.856716'
    - '2013-06-25 06:10:01.234202'
    - 
    - 
  - - 175
    - ARGF#each_byte {|byte| block } =>ARGF
    - 1
    - '2013-06-22 13:07:15.278125'
    - '2013-06-25 06:10:01.424632'
    - 
    - 
  - - 176
    - ARGF#each_byte =>an_enumerator
    - 1
    - '2013-06-22 13:07:15.558671'
    - '2013-06-25 06:10:01.692595'
    - ! 'For example:'
    - 
  - - 177
    - ARGF#each_char {|char| block } =>ARGF
    - 1
    - '2013-06-22 13:07:15.907236'
    - '2013-06-25 06:10:01.827168'
    - 
    - 
  - - 178
    - ARGF#each_char =>an_enumerator
    - 1
    - '2013-06-22 13:07:16.254501'
    - '2013-06-25 06:10:01.994977'
    - Iterates over each character of each file in ARGF.
    - 
  - - 179
    - ARGF#each_codepoint {|codepoint| block } =>ARGF
    - 1
    - '2013-06-22 13:07:16.534698'
    - '2013-06-25 06:10:02.174607'
    - 
    - 
  - - 180
    - ARGF#each_codepoint =>an_enumerator
    - 1
    - '2013-06-22 13:07:16.826079'
    - '2013-06-25 06:10:02.352515'
    - Iterates over each codepoint of each file in ARGF.
    - 
  - - 181
    - ARGF#each_line(sep=$/) {|line| block } =>ARGF
    - 1
    - '2013-06-22 13:07:17.173720'
    - '2013-06-25 06:10:02.531676'
    - 
    - 
  - - 182
    - ARGF#each_line(sep=$/,limit) {|line| block } =>ARGF
    - 1
    - '2013-06-22 13:07:17.488843'
    - '2013-06-25 06:10:02.724438'
    - 
    - 
  - - 183
    - ARGF#each_line(...) =>an_enumerator
    - 1
    - '2013-06-22 13:07:17.790763'
    - '2013-06-25 06:10:02.902318'
    - 
    - 
  - - 184
    - ARGF#eof? =>true or false
    - 1
    - '2013-06-22 13:07:18.092981'
    - '2013-06-25 06:10:03.037026'
    - ! 'Returns true if the current file in ARGF is at end of file,

      i.e. it has no data to read. The stream must be opened for reading or an

      IOError will be raised.'
    - 
  - - 185
    - ARGF#eof =>true or false
    - 1
    - '2013-06-22 13:07:18.439932'
    - '2013-06-25 06:10:03.171395'
    - ! 'Returns true if the current file in ARGF is at end of file,

      i.e. it has no data to read. The stream must be opened for reading or an

      IOError will be raised.'
    - 
  - - 186
    - ARGF#eof? =>true or false
    - 1
    - '2013-06-22 13:07:18.777590'
    - '2013-06-25 06:10:03.316907'
    - 
    - 
  - - 187
    - ARGF#external_encoding =>encoding
    - 1
    - '2013-06-22 13:07:19.090984'
    - '2013-06-25 06:10:03.474494'
    - ! 'For example:'
    - 
  - - 188
    - ARGF#file =>IO or File object
    - 1
    - '2013-06-22 13:07:19.382640'
    - '2013-06-25 06:10:03.797107'
    - ! 'Returns the current file as an IO or File object.

      #<IO:<STDIN>> is returned when the current file is STDIN.'
    - 
  - - 189
    - ARGF#filename =>String
    - 1
    - '2013-06-22 13:07:19.729408'
    - '2013-06-25 06:10:03.964601'
    - ! 'Returns the current filename. “-” is returned when the current file is

      STDIN.'
    - 
  - - 190
    - ARGF#fileno =>fixnum
    - 1
    - '2013-06-22 13:07:20.098947'
    - '2013-06-25 06:10:04.121361'
    - ! 'Returns an integer representing the numeric file descriptor for the current

      file. Raises an ArgumentError if there isn’t a current file.'
    - 
  - - 191
    - ARGF#getbyte =>Fixnum or nil
    - 1
    - '2013-06-22 13:07:20.403814'
    - '2013-06-25 06:10:04.280271'
    - ! 'Gets the next 8-bit byte (0..255) from ARGF. Returns

      nil if called at the end of the stream.'
    - 
  - - 192
    - ARGF#getc =>String or nil
    - 1
    - '2013-06-22 13:07:20.760737'
    - '2013-06-25 06:10:04.415078'
    - ! 'Reads the next character from ARGF and returns it as a

      String. Returns nil at the end of the stream.'
    - 
  - - 193
    - ARGF#gets(sep=$/) =>string
    - 1
    - '2013-06-22 13:07:21.152402'
    - '2013-06-25 06:10:04.561121'
    - 
    - 
  - - 194
    - ARGF#gets(limit) =>string
    - 1
    - '2013-06-22 13:07:21.510702'
    - '2013-06-25 06:10:04.729259'
    - 
    - 
  - - 195
    - ARGF#gets(sep, limit) =>string
    - 1
    - '2013-06-22 13:07:21.892746'
    - '2013-06-25 06:10:05.041021'
    - Returns the next line from the current file in ARGF.
    - 
  - - 196
    - ARGF#inplace_mode =>String
    - 1
    - '2013-06-22 13:07:22.328857'
    - '2013-06-25 06:10:05.209146'
    - ! 'Returns the file extension appended to the names of modified files under

      inplace-edit mode. This value can be set using

      ARGF.inplace_mode= or passing the -i switch to

      the Ruby binary.'
    - 
  - - 197
    - ARGF#inplace_mode = ext =>ARGF
    - 1
    - '2013-06-22 13:07:22.675934'
    - '2013-06-25 06:10:05.377029'
    - ! 'Each line of file.txt has the first occurrence of “foo” replaced

      with “bar”, then the new line is written out to file.txt.bak.'
    - 
  - - 198
    - ARGF#internal_encoding =>encoding
    - 1
    - '2013-06-22 13:07:23.011229'
    - '2013-06-25 06:10:05.544040'
    - ! 'Returns the internal encoding for strings read from ARGF as an

      Encoding object.'
    - 
  - - 199
    - ARGF#lineno =>integer
    - 1
    - '2013-06-22 13:07:23.324773'
    - '2013-06-25 06:10:05.723577'
    - ! 'Returns the current line number of ARGF as a whole.

      This value can be set manually with ARGF.lineno=.'
    - 
  - - 200
    - ARGF#lineno = integer =>integer
    - 1
    - '2013-06-22 13:07:23.662971'
    - '2013-06-25 06:10:05.879948'
    - ! 'Sets the line number of ARGF as a whole to the given

      Integer.'
    - 
  - - 201
    - ARGF#path =>String
    - 1
    - '2013-06-22 13:07:24.009590'
    - '2013-06-25 06:10:06.172184'
    - ! 'Returns the current filename. “-” is returned when the current file is

      STDIN.'
    - 
  - - 202
    - ARGF#pos =>Integer
    - 1
    - '2013-06-22 13:07:24.334017'
    - '2013-06-25 06:10:06.317519'
    - ! 'Returns the current offset (in bytes) of the current file in

      ARGF.'
    - 
  - - 203
    - ARGF#pos = position =>Integer
    - 1
    - '2013-06-22 13:07:24.670104'
    - '2013-06-25 06:10:06.652822'
    - ! 'Seeks to the position given by position (in bytes) in

      ARGF.'
    - 
  - - 204
    - ARGF#print() =>nil
    - 1
    - '2013-06-22 13:07:24.985147'
    - '2013-06-25 06:10:06.820657'
    - 
    - 
  - - 205
    - ARGF#print(obj, ...) =>nil
    - 1
    - '2013-06-22 13:07:25.510291'
    - '2013-06-25 06:10:06.977821'
    - ! 'Writes the given object(s) to ios. The stream must be opened for

      writing. If the output field separator ($,) is not

      nil, it will be inserted between each object. If the output

      record separator ($\</code>) is not <code>nil, it

      will be appended to the output. If no arguments are given, prints

      $_. Objects that aren’t strings will be converted by calling

      their to_s method. With no argument, prints the contents of

      the variable $_. Returns nil.'
    - 
  - - 206
    - ARGF#printf(format_string [, obj, ...]) =>nil
    - 1
    - '2013-06-22 13:07:25.823848'
    - '2013-06-25 06:10:07.290417'
    - ! 'Formats and writes to ios, converting parameters under control of

      the format string. See Kernel#sprintf for details.'
    - 
  - - 207
    - ARGF#putc(obj) =>obj
    - 1
    - '2013-06-22 13:07:26.148410'
    - '2013-06-25 06:10:07.447912'
    - ! 'If obj is Numeric, write the character whose code is

      the least-significant byte of obj, otherwise write the first byte

      of the string representation of obj to ios. Note: This

      method is not safe for use with multi-byte characters as it will truncate

      them.'
    - 
  - - 208
    - ARGF#puts(obj, ...) =>nil
    - 1
    - '2013-06-22 13:07:26.495275'
    - '2013-06-25 06:10:07.592331'
    - ! 'Writes the given objects to ios as with IO#print.

      Writes a record separator (typically a newline) after any that do not

      already end with a newline sequence. If called with an array argument,

      writes each element on a new line. If called without arguments, outputs a

      single record separator.'
    - 
  - - 209
    - ARGF#read([length [, outbuf]]) =>string, outbuf, or nil
    - 1
    - '2013-06-22 13:07:26.833118'
    - '2013-06-25 06:10:07.751399'
    - ! 'For example:'
    - 
  - - 210
    - ARGF#read_nonblock(maxlen) =>string
    - 1
    - '2013-06-22 13:07:27.146549'
    - '2013-06-25 06:10:07.908979'
    - 
    - 
  - - 211
    - ARGF#read_nonblock(maxlen, outbuf) =>outbuf
    - 1
    - '2013-06-22 13:07:27.571257'
    - '2013-06-25 06:10:08.077029'
    - ! 'Reads at most maxlen bytes from the ARGF

      stream in non-blocking mode.'
    - 
  - - 212
    - ARGF#readbyte =>Fixnum
    - 1
    - '2013-06-22 13:07:27.907291'
    - '2013-06-25 06:10:08.399725'
    - ! 'Reads the next 8-bit byte from ARGF and returns it

      as a Fixnum. Raises an EOFError after the last

      byte of the last file has been read.'
    - 
  - - 213
    - ARGF#readchar =>String or nil
    - 1
    - '2013-06-22 13:07:28.265212'
    - '2013-06-25 06:10:08.556493'
    - ! 'Reads the next character from ARGF and returns it as a

      String. Raises an EOFError after the last

      character of the last file has been read.'
    - 
  - - 214
    - ARGF#readline(sep=$/) =>string
    - 1
    - '2013-06-22 13:07:28.749344'
    - '2013-06-25 06:10:08.713204'
    - 
    - 
  - - 215
    - ARGF#readline(limit) =>string
    - 1
    - '2013-06-22 13:07:29.049392'
    - '2013-06-25 06:10:08.869831'
    - 
    - 
  - - 216
    - ARGF#readline(sep, limit) =>string
    - 1
    - '2013-06-22 13:07:29.397467'
    - '2013-06-25 06:10:09.016804'
    - Returns the next line from the current file in ARGF.
    - 
  - - 217
    - ARGF#readlines(sep=$/) =>array
    - 1
    - '2013-06-22 13:07:29.931014'
    - '2013-06-25 06:10:09.150781'
    - 
    - 
  - - 218
    - ARGF#readlines(limit) =>array
    - 1
    - '2013-06-22 13:07:30.570830'
    - '2013-06-25 06:10:09.297278'
    - 
    - 
  - - 219
    - ARGF#readlines(sep, limit) =>array
    - 1
    - '2013-06-22 13:07:31.039990'
    - '2013-06-25 06:10:09.609924'
    - ! 'Reads ARGF‘s current file in its entirety, returning an

      Array of its lines, one line per element. Lines are assumed to

      be separated by sep.'
    - 
  - - 220
    - ARGF#readpartial(maxlen) =>string
    - 1
    - '2013-06-22 13:07:31.364504'
    - '2013-06-25 06:10:09.777688'
    - 
    - 
  - - 221
    - ARGF#readpartial(maxlen, outbuf) =>outbuf
    - 1
    - '2013-06-22 13:07:31.710996'
    - '2013-06-25 06:10:09.946045'
    - ! 'Reads at most maxlen bytes from the ARGF

      stream.'
    - 
  - - 222
    - ARGF#rewind =>0
    - 1
    - '2013-06-22 13:07:32.331309'
    - '2013-06-25 06:10:10.113752'
    - ! 'Positions the current file to the beginning of input, resetting

      ARGF.lineno to zero.'
    - 
  - - 223
    - ARGF#seek(amount, whence=IO::SEEK_SET) =>0
    - 1
    - '2013-06-22 13:07:32.678116'
    - '2013-06-25 06:10:10.270405'
    - ! 'Seeks to offset amount (an Integer) in the

      ARGF stream according to the value of whence. See

      +IO#seek+ for further details.'
    - 
  - - 224
    - ARGF#set_encoding(ext_enc) =>ARGF
    - 1
    - '2013-06-22 13:07:33.025668'
    - '2013-06-25 06:10:10.405614'
    - 
    - 
  - - 225
    - ARGF#set_encoding("ext_enc:int_enc") =>ARGF
    - 1
    - '2013-06-22 13:07:33.494612'
    - '2013-06-25 06:10:10.695205'
    - 
    - 
  - - 226
    - ARGF#set_encoding(ext_enc, int_enc) =>ARGF
    - 1
    - '2013-06-22 13:07:33.832632'
    - '2013-06-25 06:10:10.851995'
    - 
    - 
  - - 227
    - ARGF#set_encoding("ext_enc:int_enc", opt) =>ARGF
    - 1
    - '2013-06-22 13:07:34.213114'
    - '2013-06-25 06:10:11.008880'
    - 
    - 
  - - 228
    - ARGF#set_encoding(ext_enc, int_enc, opt) =>ARGF
    - 1
    - '2013-06-22 13:07:34.705042'
    - '2013-06-25 06:10:11.178935'
    - If single argument is specified, strings read from ARGF are tagged with the
      encoding specified.
    - 
  - - 229
    - ARGF#skip =>ARGF
    - 1
    - '2013-06-22 13:07:35.184815'
    - '2013-06-25 06:10:11.346503'
    - ! 'For example:'
    - 
  - - 230
    - ARGF#tell =>Integer
    - 1
    - '2013-06-22 13:07:35.809846'
    - '2013-06-25 06:10:11.503749'
    - ! 'Returns the current offset (in bytes) of the current file in

      ARGF.'
    - 
  - - 231
    - ARGF#to_a(sep=$/) =>array
    - 1
    - '2013-06-22 13:07:36.192330'
    - '2013-06-25 06:10:11.804844'
    - 
    - 
  - - 232
    - ARGF#to_a(limit) =>array
    - 1
    - '2013-06-22 13:07:36.517042'
    - '2013-06-25 06:10:11.938863'
    - 
    - 
  - - 233
    - ARGF#to_a(sep, limit) =>array
    - 1
    - '2013-06-22 13:07:36.830775'
    - '2013-06-25 06:10:12.084440'
    - ! 'Reads ARGF‘s current file in its entirety, returning an

      Array of its lines, one line per element. Lines are assumed to

      be separated by sep.'
    - 
  - - 234
    - ARGF#to_i =>fixnum
    - 1
    - '2013-06-22 13:07:37.333344'
    - '2013-06-25 06:10:12.230520'
    - ! 'Returns an integer representing the numeric file descriptor for the current

      file. Raises an ArgumentError if there isn’t a current file.'
    - 
  - - 235
    - ARGF#to_io =>IO
    - 1
    - '2013-06-22 13:07:37.659995'
    - '2013-06-25 06:10:12.386714'
    - ! 'Returns an IO object representing the current file. This will

      be a File object unless the current file is a stream such as

      STDIN.'
    - 
  - - 236
    - ARGF#to_s =>String
    - 1
    - '2013-06-22 13:07:37.996402'
    - '2013-06-25 06:10:12.533524'
    - Returns “ARGF”.
    - 
  - - 237
    - ARGF#to_write_io =>io
    - 1
    - '2013-06-22 13:07:38.465656'
    - '2013-06-25 06:10:12.703242'
    - ! 'Returns IO instance tied to ARGF for writing

      if inplace mode is enabled.'
    - 
  - - 238
    - ARGF#write(string) =>integer
    - 1
    - '2013-06-22 13:07:38.812540'
    - '2013-06-25 06:10:13.004705'
    - Writes string if inplace mode.
    - 
  - - 239
    - Hash#Hash[ key, value, ... ] =>new_hash
    - 42
    - '2013-06-22 13:25:45.866079'
    - '2013-06-25 06:10:13.150215'
    - 
    - 
  - - 240
    - Hash#Hash[ [ [key, value], ... ] ] =>new_hash
    - 42
    - '2013-06-22 13:25:46.454621'
    - '2013-06-25 06:10:13.295185'
    - 
    - 
  - - 241
    - Hash#Hash[ object ] =>new_hash
    - 42
    - '2013-06-22 13:25:46.779243'
    - '2013-06-25 06:10:13.441392'
    - Creates a new hash populated with the given objects.
    - 
  - - 242
    - Hash#new =>new_hash
    - 42
    - '2013-06-22 13:25:47.092575'
    - '2013-06-25 06:10:13.598470'
    - 
    - 
  - - 243
    - Hash#new(obj) =>new_hash
    - 42
    - '2013-06-22 13:25:47.430664'
    - '2013-06-25 06:10:13.765342'
    - 
    - 
  - - 244
    - Hash#new {|hash, key| block } =>new_hash
    - 42
    - '2013-06-22 13:25:47.744218'
    - '2013-06-25 06:10:14.077768'
    - ! 'Returns a new, empty hash. If this hash is subsequently accessed by a key

      that doesn’t correspond to a hash entry, the value returned depends on the

      style of new used to create the hash. In the first form, the

      access returns nil. If obj is specified, this single

      object will be used for all default values. If a block is

      specified, it will be called with the hash object and the key, and should

      return the default value. It is the block’s responsibility to store the

      value in the hash if required.'
    - 
  - - 245
    - Hash#try_convert(obj) =>hash or nil
    - 42
    - '2013-06-22 13:25:48.046554'
    - '2013-06-25 06:10:14.234935'
    - ! 'Try to convert obj into a hash, using #to_hash method. Returns converted

      hash or nil if obj cannot be converted for any reason.'
    - 
  - - 246
    - Hash#hsh == other_hash =>true or false
    - 42
    - '2013-06-22 13:25:48.382694'
    - '2013-06-25 06:10:14.393008'
    - ! 'Equality—Two hashes are equal if they each contain the same number of keys

      and if each key-value pair is equal to (according to

      Object#==) the corresponding elements in the other hash.'
    - 
  - - 247
    - Hash#hsh[key] =>value
    - 42
    - '2013-06-22 13:25:48.696206'
    - '2013-06-25 06:10:14.539749'
    - ! 'Element Reference—Retrieves the value object corresponding to the

      key object. If not found, returns the default value (see

      Hash::new for details).'
    - 
  - - 248
    - Hash#hsh[key] = value =>value
    - 42
    - '2013-06-22 13:25:49.012080'
    - '2013-06-25 06:10:14.684668'
    - ! 'Element Assignment—Associates the value given by value with the

      key given by key. key should not have its value changed

      while it is in use as a key (a String passed as a key will be

      duplicated and frozen).'
    - 
  - - 249
    - Hash#assoc(obj) =>an_array or nil
    - 42
    - '2013-06-22 13:25:49.359199'
    - '2013-06-25 06:10:14.830932'
    - ! 'Searches through the hash comparing obj with the key using

      ==. Returns the key-value pair (two elements array) or

      nil if no match is found.  See Array#assoc.'
    - 
  - - 250
    - Hash#clear =>hsh
    - 42
    - '2013-06-22 13:25:49.796591'
    - '2013-06-25 06:10:14.987919'
    - Removes all key-value pairs from hsh.
    - 
  - - 251
    - Hash#compare_by_identity =>hsh
    - 42
    - '2013-06-22 13:25:50.120410'
    - '2013-06-25 06:10:15.300254'
    - ! 'Makes hsh compare its keys by their identity, i.e. it will

      consider exact same objects as same keys.'
    - 
  - - 252
    - Hash#compare_by_identity? =>true or false
    - 42
    - '2013-06-22 13:25:50.469473'
    - '2013-06-25 06:10:15.467546'
    - ! 'Returns true if hsh will compare its keys by their

      identity.  Also see Hash#compare_by_identity.'
    - 
  - - 253
    - Hash#default(key=nil) =>obj
    - 42
    - '2013-06-22 13:25:50.783375'
    - '2013-06-25 06:10:15.635001'
    - ! 'Returns the default value, the value that would be returned by hsh if key
      did not exist in

      hsh. See also Hash::new and

      Hash#default=.'
    - 
  - - 254
    - Hash#default = obj =>obj
    - 42
    - '2013-06-22 13:25:51.143232'
    - '2013-06-25 06:10:15.803423'
    - ! 'Sets the default value, the value returned for a key that does not exist
      in

      the hash. It is not possible to set the default to a Proc that

      will be executed on each key lookup.'
    - 
  - - 255
    - Hash#default_proc =>anObject
    - 42
    - '2013-06-22 13:25:51.488584'
    - '2013-06-25 06:10:15.961834'
    - ! 'If Hash::new was invoked with a block, return that block,

      otherwise return nil.'
    - 
  - - 256
    - Hash#default_proc = proc_obj or nil
    - 42
    - '2013-06-22 13:25:51.815250'
    - '2013-06-25 03:53:46.760070'
    - Sets the default proc to be executed on each failed key lookup.
    - 
  - - 257
    - Hash#delete(key) =>value
    - 42
    - '2013-06-22 13:25:52.129022'
    - '2013-06-25 06:10:16.107370'
    - 
    - 
  - - 258
    - Hash#delete(key) {| key | block } =>value
    - 42
    - '2013-06-22 13:25:52.465167'
    - '2013-06-25 06:10:16.442979'
    - ! 'Deletes the key-value pair and returns the value from hsh whose

      key is equal to key. If the key is not found, returns the

      default value. If the optional code block is given and the key is

      not found, pass in the key and return the result of block.'
    - 
  - - 259
    - Hash#delete_if {| key, value | block } =>hsh
    - 42
    - '2013-06-22 13:25:52.801134'
    - '2013-06-25 06:10:16.598534'
    - 
    - 
  - - 260
    - Hash#delete_if =>an_enumerator
    - 42
    - '2013-06-22 13:25:53.105572'
    - '2013-06-25 06:10:16.766826'
    - ! 'Deletes every key-value pair from hsh for which block

      evaluates to true.'
    - 
  - - 261
    - Hash#each {| key, value | block } =>hsh
    - 42
    - '2013-06-22 13:25:53.430278'
    - '2013-06-25 06:10:16.934376'
    - 
    - 
  - - 262
    - Hash#each_pair {| key, value | block } =>hsh
    - 42
    - '2013-06-22 13:25:53.766165'
    - '2013-06-25 06:10:17.102612'
    - 
    - 
  - - 263
    - Hash#each =>an_enumerator
    - 42
    - '2013-06-22 13:25:54.091301'
    - '2013-06-25 06:10:17.426050'
    - 
    - 
  - - 264
    - Hash#each_pair =>an_enumerator
    - 42
    - '2013-06-22 13:25:54.406827'
    - '2013-06-25 06:10:17.583201'
    - ! 'Calls block once for each key in hsh, passing the

      key-value pair as parameters.'
    - 
  - - 265
    - Hash#each_key {| key | block } =>hsh
    - 42
    - '2013-06-22 13:25:54.720136'
    - '2013-06-25 06:10:17.741186'
    - 
    - 
  - - 266
    - Hash#each_key =>an_enumerator
    - 42
    - '2013-06-22 13:25:55.055871'
    - '2013-06-25 06:10:17.897912'
    - ! 'Calls block once for each key in hsh, passing the key as

      a parameter.'
    - 
  - - 267
    - Hash#each_pair {| key, value | block } =>hsh
    - 42
    - '2013-06-22 13:25:55.376675'
    - '2013-06-25 06:10:18.066138'
    - 
    - 
  - - 268
    - Hash#each_pair =>an_enumerator
    - 42
    - '2013-06-22 13:25:55.709380'
    - '2013-06-25 06:10:18.233721'
    - 
    - 
  - - 269
    - Hash#each_value {| value | block } =>hsh
    - 42
    - '2013-06-22 13:25:56.089819'
    - '2013-06-25 06:10:18.390747'
    - 
    - 
  - - 270
    - Hash#each_value =>an_enumerator
    - 42
    - '2013-06-22 13:25:56.414582'
    - '2013-06-25 06:10:18.714164'
    - ! 'Calls block once for each key in hsh, passing the value

      as a parameter.'
    - 
  - - 271
    - Hash#empty? =>true or false
    - 42
    - '2013-06-22 13:25:56.705780'
    - '2013-06-25 06:10:18.871392'
    - Returns true if hsh contains no key-value pairs.
    - 
  - - 272
    - Hash#eql?(other) =>true or false
    - 42
    - '2013-06-22 13:25:57.041662'
    - '2013-06-25 06:10:19.027340'
    - ! 'Returns true if hash and other are both

      hashes with the same content.'
    - 
  - - 273
    - Hash#fetch(key [, default] ) =>obj
    - 42
    - '2013-06-22 13:25:57.379786'
    - '2013-06-25 06:10:19.339669'
    - 
    - 
  - - 274
    - Hash#fetch(key) {| key | block } =>obj
    - 42
    - '2013-06-22 13:25:57.659420'
    - '2013-06-25 06:10:19.521093'
    - ! 'Returns a value from the hash for the given key. If the key can’t be found,

      there are several options: With no other arguments, it will raise an

      KeyError exception; if default is given, then that

      will be returned; if the optional code block is specified, then that will

      be run and its result returned.'
    - 
  - - 275
    - Hash#flatten =>an_array
    - 42
    - '2013-06-22 13:25:57.961932'
    - '2013-06-25 06:10:19.833746'
    - 
    - 
  - - 276
    - Hash#flatten(level) =>an_array
    - 42
    - '2013-06-22 13:25:58.297753'
    - '2013-06-25 06:10:20.145351'
    - ! 'Returns a new array that is a one-dimensional flattening of this hash. That

      is, for every key or value that is an array, extract its elements into the

      new array.  Unlike Array#flatten,

      this method does not flatten recursively by default.  The optional

      level argument determines the level of recursion to flatten.'
    - 
  - - 277
    - Hash#has_key?(key) =>true or false
    - 42
    - '2013-06-22 13:25:58.646941'
    - '2013-06-25 06:10:20.436231'
    - Returns true if the given key is present in hsh.
    - 
  - - 278
    - Hash#has_value?(value) =>true or false
    - 42
    - '2013-06-22 13:25:58.960819'
    - '2013-06-25 06:10:20.736594'
    - ! 'Returns true if the given value is present for some key in

      hsh.'
    - 
  - - 279
    - Hash#hash =>fixnum
    - 42
    - '2013-06-22 13:25:59.252160'
    - '2013-06-25 06:10:21.037404'
    - ! 'Compute a hash-code for this hash. Two hashes with the same content will

      have the same hash code (and will compare using eql?).'
    - 
  - - 280
    - Hash#include?(key) =>true or false
    - 42
    - '2013-06-22 13:25:59.577176'
    - '2013-06-25 06:10:21.356140'
    - Returns true if the given key is present in hsh.
    - 
  - - 281
    - Hash#to_s =>string
    - 42
    - '2013-06-22 13:25:59.926342'
    - '2013-06-25 06:10:21.662376'
    - 
    - 
  - - 282
    - Hash#inspect =>string
    - 42
    - '2013-06-22 13:26:00.239565'
    - '2013-06-25 06:10:21.952826'
    - Return the contents of this hash as a string.
    - 
  - - 283
    - Hash#invert =>new_hash
    - 42
    - '2013-06-22 13:26:00.564564'
    - '2013-06-25 06:10:22.089262'
    - ! 'Returns a new hash created by using hsh’s values as keys, and the

      keys as values.'
    - 
  - - 284
    - Hash#keep_if {| key, value | block } =>hsh
    - 42
    - '2013-06-22 13:26:00.978546'
    - '2013-06-25 06:10:22.390192'
    - 
    - 
  - - 285
    - Hash#keep_if =>an_enumerator
    - 42
    - '2013-06-22 13:26:01.403200'
    - '2013-06-25 06:10:22.703462'
    - ! 'Deletes every key-value pair from hsh for which block

      evaluates to false.'
    - 
  - - 286
    - Hash#key(value) =>key
    - 42
    - '2013-06-22 13:26:01.808833'
    - '2013-06-25 06:10:23.004194'
    - ! 'Returns the key of an occurrence of a given value. If the value is not

      found, returns nil.'
    - 
  - - 287
    - Hash#key?(key) =>true or false
    - 42
    - '2013-06-22 13:26:02.166727'
    - '2013-06-25 06:10:23.316783'
    - Returns true if the given key is present in hsh.
    - 
  - - 288
    - Hash#keys =>array
    - 42
    - '2013-06-22 13:26:02.513951'
    - '2013-06-25 06:10:23.784363'
    - ! 'Returns a new array populated with the keys from this hash. See also

      Hash#values.'
    - 
  - - 289
    - Hash#length =>fixnum
    - 42
    - '2013-06-22 13:26:02.816684'
    - '2013-06-25 06:10:24.096802'
    - Returns the number of key-value pairs in the hash.
    - 
  - - 290
    - Hash#member?(key) =>true or false
    - 42
    - '2013-06-22 13:26:03.120833'
    - '2013-06-25 06:10:24.305464'
    - Returns true if the given key is present in hsh.
    - 
  - - 291
    - Hash#merge(other_hash) =>new_hash
    - 42
    - '2013-06-22 13:26:03.478705'
    - '2013-06-25 06:10:24.688241'
    - 
    - 
  - - 292
    - Hash#merge(other_hash){|key, oldval, newval| block} =>new_hash
    - 42
    - '2013-06-22 13:26:03.825873'
    - '2013-06-25 06:10:24.988961'
    - ! 'Returns a new hash containing the contents of other_hash and the

      contents of hsh. If no block is specified, the value for entries

      with duplicate keys will be that of other_hash. Otherwise the

      value for each duplicate key is determined by calling the block with the

      key, its value in hsh and its value in other_hash.'
    - 
  - - 293
    - Hash#merge!(other_hash) =>hsh
    - 42
    - '2013-06-22 13:26:04.129104'
    - '2013-06-25 06:10:25.292917'
    - 
    - 
  - - 294
    - Hash#merge!(other_hash){|key, oldval, newval| block} =>hsh
    - 42
    - '2013-06-22 13:26:04.455424'
    - '2013-06-25 06:10:25.449562'
    - ! 'Adds the contents of other_hash to hsh.  If no block is

      specified, entries with duplicate keys are overwritten with the values from

      other_hash, otherwise the value of each duplicate key is

      determined by calling the block with the key, its value in hsh and

      its value in other_hash.'
    - 
  - - 295
    - Hash#rassoc(obj) =>an_array or nil
    - 42
    - '2013-06-22 13:26:04.813631'
    - '2013-06-25 06:10:25.628824'
    - ! 'Searches through the hash comparing obj with the value using

      ==. Returns the first key-value pair (two-element array) that

      matches. See also Array#rassoc.'
    - 
  - - 296
    - Hash#rehash =>hsh
    - 42
    - '2013-06-22 13:26:05.094347'
    - '2013-06-25 06:10:25.955671'
    - ! 'Rebuilds the hash based on the current hash values for each key. If values

      of key objects have changed since they were inserted, this method will

      reindex hsh. If Hash#rehash is called while an

      iterator is traversing the hash, an RuntimeError will be

      raised in the iterator.'
    - 
  - - 297
    - Hash#reject {| key, value | block } =>a_hash
    - 42
    - '2013-06-22 13:26:05.374670'
    - '2013-06-25 06:10:26.276700'
    - 
    - 
  - - 298
    - Hash#reject =>an_enumerator
    - 42
    - '2013-06-22 13:26:05.701203'
    - '2013-06-25 06:10:26.588624'
    - ! 'Same as Hash#delete_if, but works on (and returns) a copy of

      the hsh. Equivalent to hsh.dup.delete_if.'
    - 
  - - 299
    - Hash#reject! {| key, value | block } =>hsh or nil
    - 42
    - '2013-06-22 13:26:06.182520'
    - '2013-06-25 06:10:26.879704'
    - 
    - 
  - - 300
    - Hash#reject! =>an_enumerator
    - 42
    - '2013-06-22 13:26:06.473320'
    - '2013-06-25 06:10:27.169008'
    - ! 'Equivalent to Hash#delete_if, but returns nil if

      no changes were made.'
    - 
  - - 301
    - Hash#replace(other_hash) =>hsh
    - 42
    - '2013-06-22 13:26:06.787416'
    - '2013-06-25 06:10:27.472419'
    - ! 'Replaces the contents of hsh with the contents of

      other_hash.'
    - 
  - - 302
    - Hash#select {|key, value| block} =>a_hash
    - 42
    - '2013-06-22 13:26:07.191896'
    - '2013-06-25 06:10:27.629005'
    - 
    - 
  - - 303
    - Hash#select =>an_enumerator
    - 42
    - '2013-06-22 13:26:07.494088'
    - '2013-06-25 06:10:27.941211'
    - Returns a new hash consisting of entries for which the block returns true.
    - 
  - - 304
    - Hash#select! {| key, value | block } =>hsh or nil
    - 42
    - '2013-06-22 13:26:07.796913'
    - '2013-06-25 06:10:28.242778'
    - 
    - 
  - - 305
    - Hash#select! =>an_enumerator
    - 42
    - '2013-06-22 13:26:08.277552'
    - '2013-06-25 06:10:28.543897'
    - ! 'Equivalent to Hash#keep_if, but returns nil if no

      changes were made.'
    - 
  - - 306
    - Hash#shift =>anArray or obj
    - 42
    - '2013-06-22 13:26:08.635658'
    - '2013-06-25 06:10:28.834126'
    - ! 'Removes a key-value pair from hsh and returns it as the two-item

      array [ key, value ], or the hash’s

      default value if the hash is empty.'
    - 
  - - 307
    - Hash#size =>fixnum
    - 42
    - '2013-06-22 13:26:08.929815'
    - '2013-06-25 06:10:29.123939'
    - Returns the number of key-value pairs in the hash.
    - 
  - - 308
    - Hash#store(key, value) =>value
    - 42
    - '2013-06-22 13:26:09.376165'
    - '2013-06-25 06:10:29.402886'
    - ! 'Element Assignment—Associates the value given by value with the

      key given by key. key should not have its value changed

      while it is in use as a key (a String passed as a key will be

      duplicated and frozen).'
    - 
  - - 309
    - Hash#to_a =>array
    - 42
    - '2013-06-22 13:26:09.845712'
    - '2013-06-25 06:10:29.704099'
    - ! 'Converts hsh to a nested array of [ key,

      value ] arrays.'
    - 
  - - 310
    - Hash#to_h =>hsh or new_hash
    - 42
    - '2013-06-22 13:26:10.348159'
    - '2013-06-25 06:10:29.996319'
    - Returns self. If called on a subclass of Hash, converts the receiver to a Hash
      object.
    - 
  - - 311
    - Hash#to_hash => hsh
    - 42
    - '2013-06-22 13:26:10.652812'
    - '2013-06-25 03:53:52.776905'
    - Returns self.
    - 
  - - 312
    - Hash#update(other_hash) =>hsh
    - 42
    - '2013-06-22 13:26:10.966917'
    - '2013-06-25 06:10:30.297378'
    - 
    - 
  - - 313
    - Hash#update(other_hash){|key, oldval, newval| block} =>hsh
    - 42
    - '2013-06-22 13:26:11.637433'
    - '2013-06-25 06:10:30.598462'
    - ! 'Adds the contents of other_hash to hsh.  If no block is

      specified, entries with duplicate keys are overwritten with the values from

      other_hash, otherwise the value of each duplicate key is

      determined by calling the block with the key, its value in hsh and

      its value in other_hash.'
    - 
  - - 314
    - Hash#value?(value) =>true or false
    - 42
    - '2013-06-22 13:26:12.019485'
    - '2013-06-25 06:10:30.877678'
    - ! 'Returns true if the given value is present for some key in

      hsh.'
    - 
  - - 315
    - Hash#values =>array
    - 42
    - '2013-06-22 13:26:12.333561'
    - '2013-06-25 06:10:31.045533'
    - ! 'Returns a new array populated with the values from hsh. See also

      Hash#keys.'
    - 
  - - 316
    - Hash#values_at(key, ...) =>array
    - 42
    - '2013-06-22 13:26:12.825156'
    - '2013-06-25 06:10:31.191025'
    - ! 'Return an array containing the values associated with the given keys. Also

      see Hash.select.'
    - 
  - - 317
    - Binding#eval(string [, filename [,lineno]]) =>obj
    - 6
    - '2013-06-22 13:28:35.936053'
    - '2013-06-25 06:10:31.482259'
    - ! 'Evaluates the Ruby expression(s) in string, in the

      binding’s context.  If the optional filename and

      lineno parameters are present, they will be used when reporting

      syntax errors.'
    - 
  - - 318
    - Bignum#big & numeric =>integer
    - 5
    - '2013-06-22 13:30:00.110217'
    - '2013-06-25 06:10:31.771600'
    - ! 'Performs bitwise and between big and

      numeric.'
    - 
  - - 319
    - Bignum#big * other =>Numeric
    - 5
    - '2013-06-22 13:30:00.469401'
    - '2013-06-25 06:10:32.073123'
    - Multiplies big and other, returning the result.
    - 
  - - 320
    - Bignum#big ** exponent =>numeric
    - 5
    - '2013-06-22 13:30:00.989973'
    - '2013-06-25 06:10:32.375944'
    - ! 'Raises big to the exponent power (which may be an

      integer, float, or anything that will coerce to a number). The result may

      be a Fixnum, Bignum, or

      Float'
    - 
  - - 321
    - Bignum#big + other =>Numeric
    - 5
    - '2013-06-22 13:30:01.354370'
    - '2013-06-25 06:10:32.688185'
    - Adds big and other, returning the result.
    - 
  - - 322
    - Bignum#big - other =>Numeric
    - 5
    - '2013-06-22 13:30:01.666997'
    - '2013-06-25 06:10:32.978452'
    - Subtracts other from big, returning the result.
    - 
  - - 323
    - Bignum#-big =>integer
    - 5
    - '2013-06-22 13:30:02.004469'
    - '2013-06-25 06:10:33.268772'
    - Unary minus (returns an integer whose value is 0-big)
    - 
  - - 324
    - Bignum#big / other =>Numeric
    - 5
    - '2013-06-22 13:30:02.307909'
    - '2013-06-25 06:10:33.549350'
    - ! 'Performs division: the class of the resulting object depends on the class

      of numeric and on the magnitude of the result.'
    - 
  - - 325
    - ! 'Bignum#big click to toggle source '
    - 5
    - '2013-06-22 13:30:02.620567'
    - '2013-06-24 09:50:36.778092'
    - ! 'Returns true if the value of big is less than or

      equal to that of real.'
    - 
  - - 326
    - ! 'Bignum#big click to toggle source '
    - 5
    - '2013-06-22 13:30:02.933861'
    - '2013-06-23 06:49:49.155151'
    - 
    - 
  - - 327
    - ! 'Bignum#big click to toggle source '
    - 5
    - '2013-06-22 13:30:03.260877'
    - '2013-06-23 06:49:49.457595'
    - 
    - 
  - - 328
    - Bignum#big numeric =>-1, 0, +1 or nil
    - 5
    - '2013-06-22 13:30:03.630579'
    - '2013-06-25 06:10:33.837660'
    - ! 'Comparison—Returns -1, 0, or +1 depending on whether big is

      less than, equal to, or greater than numeric. This is the

      basis for the tests in Comparable.'
    - 
  - - 329
    - Bignum#big > real =>true or false
    - 5
    - '2013-06-22 13:30:03.933011'
    - '2013-06-25 06:10:34.106097'
    - ! 'Returns true if the value of big is greater than

      that of real.'
    - 
  - - 330
    - Bignum#big >= real =>true or false
    - 5
    - '2013-06-22 13:30:04.268961'
    - '2013-06-25 06:10:34.396207'
    - ! 'Returns true if the value of big is greater than

      or equal to that of real.'
    - 
  - - 331
    - Bignum#big >> numeric =>integer
    - 5
    - '2013-06-22 13:30:04.606955'
    - '2013-06-25 06:10:34.696962'
    - ! 'Shifts big right numeric positions (left if numeric is

      negative).'
    - 
  - - 332
    - Bignum#big[n] =>0, 1
    - 5
    - '2013-06-22 13:30:04.899098'
    - '2013-06-25 06:10:34.989120'
    - ! 'Bit Reference—Returns the nth bit in the (assumed) binary

      representation of big, where big

      is the least significant bit.'
    - 
  - - 333
    - Bignum#big ^ numeric =>integer
    - 5
    - '2013-06-22 13:30:05.201376'
    - '2013-06-25 06:10:35.267956'
    - Performs bitwise +exclusive or+ between big and numeric.
    - 
  - - 334
    - Bignum#abs =>aBignum
    - 5
    - '2013-06-22 13:30:05.548310'
    - '2013-06-25 06:10:35.546806'
    - Returns the absolute value of big.
    - 
  - - 335
    - Bignum#div(other) =>integer
    - 5
    - '2013-06-22 13:30:05.873145'
    - '2013-06-25 06:10:35.815099'
    - ! 'Performs integer division: returns integer value.'
    - 
  - - 336
    - Bignum#divmod(numeric) =>array
    - 5
    - '2013-06-22 13:30:06.166026'
    - '2013-06-25 06:10:36.093674'
    - See Numeric#divmod.
    - 
  - - 337
    - Bignum#eql?(obj) =>true or false
    - 5
    - '2013-06-22 13:30:06.479959'
    - '2013-06-25 06:10:36.284661'
    - ! 'Returns true only if obj is a Bignum

      with the same value as big. Contrast this with

      Bignum#==, which performs type conversions.'
    - 
  - - 338
    - Bignum#even? =>true or false
    - 5
    - '2013-06-22 13:30:06.827124'
    - '2013-06-25 06:10:36.607283'
    - Returns true if big is an even number.
    - 
  - - 339
    - Bignum#fdiv(numeric) =>float
    - 5
    - '2013-06-22 13:30:07.163529'
    - '2013-06-25 06:10:36.919700'
    - ! 'Returns the floating point result of dividing big by

      numeric.'
    - 
  - - 340
    - Bignum#hash =>fixnum
    - 5
    - '2013-06-22 13:30:07.478970'
    - '2013-06-25 06:10:37.243223'
    - Compute a hash based on the value of big.
    - 
  - - 341
    - Bignum#magnitude =>aBignum
    - 5
    - '2013-06-22 13:30:07.847955'
    - '2013-06-25 06:10:37.546321'
    - Returns the absolute value of big.
    - 
  - - 342
    - Bignum#modulo(other) =>Numeric
    - 5
    - '2013-06-22 13:30:08.183986'
    - '2013-06-25 06:10:37.681274'
    - ! 'Returns big modulo other. See Numeric#divmod for more

      information.'
    - 
  - - 343
    - Bignum#odd? =>true or false
    - 5
    - '2013-06-22 13:30:08.497913'
    - '2013-06-25 06:10:37.959885'
    - Returns true if big is an odd number.
    - 
  - - 344
    - Bignum#remainder(numeric) =>number
    - 5
    - '2013-06-22 13:30:08.836471'
    - '2013-06-25 06:10:38.238978'
    - Returns the remainder after dividing big by numeric.
    - 
  - - 345
    - Bignum#size =>integer
    - 5
    - '2013-06-22 13:30:09.183392'
    - '2013-06-25 06:10:38.540362'
    - Returns the number of bytes in the machine representation of big.
    - 
  - - 346
    - Bignum#to_f =>float
    - 5
    - '2013-06-22 13:30:09.664863'
    - '2013-06-25 06:10:38.864181'
    - ! 'Converts big to a Float. If big doesn’t fit

      in a Float, the result is infinity.'
    - 
  - - 347
    - Bignum#to_s(base=10) =>string
    - 5
    - '2013-06-22 13:30:09.945215'
    - '2013-06-25 06:10:39.175850'
    - ! 'Returns a string containing the representation of big radix

      base (2 through 36).'
    - 
  - - 348
    - Bignum#big | numeric =>integer
    - 5
    - '2013-06-22 13:30:10.272165'
    - '2013-06-25 06:10:39.487973'
    - Performs bitwise or between big and numeric.
    - 
  - - 349
    - Bignum#~big =>integer
    - 5
    - '2013-06-22 13:30:10.607956'
    - '2013-06-25 06:10:39.801231'
    - ! 'Inverts the bits in big. As Bignums are conceptually infinite length, the

      result acts as if it had an infinite number of one bits to the left. In hex

      representations, this is displayed as two periods to the left of the

      digits.'
    - 
  - - 350
    - Class#new(super_class=Object) =>a_class
    - 7
    - '2013-06-22 13:31:09.410255'
    - '2013-06-25 06:10:40.090777'
    - 
    - 
  - - 351
    - Class#new(super_class=Object) { |mod| ... } =>a_class
    - 7
    - '2013-06-22 13:31:09.753769'
    - '2013-06-25 06:10:40.372996'
    - ! 'Creates a new anonymous (unnamed) class with the given superclass (or

      Object if no parameter is given). You can give a class a name

      by assigning the class object to a constant.'
    - 
  - - 352
    - Class#allocate() =>obj
    - 7
    - '2013-06-22 13:31:10.091860'
    - '2013-06-25 06:10:40.662571'
    - ! 'Allocates space for a new object of class’s class and does not

      call initialize on the new instance. The returned object must be an

      instance of class.'
    - 
  - - 353
    - Class#new(args, ...) =>obj
    - 7
    - '2013-06-22 13:31:10.405590'
    - '2013-06-25 06:10:40.962759'
    - ! 'Calls allocate to create a new object of class’s

      class, then invokes that object’s initialize method, passing

      it args. This is the method that ends up getting called whenever

      an object is constructed using .new.'
    - 
  - - 354
    - Class#superclass =>a_super_class or nil
    - 7
    - '2013-06-22 13:31:10.719441'
    - '2013-06-25 06:10:41.153498'
    - Returns the superclass of class, or nil.
    - 
  - - 355
    - Class#inherited(subclass)
    - 7
    - '2013-06-22 13:31:11.246027'
    - '2013-06-25 03:18:46.859367'
    - Callback invoked whenever a subclass of the current class is created.
    - 
  - - 356
    - BasicObject#!obj =>true or false
    - 4
    - '2013-06-22 13:31:18.352880'
    - '2013-06-25 06:10:41.788808'
    - Boolean negate.
    - 
  - - 357
    - BasicObject#obj != other =>true or false
    - 4
    - '2013-06-22 13:31:18.744624'
    - '2013-06-25 06:10:42.111539'
    - Returns true if two objects are not-equal, otherwise false.
    - 
  - - 358
    - BasicObject#__id__ =>integer
    - 4
    - '2013-06-22 13:31:19.046938'
    - '2013-06-25 06:10:42.413171'
    - 
    - 
  - - 359
    - BasicObject#object_id =>integer
    - 4
    - '2013-06-22 13:31:19.351604'
    - '2013-06-25 06:10:42.713811'
    - Returns an integer identifier for obj.
    - 
  - - 360
    - BasicObject#send(symbol [, args...]) =>obj
    - 4
    - '2013-06-22 13:31:19.687332'
    - '2013-06-25 06:10:42.993623'
    - 
    - 
  - - 361
    - BasicObject#__send__(symbol [, args...]) =>obj
    - 4
    - '2013-06-22 13:31:20.045351'
    - '2013-06-25 06:10:43.296392'
    - 
    - 
  - - 362
    - BasicObject#send(string [, args...]) =>obj
    - 4
    - '2013-06-22 13:31:20.370999'
    - '2013-06-25 06:10:43.607772'
    - 
    - 
  - - 363
    - BasicObject#__send__(string [, args...]) =>obj
    - 4
    - '2013-06-22 13:31:20.652958'
    - '2013-06-25 06:10:43.920239'
    - ! 'Invokes the method identified by symbol, passing it any arguments

      specified. You can use __send__ if the name send

      clashes with an existing method in obj. When the method is

      identified by a string, the string is converted to a symbol.'
    - 
  - - 364
    - BasicObject#equal?(other) =>true or false
    - 4
    - '2013-06-22 13:31:21.181515'
    - '2013-06-25 06:10:44.232921'
    - ! 'Equality — At the Object level, == returns

      true only if obj and other are the

      same object. Typically, this method is overridden in descendant classes to

      provide class-specific meaning.'
    - 
  - - 365
    - BasicObject#instance_eval(string [, filename [, lineno]] ) =>obj
    - 4
    - '2013-06-22 13:31:21.481221'
    - '2013-06-25 06:10:44.700539'
    - 
    - 
  - - 366
    - BasicObject#instance_eval {| | block } =>obj
    - 4
    - '2013-06-22 13:31:22.007359'
    - '2013-06-25 06:10:45.001988'
    - ! 'Evaluates a string containing Ruby source code, or the given block, within

      the context of the receiver (obj). In order to set the context,

      the variable self is set to obj while the code is

      executing, giving the code access to obj’s instance variables. In

      the version of instance_eval that takes a String,

      the optional second and third parameters supply a filename and starting

      line number that are used when reporting compilation errors.'
    - 
  - - 367
    - BasicObject#instance_exec(arg...) {|var...| block } =>obj
    - 4
    - '2013-06-22 13:31:22.423526'
    - '2013-06-25 06:10:45.292204'
    - ! 'Executes the given block within the context of the receiver (obj).

      In order to set the context, the variable self is set to

      obj while the code is executing, giving the code access to

      obj’s instance variables.  Arguments are passed as block

      parameters.'
    - 
  - - 368
    - BasicObject#method_missing(symbol [, *args] ) =>result
    - 4
    - '2013-06-22 13:31:22.726394'
    - '2013-06-25 06:10:45.549181'
    - ! 'Invoked by Ruby when obj is sent a message it cannot handle.

      symbol is the symbol for the method called, and args are

      any arguments that were passed to it. By default, the interpreter raises an

      error when this method is called. However, it is possible to override the

      method to provide more dynamic behavior. If it is decided that a particular

      method should not be handled, then super should be called, so that

      ancestors can pick up the missing method. The example below creates a class

      Roman, which responds to methods with names consisting of

      roman numerals, returning the corresponding integer values.'
    - 
  - - 369
    - BasicObject#singleton_method_added(symbol)
    - 4
    - '2013-06-22 13:31:23.050784'
    - '2013-06-24 09:07:16.660076'
    - Invoked as a callback whenever a singleton method is added to the receiver.
    - 
  - - 370
    - BasicObject#singleton_method_removed(symbol)
    - 4
    - '2013-06-22 13:31:23.386980'
    - '2013-06-24 09:07:17.057723'
    - ! 'Invoked as a callback whenever a singleton method is removed from the

      receiver.'
    - 
  - - 371
    - BasicObject#singleton_method_undefined(symbol)
    - 4
    - '2013-06-22 13:31:23.724857'
    - '2013-06-24 09:07:17.513586'
    - ! 'Invoked as a callback whenever a singleton method is undefined in the

      receiver.'
    - 
  - - 372
    - GC#count =>Integer
    - 40
    - '2013-06-22 13:33:47.243515'
    - '2013-06-25 06:10:45.839012'
    - The number of times GC occurred.
    - 
  - - 373
    - GC#disable =>true or false
    - 40
    - '2013-06-22 13:33:47.623857'
    - '2013-06-25 06:10:46.142028'
    - ! 'Disables garbage collection, returning true if garbage

      collection was already disabled.'
    - 
  - - 374
    - GC#enable =>true or false
    - 40
    - '2013-06-22 13:33:47.948873'
    - '2013-06-25 06:10:46.444244'
    - ! 'Enables garbage collection, returning true if garbage

      collection was previously disabled.'
    - 
  - - 375
    - GC#malloc_allocated_size =>Integer
    - 40
    - '2013-06-22 13:33:48.265350'
    - '2013-06-25 06:10:46.633718'
    - Returns the size of memory allocated by malloc().
    - 
  - - 376
    - GC#malloc_allocations =>Integer
    - 40
    - '2013-06-22 13:33:48.566930'
    - '2013-06-25 06:10:46.812343'
    - Returns the number of malloc() allocations.
    - 
  - - 377
    - GC#start =>nil
    - 40
    - '2013-06-22 13:33:48.993155'
    - '2013-06-25 06:10:46.969307'
    - Initiates garbage collection, unless manually disabled.
    - 
  - - 378
    - GC#stat =>Hash
    - 40
    - '2013-06-22 13:33:49.420086'
    - '2013-06-25 06:10:47.103814'
    - Returns a Hash containing information about the GC.
    - 
  - - 379
    - GC#stress =>true or false
    - 40
    - '2013-06-22 13:33:49.734052'
    - '2013-06-25 06:10:47.249387'
    - Returns current status of GC stress mode.
    - 
  - - 380
    - GC#stress = bool =>bool
    - 40
    - '2013-06-22 13:33:50.048107'
    - '2013-06-25 06:10:47.395072'
    - Updates the GC stress mode.
    - 
  - - 381
    - GC#garbage_collect =>nil
    - 40
    - '2013-06-22 13:33:50.361250'
    - '2013-06-25 06:10:47.563793'
    - Initiates garbage collection, unless manually disabled.
    - 
  - - 382
    - GC#garbage_collect =>nil
    - 40
    - '2013-06-22 13:33:50.686656'
    - '2013-06-25 06:10:47.732633'
    - 
    - 
  - - 383
    - Math#acos(x) =>Float
    - 62
    - '2013-06-22 13:34:30.235605'
    - '2013-06-25 06:10:48.045325'
    - Computes the arc cosine of x. Returns 0..PI.
    - 
  - - 384
    - Math#acosh(x) =>Float
    - 62
    - '2013-06-22 13:34:30.589758'
    - '2013-06-25 06:10:48.214005'
    - Computes the inverse hyperbolic cosine of x.
    - 
  - - 385
    - Math#asin(x) =>Float
    - 62
    - '2013-06-22 13:34:30.924520'
    - '2013-06-25 06:10:48.370391'
    - Computes the arc sine of x. Returns -PI/2..PI/2.
    - 
  - - 386
    - Math#asinh(x) =>Float
    - 62
    - '2013-06-22 13:34:31.272889'
    - '2013-06-25 06:10:48.504932'
    - Computes the inverse hyperbolic sine of x.
    - 
  - - 387
    - Math#atan(x) =>Float
    - 62
    - '2013-06-22 13:34:31.587450'
    - '2013-06-25 06:10:48.660833'
    - Computes the arc tangent of x. Returns -PI/2..PI/2.
    - 
  - - 388
    - Math#atan2(y, x) =>Float
    - 62
    - '2013-06-22 13:34:31.923082'
    - '2013-06-25 06:10:48.806093'
    - ! 'Computes the arc tangent given y and x. Returns a

      Float in the range -PI..PI.'
    - 
  - - 389
    - Math#atanh(x) =>Float
    - 62
    - '2013-06-22 13:34:32.238056'
    - '2013-06-25 06:10:49.085862'
    - Computes the inverse hyperbolic tangent of x.
    - 
  - - 390
    - Math#cbrt(x) =>Float
    - 62
    - '2013-06-22 13:34:32.649439'
    - '2013-06-25 06:10:49.254168'
    - Returns the cube root of x.
    - 
  - - 391
    - Math#cos(x) =>Float
    - 62
    - '2013-06-22 13:34:32.977476'
    - '2013-06-25 06:10:49.423131'
    - Computes the cosine of x (expressed in radians). Returns a Float in the range
      -1.0..1.0.
    - 
  - - 392
    - Math#cosh(x) =>Float
    - 62
    - '2013-06-22 13:34:33.269082'
    - '2013-06-25 06:10:49.591108'
    - Computes the hyperbolic cosine of x (expressed in radians).
    - 
  - - 393
    - Math#erf(x) =>Float
    - 62
    - '2013-06-22 13:34:33.582606'
    - '2013-06-25 06:10:49.737537'
    - Calculates the error function of x.
    - 
  - - 394
    - Math#erfc(x) =>Float
    - 62
    - '2013-06-22 13:34:33.896524'
    - '2013-06-25 06:10:49.882420'
    - Calculates the complementary error function of x.
    - 
  - - 395
    - Math#exp(x) =>Float
    - 62
    - '2013-06-22 13:34:34.245468'
    - '2013-06-25 06:10:50.017952'
    - Returns e**x.
    - 
  - - 396
    - Math#frexp(x) =>[fraction, exponent]
    - 62
    - '2013-06-22 13:34:34.559392'
    - '2013-06-25 06:10:50.307364'
    - Returns a two-element array containing the normalized fraction (a Float) and
      exponent (a Fixnum) of x.
    - 
  - - 397
    - Math#gamma(x) =>Float
    - 62
    - '2013-06-22 13:34:34.862012'
    - '2013-06-25 06:10:50.475895'
    - Calculates the gamma function of x.
    - 
  - - 398
    - Math#hypot(x, y) =>Float
    - 62
    - '2013-06-22 13:34:35.197681'
    - '2013-06-25 06:10:50.643250'
    - ! 'Returns sqrt(x**2 + y**2), the hypotenuse of a right-angled triangle with

      sides x and y.'
    - 
  - - 399
    - Math#ldexp(fraction, exponent) =>float
    - 62
    - '2013-06-22 13:34:35.525072'
    - '2013-06-25 06:10:50.811120'
    - Returns the value of fraction*(2**exponent).
    - 
  - - 400
    - Math#lgamma(x) =>[float, -1 or 1]
    - 62
    - '2013-06-22 13:34:35.860952'
    - '2013-06-25 06:10:50.969863'
    - ! 'Calculates the logarithmic gamma of x and the sign of gamma of

      x.'
    - 
  - - 401
    - Math#log(x) =>Float
    - 62
    - '2013-06-22 13:34:36.197302'
    - '2013-06-25 06:10:51.115709'
    - 
    - 
  - - 402
    - Math#log(x, base) =>Float
    - 62
    - '2013-06-22 13:34:36.555564'
    - '2013-06-25 06:10:51.406142'
    - ! 'Returns the logarithm of x. If additional second argument is

      given, it will be the base of logarithm. Otherwise it is e

      (for the natural logarithm).'
    - 
  - - 403
    - Math#log10(x) =>Float
    - 62
    - '2013-06-22 13:34:36.871168'
    - '2013-06-25 06:10:51.552303'
    - Returns the base 10 logarithm of x.
    - 
  - - 404
    - Math#log2(x) =>Float
    - 62
    - '2013-06-22 13:34:37.207071'
    - '2013-06-25 06:10:51.697566'
    - Returns the base 2 logarithm of x.
    - 
  - - 405
    - Math#sin(x) =>Float
    - 62
    - '2013-06-22 13:34:37.543827'
    - '2013-06-25 06:10:51.864854'
    - Computes the sine of x (expressed in radians). Returns a Float in the range
      -1.0..1.0.
    - 
  - - 406
    - Math#sinh(x) =>Float
    - 62
    - '2013-06-22 13:34:37.846850'
    - '2013-06-25 06:10:52.177093'
    - Computes the hyperbolic sine of x (expressed in radians).
    - 
  - - 407
    - Math#sqrt(x) =>Float
    - 62
    - '2013-06-22 13:34:38.184496'
    - '2013-06-25 06:10:52.479746'
    - Returns the non-negative square root of x.
    - 
  - - 408
    - Math#tan(x) =>Float
    - 62
    - '2013-06-22 13:34:38.531748'
    - '2013-06-25 06:10:52.791251'
    - Computes the tangent of x (expressed in radians).
    - 
  - - 409
    - Math#tanh(x) =>Float
    - 62
    - '2013-06-22 13:34:38.834316'
    - '2013-06-25 06:10:52.938822'
    - Computes the hyperbolic tangent of x (expressed in radians).
    - 
  - - 410
    - Fiber#current() =>fiber
    - 31
    - '2013-06-22 13:34:52.729022'
    - '2013-06-25 06:10:53.217846'
    - ! 'Returns the current fiber. You need to require ''fiber'' before

      using this method. If you are not running in the context of a fiber this

      method will return the root fiber.'
    - 
  - - 411
    - Fiber#yield(args, ...) =>obj
    - 31
    - '2013-06-22 13:34:53.038028'
    - '2013-06-25 06:10:53.507902'
    - ! 'Yields control back to the context that resumed the fiber, passing along

      any arguments that were passed to it. The fiber will resume processing at

      this point when resume is called next. Any arguments passed to

      the next resume will be the value that this

      Fiber.yield expression evaluates to.'
    - 
  - - 412
    - Fiber#alive? =>true or false
    - 31
    - '2013-06-22 13:34:53.362583'
    - '2013-06-25 06:10:53.820878'
    - ! 'Returns true if the fiber can still be resumed (or transferred to). After

      finishing execution of the fiber block this method will always return

      false. You need to require ''fiber'' before using this method.'
    - 
  - - 413
    - Fiber#resume(args, ...) =>obj
    - 31
    - '2013-06-22 13:34:53.700753'
    - '2013-06-25 06:10:54.133100'
    - ! 'Resumes the fiber from the point at which the last Fiber.yield

      was called, or starts running it if it is the first call to

      resume. Arguments passed to resume will be the value of the

      Fiber.yield expression or will be passed as block parameters

      to the fiber’s block if this is the first resume.'
    - 
  - - 414
    - Fiber#transfer(args, ...) =>obj
    - 31
    - '2013-06-22 13:34:54.036418'
    - '2013-06-25 06:10:54.456192'
    - ! 'Transfer control to another fiber, resuming it from where it last stopped

      or starting it if it was not resumed before. The calling fiber will be

      suspended much like in a call to Fiber.yield. You need to

      require ''fiber'' before using this method.'
    - 
  - - 415
    - Dir#Dir[ array ] =>array
    - 13
    - '2013-06-22 13:35:03.412232'
    - '2013-06-25 06:10:54.768872'
    - 
    - 
  - - 416
    - Dir#Dir[ string [, string ...] ] =>array
    - 13
    - '2013-06-22 13:35:03.783042'
    - '2013-06-25 06:10:55.081639'
    - ! 'Equivalent to calling Dir.glob(array,0)

      and Dir.glob([string,...],0).'
    - 
  - - 417
    - Dir#chdir( [ string] ) =>0
    - 13
    - '2013-06-22 13:35:04.107940'
    - '2013-06-25 06:10:55.371321'
    - 
    - 
  - - 418
    - Dir#chdir( [ string] ) {| path | block } =>anObject
    - 13
    - '2013-06-22 13:35:04.443842'
    - '2013-06-25 06:10:55.507828'
    - ! 'Changes the current working directory of the process to the given string.

      When called without an argument, changes the directory to the value of the

      environment variable HOME, or LOGDIR.

      SystemCallError (probably Errno::ENOENT) if the

      target directory does not exist.'
    - 
  - - 419
    - Dir#chroot( string ) =>0
    - 13
    - '2013-06-22 13:35:05.071729'
    - '2013-06-25 06:10:55.686609'
    - ! 'Changes this process’s idea of the file system root. Only a privileged

      process may make this call. Not available on all platforms. On Unix

      systems, see chroot(2) for more information.'
    - 
  - - 420
    - Dir#delete( string ) =>0
    - 13
    - '2013-06-22 13:35:05.497269'
    - '2013-06-25 06:10:55.855292'
    - ! 'Deletes the named directory. Raises a subclass of

      SystemCallError if the directory isn’t empty.'
    - 
  - - 421
    - Dir#entries( dirname ) =>array
    - 13
    - '2013-06-22 13:35:05.799740'
    - '2013-06-25 06:10:56.022977'
    - ! 'Returns an array containing all of the filenames in the given directory.

      Will raise a SystemCallError if the named directory doesn’t

      exist.'
    - 
  - - 422
    - Dir#exist?(file_name) =>true or false
    - 13
    - '2013-06-22 13:35:06.146860'
    - '2013-06-25 06:10:56.212542'
    - ! 'Returns true if the named file is a directory,

      false otherwise.'
    - 
  - - 423
    - Dir#exists?(file_name) =>true or false
    - 13
    - '2013-06-22 13:35:06.451838'
    - '2013-06-25 06:10:56.394581'
    - ! 'Returns true if the named file is a directory,

      false otherwise.'
    - 
  - - 424
    - Dir#foreach( dirname ) {| filename | block } =>nil
    - 13
    - '2013-06-22 13:35:06.754398'
    - '2013-06-25 06:10:56.559482'
    - 
    - 
  - - 425
    - Dir#foreach( dirname ) =>an_enumerator
    - 13
    - '2013-06-22 13:35:07.068284'
    - '2013-06-25 06:10:56.716610'
    - ! 'Calls the block once for each entry in the named directory, passing the

      filename of each entry as a parameter to the block.'
    - 
  - - 426
    - Dir#getwd =>string
    - 13
    - '2013-06-22 13:35:07.414957'
    - '2013-06-25 06:10:56.862505'
    - ! 'Returns the path to the current working directory of this process as a

      string.'
    - 
  - - 427
    - Dir#glob( pattern, [flags] ) =>array
    - 13
    - '2013-06-22 13:35:07.741892'
    - '2013-06-25 06:10:57.021165'
    - 
    - 
  - - 428
    - Dir#glob( pattern, [flags] ) {| filename | block } =>nil
    - 13
    - '2013-06-22 13:35:08.066989'
    - '2013-06-25 06:10:57.188041'
    - ! 'Returns the filenames found by expanding pattern which is an

      Array of the patterns or the pattern String,

      either as an array or as parameters to the block. Note that this

      pattern is not a regexp (it’s closer to a shell glob). See

      File::fnmatch for the meaning of the flags parameter.

      Note that case sensitivity depends on your system (so

      File::FNM_CASEFOLD is ignored), as does the order in which the

      results are returned.'
    - 
  - - 429
    - Dir#home() =>"/home/me"
    - 13
    - '2013-06-22 13:35:08.436035'
    - '2013-06-25 06:10:57.389752'
    - 
    - 
  - - 430
    - Dir#home("root") =>"/root"
    - 13
    - '2013-06-22 13:35:08.783622'
    - '2013-06-25 06:10:57.625479'
    - Returns the home directory of the current user or the named user if given.
    - 
  - - 431
    - Dir#mkdir( string [, integer] ) =>0
    - 13
    - '2013-06-22 13:35:09.102023'
    - '2013-06-25 06:10:57.792851'
    - ! 'Makes a new directory named by string, with permissions specified

      by the optional parameter anInteger. The permissions may be

      modified by the value of File::umask, and are ignored on NT.

      Raises a SystemCallError if the directory cannot be created.

      See also the discussion of permissions in the class documentation for

      File.'
    - 
  - - 432
    - Dir#new( string ) =>aDir
    - 13
    - '2013-06-22 13:35:09.483117'
    - '2013-06-25 06:10:57.949948'
    - Returns a new directory object for the named directory.
    - 
  - - 433
    - Dir#open( string ) =>aDir
    - 13
    - '2013-06-22 13:35:09.818862'
    - '2013-06-25 06:10:58.094777'
    - 
    - 
  - - 434
    - Dir#open( string ) {| aDir | block } =>anObject
    - 13
    - '2013-06-22 13:35:10.120856'
    - '2013-06-25 06:10:58.240706'
    - ! 'With no block, open is a synonym for Dir::new. If

      a block is present, it is passed aDir as a parameter. The

      directory is closed at the end of the block, and Dir::open

      returns the value of the block.'
    - 
  - - 435
    - Dir#pwd =>string
    - 13
    - '2013-06-22 13:35:10.434743'
    - '2013-06-25 06:10:58.386846'
    - ! 'Returns the path to the current working directory of this process as a

      string.'
    - 
  - - 436
    - Dir#rmdir( string ) =>0
    - 13
    - '2013-06-22 13:35:10.783219'
    - '2013-06-25 06:10:58.557043'
    - ! 'Deletes the named directory. Raises a subclass of

      SystemCallError if the directory isn’t empty.'
    - 
  - - 437
    - Dir#unlink( string ) =>0
    - 13
    - '2013-06-22 13:35:11.097612'
    - '2013-06-25 06:10:58.748390'
    - ! 'Deletes the named directory. Raises a subclass of

      SystemCallError if the directory isn’t empty.'
    - 
  - - 438
    - Dir#close =>nil
    - 13
    - '2013-06-22 13:35:11.522056'
    - '2013-06-25 06:10:58.914463'
    - ! 'Closes the directory stream. Any further attempts to access dir

      will raise an IOError.'
    - 
  - - 439
    - Dir#each { |filename| block } =>dir
    - 13
    - '2013-06-22 13:35:11.836170'
    - '2013-06-25 06:10:59.082325'
    - 
    - 
  - - 440
    - Dir#each =>an_enumerator
    - 13
    - '2013-06-22 13:35:12.173455'
    - '2013-06-25 06:10:59.238899'
    - ! 'Calls the block once for each entry in this directory, passing the filename

      of each entry as a parameter to the block.'
    - 
  - - 441
    - Dir#inspect =>string
    - 13
    - '2013-06-22 13:35:12.532913'
    - '2013-06-25 06:10:59.384641'
    - Return a string describing this Dir object.
    - 
  - - 442
    - Dir#path =>string or nil
    - 13
    - '2013-06-22 13:35:12.935018'
    - '2013-06-25 06:10:59.530343'
    - Returns the path parameter passed to dir’s constructor.
    - 
  - - 443
    - Dir#pos =>integer
    - 13
    - '2013-06-22 13:35:13.248559'
    - '2013-06-25 06:10:59.698891'
    - ! 'Returns the current position in dir. See also

      Dir#seek.'
    - 
  - - 444
    - Dir#pos = integer =>integer
    - 13
    - '2013-06-22 13:35:13.575269'
    - '2013-06-25 06:11:00.010765'
    - Synonym for Dir#seek, but returns the position parameter.
    - 
  - - 445
    - Dir#read =>string or nil
    - 13
    - '2013-06-22 13:35:13.922108'
    - '2013-06-25 06:11:00.180679'
    - ! 'Reads the next entry from dir and returns it as a string. Returns

      nil at the end of the stream.'
    - 
  - - 446
    - Dir#rewind =>dir
    - 13
    - '2013-06-22 13:35:14.224791'
    - '2013-06-25 06:11:00.348699'
    - Repositions dir to the first entry.
    - 
  - - 447
    - Dir#seek( integer ) =>dir
    - 13
    - '2013-06-22 13:35:14.639132'
    - '2013-06-25 06:11:00.516005'
    - ! 'Seeks to a particular location in dir. integer must be a

      value returned by Dir#tell.'
    - 
  - - 448
    - Dir#tell =>integer
    - 13
    - '2013-06-22 13:35:15.089100'
    - '2013-06-25 06:11:00.650835'
    - ! 'Returns the current position in dir. See also

      Dir#seek.'
    - 
  - - 449
    - Dir#to_path =>string or nil
    - 13
    - '2013-06-22 13:35:15.402623'
    - '2013-06-25 06:11:00.785358'
    - Returns the path parameter passed to dir’s constructor.
    - 
  - - 450
    - Enumerator#new(size = nil) { |yielder| ... }
    - 24
    - '2013-06-22 13:35:44.982622'
    - '2013-06-23 06:50:16.371116'
    - 
    - 
  - - 451
    - Enumerator#new(obj, method = :each, *args)
    - 24
    - '2013-06-22 13:35:45.372325'
    - '2013-06-25 03:37:32.181449'
    - ! 'Creates a new Enumerator object, which can be

      used as an Enumerable.'
    - 
  - - 452
    - Enumerator#each {...}
    - 24
    - '2013-06-22 13:35:45.697432'
    - '2013-06-25 03:37:32.363615'
    - ! 'Iterates over the block according to how this Enumerable was constructed.
      If no block is

      given, returns self.'
    - 
  - - 453
    - Enumerator#each_with_index {|(*args), idx| ... }
    - 24
    - '2013-06-22 13:35:46.055580'
    - '2013-06-23 06:50:17.296905'
    - 
    - 
  - - 454
    - Enumerator#each_with_index
    - 24
    - '2013-06-22 13:35:46.491676'
    - '2013-06-25 03:37:32.531891'
    - ! 'Same as #with_index, i.e.

      there is no starting offset.'
    - 
  - - 455
    - Enumerator#each_with_object(obj) {|(*args), obj| ... }
    - 24
    - '2013-06-22 13:35:46.819814'
    - '2013-06-23 06:50:17.922638'
    - 
    - 
  - - 456
    - Enumerator#each_with_object(obj)
    - 24
    - '2013-06-22 13:35:47.131616'
    - '2013-06-25 03:37:32.688278'
    - ! 'Iterates the given block for each element with an arbitrary object,

      obj, and returns obj'
    - 
  - - 457
    - Enumerator#feed obj =>nil
    - 24
    - '2013-06-22 13:35:47.637529'
    - '2013-06-25 06:11:01.076414'
    - Sets the value to be returned by the next yield inside e.
    - 
  - - 458
    - Enumerator#inspect =>string
    - 24
    - '2013-06-22 13:35:48.093684'
    - '2013-06-25 06:11:01.232216'
    - Creates a printable version of e.
    - 
  - - 459
    - Enumerator#next =>object
    - 24
    - '2013-06-22 13:35:48.387304'
    - '2013-06-25 06:11:01.411430'
    - ! 'Returns the next object in the enumerator, and move the internal position

      forward.  When the position reached at the end, StopIteration is raised.'
    - 
  - - 460
    - Enumerator#next_values =>array
    - 24
    - '2013-06-22 13:35:48.722813'
    - '2013-06-25 06:11:01.579014'
    - ! 'Returns the next object as an array in the enumerator, and move the

      internal position forward.  When the position reached at the end, StopIteration
      is raised.'
    - 
  - - 461
    - Enumerator#peek =>object
    - 24
    - '2013-06-22 13:35:49.070302'
    - '2013-06-25 06:11:01.738229'
    - ! 'Returns the next object in the enumerator, but doesn’t move the internal

      position forward.  If the position is already at the end, StopIteration is raised.'
    - 
  - - 462
    - Enumerator#peek_values =>array
    - 24
    - '2013-06-22 13:35:49.372731'
    - '2013-06-25 06:11:01.884713'
    - ! 'Returns the next object as an array, similar to #next_values, but doesn’t

      move the internal position forward.  If the position is already at the end,

      StopIteration is raised.'
    - 
  - - 463
    - Enumerator#rewind =>e
    - 24
    - '2013-06-22 13:35:49.664381'
    - '2013-06-25 06:11:02.183151'
    - Rewinds the enumeration sequence to the beginning.
    - 
  - - 464
    - Enumerator#size =>int, Float::INFINITY or nil
    - 24
    - '2013-06-22 13:35:50.005245'
    - '2013-06-25 06:11:02.329002'
    - ! 'Returns the size of the enumerator, or nil if it can’t be

      calculated lazily.'
    - 
  - - 465
    - Enumerator#with_index(offset = 0) {|(*args), idx| ... }
    - 24
    - '2013-06-22 13:35:50.337452'
    - '2013-06-23 06:50:20.296400'
    - 
    - 
  - - 466
    - Enumerator#with_index(offset = 0)
    - 24
    - '2013-06-22 13:35:50.662553'
    - '2013-06-25 03:37:34.537650'
    - ! 'Iterates the given block for each element with an index, which starts from

      offset.  If no block is given, returns a new Enumerator that includes the index,
      starting

      from offset'
    - 
  - - 467
    - Enumerator#with_object(obj) {|(*args), obj| ... }
    - 24
    - '2013-06-22 13:35:50.953676'
    - '2013-06-23 06:50:20.607904'
    - 
    - 
  - - 468
    - Enumerator#with_object(obj)
    - 24
    - '2013-06-22 13:35:51.279924'
    - '2013-06-25 03:37:34.694225'
    - ! 'Iterates the given block for each element with an arbitrary object,

      obj, and returns obj'
    - 
  - - 469
    - Marshal#dump( obj [, anIO] , limit=-1 ) =>anIO
    - 60
    - '2013-06-22 13:36:21.860314'
    - '2013-06-25 06:11:02.462975'
    - ! 'Serializes obj and all descendant objects. If anIO is specified, the

      serialized data will be written to it, otherwise the data will be returned

      as a String. If limit is specified, the traversal

      of subobjects will be limited to that depth. If limit is negative, no

      checking of depth will be performed.'
    - 
  - - 470
    - Marshal#load( source [, proc] ) =>obj
    - 60
    - '2013-06-22 13:36:22.221377'
    - '2013-06-25 06:11:02.609180'
    - ! 'Returns the result of converting the serialized data in source into a Ruby

      object (possibly with associated subordinate objects). source may be either

      an instance of IO or an object that responds to

      to_str. If proc is specified, it will be passed each object as it is

      deserialized.'
    - 
  - - 471
    - Marshal#restore( source [, proc] ) =>obj
    - 60
    - '2013-06-22 13:36:22.512331'
    - '2013-06-25 06:11:02.767454'
    - ! 'Returns the result of converting the serialized data in source into a Ruby

      object (possibly with associated subordinate objects). source may be either

      an instance of IO or an object that responds to

      to_str. If proc is specified, it will be passed each object as it is

      deserialized.'
    - 
  - - 472
    - ENV#ENV[name] =>value
    - 14
    - '2013-06-22 13:36:31.277706'
    - '2013-06-25 06:11:02.935757'
    - ! 'Retrieves the value for environment variable name

      as a String.  Returns nil if the

      named variable does not exist.'
    - 
  - - 473
    - ENV#ENV[name] = value
    - 14
    - '2013-06-22 13:36:31.770043'
    - '2013-06-25 03:34:21.341406'
    - ! 'Sets the environment variable name to value.  If

      the value given is nil the environment variable is deleted.'
    - 
  - - 474
    - ENV#assoc(name) =>Array or nil
    - 14
    - '2013-06-22 13:36:32.139159'
    - '2013-06-25 06:11:03.103305'
    - ! 'Returns an Array of the name and value of the

      environment variable with name or nil if the name

      cannot be found.'
    - 
  - - 475
    - ENV#clear
    - 14
    - '2013-06-22 13:36:32.499017'
    - '2013-06-25 03:34:21.677541'
    - Removes every environment variable.
    - 
  - - 476
    - ENV#delete(name) =>value
    - 14
    - '2013-06-22 13:36:32.790415'
    - '2013-06-25 06:11:03.416199'
    - 
    - 
  - - 477
    - ENV#delete(name) { |name| } =>value
    - 14
    - '2013-06-22 13:36:33.359732'
    - '2013-06-25 06:11:03.573972'
    - ! 'Deletes the environment variable with name and returns the

      value of the variable.  If a block is given it will be called when the

      named environment does not exist.'
    - 
  - - 478
    - ENV#delete_if { |name, value| } =>Hash
    - 14
    - '2013-06-22 13:36:33.808487'
    - '2013-06-25 06:11:03.707217'
    - 
    - 
  - - 479
    - ENV#delete_if =>Enumerator
    - 14
    - '2013-06-22 13:36:34.416969'
    - '2013-06-25 06:11:03.842988'
    - ! 'Deletes every environment variable for which the block evaluates to

      true.'
    - 
  - - 480
    - ENV#each { |name, value| } =>Hash
    - 14
    - '2013-06-22 13:36:34.749247'
    - '2013-06-25 06:11:03.998617'
    - 
    - 
  - - 481
    - ENV#each =>Enumerator
    - 14
    - '2013-06-22 13:36:35.096105'
    - '2013-06-25 06:11:04.167080'
    - 
    - 
  - - 482
    - ENV#each_pair { |name, value| } =>Hash
    - 14
    - '2013-06-22 13:36:35.431768'
    - '2013-06-25 06:11:04.492402'
    - 
    - 
  - - 483
    - ENV#each_pair =>Enumerator
    - 14
    - '2013-06-22 13:36:35.747183'
    - '2013-06-25 06:11:04.661269'
    - Yields each environment variable name and value.
    - 
  - - 484
    - ENV#each_key { |name| } =>Hash
    - 14
    - '2013-06-22 13:36:36.061462'
    - '2013-06-25 06:11:04.817032'
    - 
    - 
  - - 485
    - ENV#each_key =>Enumerator
    - 14
    - '2013-06-22 13:36:36.408365'
    - '2013-06-25 06:11:04.963665'
    - Yields each environment variable name.
    - 
  - - 486
    - ENV#each_pair { |name, value| } =>Hash
    - 14
    - '2013-06-22 13:36:36.733809'
    - '2013-06-25 06:11:05.097164'
    - 
    - 
  - - 487
    - ENV#each_pair =>Enumerator
    - 14
    - '2013-06-22 13:36:37.038048'
    - '2013-06-25 06:11:05.243140'
    - 
    - 
  - - 488
    - ENV#each_value { |value| } =>Hash
    - 14
    - '2013-06-22 13:36:37.374387'
    - '2013-06-25 06:11:05.400925'
    - 
    - 
  - - 489
    - ENV#each_value =>Enumerator
    - 14
    - '2013-06-22 13:36:37.721471'
    - '2013-06-25 06:11:05.712959'
    - Yields each environment variable value.
    - 
  - - 490
    - ENV#empty? =>true or false
    - 14
    - '2013-06-22 13:36:38.023853'
    - '2013-06-25 06:11:05.880184'
    - Returns true when there are no environment variables
    - 
  - - 491
    - ENV#fetch(name) =>value
    - 14
    - '2013-06-22 13:36:38.304277'
    - '2013-06-25 06:11:06.039454'
    - 
    - 
  - - 492
    - ENV#fetch(name, default) =>value
    - 14
    - '2013-06-22 13:36:38.642268'
    - '2013-06-25 06:11:06.196055'
    - 
    - 
  - - 493
    - ENV#fetch(name) { |missing_name| ... } =>value
    - 14
    - '2013-06-22 13:36:38.977187'
    - '2013-06-25 06:11:06.330402'
    - Retrieves the environment variable name.
    - 
  - - 494
    - ENV#has_key?(name) =>true or false
    - 14
    - '2013-06-22 13:36:39.324886'
    - '2013-06-25 06:11:06.476740'
    - ! 'Returns true if there is an environment variable with the

      given name.'
    - 
  - - 495
    - ENV#has_value?(value) =>true or false
    - 14
    - '2013-06-22 13:36:39.604793'
    - '2013-06-25 06:11:06.777112'
    - ! 'Returns true if there is an environment variable with the

      given value.'
    - 
  - - 496
    - ENV#include?(name) =>true or false
    - 14
    - '2013-06-22 13:36:39.931337'
    - '2013-06-25 06:11:06.933901'
    - ! 'Returns true if there is an environment variable with the

      given name.'
    - 
  - - 497
    - ENV#index(value) =>key
    - 14
    - '2013-06-22 13:36:40.267473'
    - '2013-06-25 06:11:07.101781'
    - Deprecated method that is equivalent to ::key
    - 
  - - 498
    - ENV#inspect =>string
    - 14
    - '2013-06-22 13:36:40.558472'
    - '2013-06-25 06:11:07.269778'
    - Returns the contents of the environment as a String.
    - 
  - - 499
    - ENV#invert =>Hash
    - 14
    - '2013-06-22 13:36:40.839048'
    - '2013-06-25 06:11:07.426972'
    - ! 'Returns a new hash created by using environment variable names as values

      and values as names.'
    - 
  - - 500
    - ENV#keep_if { |name, value| } =>Hash
    - 14
    - '2013-06-22 13:36:41.174433'
    - '2013-06-25 06:11:07.574307'
    - 
    - 
  - - 501
    - ENV#keep_if =>Enumerator
    - 14
    - '2013-06-22 13:36:41.512069'
    - '2013-06-25 06:11:07.708431'
    - ! 'Deletes every environment variable where the block evaluates to

      false.'
    - 
  - - 502
    - ENV#key(value) =>name
    - 14
    - '2013-06-22 13:36:41.837380'
    - '2013-06-25 06:11:07.999180'
    - ! 'Returns the name of the environment variable with value.  If

      the value is not found nil is returned.'
    - 
  - - 503
    - ENV#key?(name) =>true or false
    - 14
    - '2013-06-22 13:36:42.128214'
    - '2013-06-25 06:11:08.155810'
    - ! 'Returns true if there is an environment variable with the

      given name.'
    - 
  - - 504
    - ENV#keys =>Array
    - 14
    - '2013-06-22 13:36:42.475133'
    - '2013-06-25 06:11:08.323954'
    - Returns every environment variable name in an Array
    - 
  - - 505
    - ENV#length
    - 14
    - '2013-06-22 13:36:42.801634'
    - '2013-06-25 03:34:24.597017'
    - Returns the number of environment variables.
    - 
  - - 506
    - ENV#member?(name) =>true or false
    - 14
    - '2013-06-22 13:36:43.093413'
    - '2013-06-25 06:11:08.491581'
    - ! 'Returns true if there is an environment variable with the

      given name.'
    - 
  - - 507
    - ENV#rassoc(value)
    - 14
    - '2013-06-22 13:36:43.507005'
    - '2013-06-25 03:34:24.900191'
    - ! 'Returns an Array of the name and value of the

      environment variable with value or nil if the

      value cannot be found.'
    - 
  - - 508
    - ENV#rehash
    - 14
    - '2013-06-22 13:36:43.843415'
    - '2013-06-25 03:34:25.056376'
    - ! 'Re-hashing the environment variables does nothing.  It is provided for

      compatibility with Hash.'
    - 
  - - 509
    - ENV#reject { |name, value| } =>Hash
    - 14
    - '2013-06-22 13:36:44.179252'
    - '2013-06-25 06:11:08.659211'
    - 
    - 
  - - 510
    - ENV#reject =>Enumerator
    - 14
    - '2013-06-22 13:36:44.473086'
    - '2013-06-25 06:11:08.806213'
    - ! 'Same as ENV#delete_if, but works on (and returns) a copy of the

      environment.'
    - 
  - - 511
    - ENV#reject! { |name, value| } =>ENV or nil
    - 14
    - '2013-06-22 13:36:44.808130'
    - '2013-06-25 06:11:09.097790'
    - 
    - 
  - - 512
    - ENV#reject! =>Enumerator
    - 14
    - '2013-06-22 13:36:45.155635'
    - '2013-06-25 06:11:09.243284'
    - ! 'Equivalent to ENV#delete_if but returns nil if no changes were

      made.'
    - 
  - - 513
    - ENV#replace(hash) =>env
    - 14
    - '2013-06-22 13:36:45.490802'
    - '2013-06-25 06:11:09.388996'
    - ! 'Replaces the contents of the environment variables with the contents of

      hash.'
    - 
  - - 514
    - ENV#select { |name, value| } =>Hash
    - 14
    - '2013-06-22 13:36:45.784436'
    - '2013-06-25 06:11:09.545412'
    - 
    - 
  - - 515
    - ENV#select =>Enumerator
    - 14
    - '2013-06-22 13:36:46.113302'
    - '2013-06-25 06:11:09.713760'
    - Returns a copy of the environment for entries where the block returns true.
    - 
  - - 516
    - ENV#select! { |name, value| } =>ENV or nil
    - 14
    - '2013-06-22 13:36:46.445341'
    - '2013-06-25 06:11:09.871397'
    - 
    - 
  - - 517
    - ENV#select! =>Enumerator
    - 14
    - '2013-06-22 13:36:46.769833'
    - '2013-06-25 06:11:10.194366'
    - ! 'Equivalent to ENV#keep_if but returns nil if no changes were

      made.'
    - 
  - - 518
    - ENV#shift =>Array or nil
    - 14
    - '2013-06-22 13:36:47.219116'
    - '2013-06-25 06:11:10.350839'
    - ! 'Removes an environment variable name-value pair from ENV and returns it as
      an Array.  Returns nil if when the

      environment is empty.'
    - 
  - - 519
    - ENV#size
    - 14
    - '2013-06-22 13:36:47.555582'
    - '2013-06-25 03:34:26.234250'
    - Returns the number of environment variables.
    - 
  - - 520
    - ENV#store(name, value) =>value
    - 14
    - '2013-06-22 13:36:47.890852'
    - '2013-06-25 06:11:10.507188'
    - ! 'Sets the environment variable name to value.  If

      the value given is nil the environment variable is deleted.'
    - 
  - - 521
    - ENV#to_a =>Array
    - 14
    - '2013-06-22 13:36:48.326682'
    - '2013-06-25 06:11:10.644798'
    - Converts the environment variables into an array of names and value arrays.
    - 
  - - 522
    - ENV#to_hash =>hash
    - 14
    - '2013-06-22 13:36:48.653986'
    - '2013-06-25 06:11:10.801182'
    - Creates a hash with a copy of the environment variables.
    - 
  - - 523
    - ENV#to_h =>hash
    - 14
    - '2013-06-22 13:36:48.990560'
    - '2013-06-25 06:11:10.968645'
    - Creates a hash with a copy of the environment variables.
    - 
  - - 524
    - ENV#to_hash =>hash
    - 14
    - '2013-06-22 13:36:49.448727'
    - '2013-06-25 06:11:11.136390'
    - 
    - 
  - - 525
    - ENV#to_s =>"ENV"
    - 14
    - '2013-06-22 13:36:49.740076'
    - '2013-06-25 06:11:11.460089'
    - Returns “ENV”
    - 
  - - 526
    - ENV#update(hash) =>Hash
    - 14
    - '2013-06-22 13:36:50.053787'
    - '2013-06-25 06:11:11.618658'
    - 
    - 
  - - 527
    - ENV#update(hash) { |name, old_value, new_value| } =>Hash
    - 14
    - '2013-06-22 13:36:50.547255'
    - '2013-06-25 06:11:11.751515'
    - ! 'Adds the contents of hash to the environment variables.  If no

      block is specified entries with duplicate keys are overwritten, otherwise

      the value of each duplicate name is determined by calling the block with

      the key, its value from the environment and its value from the hash.'
    - 
  - - 528
    - ENV#value?(value) =>true or false
    - 14
    - '2013-06-22 13:36:50.838438'
    - '2013-06-25 06:11:11.908924'
    - ! 'Returns true if there is an environment variable with the

      given value.'
    - 
  - - 529
    - ENV#values =>Array
    - 14
    - '2013-06-22 13:36:51.152424'
    - '2013-06-25 06:11:12.053582'
    - Returns every environment variable value as an Array
    - 
  - - 530
    - ENV#values_at(name, ...) =>Array
    - 14
    - '2013-06-22 13:36:51.745123'
    - '2013-06-25 06:11:12.190344'
    - ! 'Returns an array containing the environment variable values associated with

      the given names.  See also ::select.'
    - 
  - - 531
    - Encoding#aliases =>{"alias1" => "orig1", "alias2" => "orig2", ...}
    - 16
    - '2013-06-22 13:37:27.512835'
    - '2013-06-25 06:11:12.491690'
    - Returns the hash of available encoding alias and original encoding name.
    - 
  - - 532
    - Encoding#compatible?(obj1, obj2) =>enc or nil
    - 16
    - '2013-06-22 13:37:27.853047'
    - '2013-06-25 06:11:12.660329'
    - Checks the compatibility of two objects.
    - 
  - - 533
    - Encoding#default_external =>enc
    - 16
    - '2013-06-22 13:37:28.155723'
    - '2013-06-25 06:11:12.826844'
    - Returns default external encoding.
    - 
  - - 534
    - Encoding#default_external = enc
    - 16
    - '2013-06-22 13:37:28.536095'
    - '2013-06-25 03:36:48.230788'
    - ! 'Sets default external encoding.  You should not set ::default_external in

      ruby code as strings created before changing the value may have a different

      encoding from strings created after the value was changed., instead you

      should use ruby -E to invoke ruby with the correct

      default_external.'
    - 
  - - 535
    - Encoding#default_internal =>enc
    - 16
    - '2013-06-22 13:37:28.871889'
    - '2013-06-25 06:11:12.984319'
    - ! 'Returns default internal encoding.  Strings will be transcoded to the

      default internal encoding in the following places if the default internal

      encoding is not nil:'
    - 
  - - 536
    - Encoding#default_internal = enc or nil
    - 16
    - '2013-06-22 13:37:29.199063'
    - '2013-06-25 03:36:48.544202'
    - ! 'Sets default internal encoding or removes default internal encoding when

      passed nil.  You should not set ::default_internal in

      ruby code as strings created before changing the value may have a different

      encoding from strings created after the change.  Instead you should use

      ruby -E to invoke ruby with the correct default_internal.'
    - 
  - - 537
    - Encoding#find(string) =>enc
    - 16
    - '2013-06-22 13:37:29.523213'
    - '2013-06-25 06:11:13.141114'
    - 
    - 
  - - 538
    - Encoding#find(symbol) =>enc
    - 16
    - '2013-06-22 13:37:29.847610'
    - '2013-06-25 06:11:13.297543'
    - ! 'Search the encoding with specified name. name should be a

      string or symbol.'
    - 
  - - 539
    - Encoding#list =>[enc1, enc2, ...]
    - 16
    - '2013-06-22 13:37:30.183947'
    - '2013-06-25 06:11:13.598694'
    - Returns the list of loaded encodings.
    - 
  - - 540
    - Encoding#locale_charmap =>string
    - 16
    - '2013-06-22 13:37:30.475186'
    - '2013-06-25 06:11:13.744890'
    - ! 'Returns the locale charmap name. It returns nil if no appropriate

      information.'
    - 
  - - 541
    - Encoding#name_list =>["enc1", "enc2", ...]
    - 16
    - '2013-06-22 13:37:30.791252'
    - '2013-06-25 06:11:13.901507'
    - Returns the list of available encoding names.
    - 
  - - 542
    - Encoding#ascii_compatible? =>true or false
    - 16
    - '2013-06-22 13:37:31.217481'
    - '2013-06-25 06:11:14.071378'
    - Returns whether ASCII-compatible or not.
    - 
  - - 543
    - Encoding#dummy? =>true or false
    - 16
    - '2013-06-22 13:37:31.574590'
    - '2013-06-25 06:11:14.238861'
    - ! 'Returns true for dummy encodings. A dummy encoding is an encoding for which

      character handling is not properly implemented. It is used for stateful

      encodings.'
    - 
  - - 544
    - Encoding#inspect =>string
    - 16
    - '2013-06-22 13:37:31.881193'
    - '2013-06-25 06:11:14.407383'
    - Returns a string which represents the encoding for programmers.
    - 
  - - 545
    - Encoding#name =>string
    - 16
    - '2013-06-22 13:37:32.204677'
    - '2013-06-25 06:11:14.541414'
    - Returns the name of the encoding.
    - 
  - - 546
    - Encoding#names =>array
    - 16
    - '2013-06-22 13:37:32.539791'
    - '2013-06-25 06:11:14.831827'
    - Returns the list of name and aliases of the encoding.
    - 
  - - 547
    - Encoding#replicate(name) =>encoding
    - 16
    - '2013-06-22 13:37:32.864626'
    - '2013-06-25 06:11:14.977265'
    - ! 'Returns a replicated encoding of enc whose name is name.

      The new encoding should have the same byte structure of enc. If

      name is used by another encoding, raise ArgumentError.'
    - 
  - - 548
    - Encoding#to_s =>string
    - 16
    - '2013-06-22 13:37:33.167191'
    - '2013-06-25 06:11:15.122890'
    - Returns the name of the encoding.
    - 
  - - 549
    - Complex#polar(abs[, arg]) =>complex
    - 9
    - '2013-06-22 13:37:43.302394'
    - '2013-06-25 06:11:15.268622'
    - Returns a complex object which denotes the given polar form.
    - 
  - - 550
    - Complex#rect(real[, imag]) =>complex
    - 9
    - '2013-06-22 13:37:43.996732'
    - '2013-06-25 06:11:15.425386'
    - 
    - 
  - - 551
    - Complex#rectangular(real[, imag]) =>complex
    - 9
    - '2013-06-22 13:37:44.451925'
    - '2013-06-25 06:11:15.594658'
    - Returns a complex object which denotes the given rectangular form.
    - 
  - - 552
    - Complex#rectangular(real[, imag]) =>complex
    - 9
    - '2013-06-22 13:37:44.788387'
    - '2013-06-25 06:11:15.896655'
    - 
    - 
  - - 553
    - Complex#cmp * numeric =>complex
    - 9
    - '2013-06-22 13:37:45.135596'
    - '2013-06-25 06:11:16.053187'
    - Performs multiplication.
    - 
  - - 554
    - Complex#cmp ** numeric =>complex
    - 9
    - '2013-06-22 13:37:45.438033'
    - '2013-06-25 06:11:16.199556'
    - Performs exponentiation.
    - 
  - - 555
    - Complex#cmp + numeric =>complex
    - 9
    - '2013-06-22 13:37:45.776094'
    - '2013-06-25 06:11:16.461719'
    - Performs addition.
    - 
  - - 556
    - Complex#cmp - numeric =>complex
    - 9
    - '2013-06-22 13:37:46.111935'
    - '2013-06-25 06:11:16.624290'
    - Performs subtraction.
    - 
  - - 557
    - Complex#-cmp =>complex
    - 9
    - '2013-06-22 13:37:46.414093'
    - '2013-06-25 06:11:16.780034'
    - Returns negation of the value.
    - 
  - - 558
    - Complex#cmp / numeric =>complex
    - 9
    - '2013-06-22 13:37:46.728006'
    - '2013-06-25 06:11:16.960513'
    - 
    - 
  - - 559
    - Complex#quo(numeric) =>complex
    - 9
    - '2013-06-22 13:37:47.054654'
    - '2013-06-25 06:11:17.260448'
    - Performs division.
    - 
  - - 560
    - Complex#cmp == object =>true or false
    - 9
    - '2013-06-22 13:37:47.379725'
    - '2013-06-25 06:11:17.574619'
    - Returns true if cmp equals object numerically.
    - 
  - - 561
    - Complex#abs =>real
    - 9
    - '2013-06-22 13:37:47.671021'
    - '2013-06-25 06:11:17.731368'
    - Returns the absolute part of its polar form.
    - 
  - - 562
    - Complex#abs2 =>real
    - 9
    - '2013-06-22 13:37:47.984008'
    - '2013-06-25 06:11:18.033517'
    - Returns square of the absolute value.
    - 
  - - 563
    - Complex#angle =>float
    - 9
    - '2013-06-22 13:37:48.309257'
    - '2013-06-25 06:11:18.334080'
    - Returns the angle part of its polar form.
    - 
  - - 564
    - Complex#arg =>float
    - 9
    - '2013-06-22 13:37:48.624329'
    - '2013-06-25 06:11:18.512926'
    - Returns the angle part of its polar form.
    - 
  - - 565
    - Complex#conj =>complex
    - 9
    - '2013-06-22 13:37:48.915847'
    - '2013-06-25 06:11:18.670385'
    - 
    - 
  - - 566
    - Complex#conjugate =>complex
    - 9
    - '2013-06-22 13:37:49.240523'
    - '2013-06-25 06:11:18.970763'
    - Returns the complex conjugate.
    - 
  - - 567
    - Complex#conjugate =>complex
    - 9
    - '2013-06-22 13:37:49.565361'
    - '2013-06-25 06:11:19.282985'
    - 
    - 
  - - 568
    - Complex#denominator =>integer
    - 9
    - '2013-06-22 13:37:49.880973'
    - '2013-06-25 06:11:19.574123'
    - Returns the denominator (lcm of both denominator - real and imag).
    - 
  - - 569
    - Complex#fdiv(numeric) =>complex
    - 9
    - '2013-06-22 13:37:50.206560'
    - '2013-06-25 06:11:19.866201'
    - Performs division as each part is a float, never returns a float.
    - 
  - - 570
    - Complex#imag =>real
    - 9
    - '2013-06-22 13:37:50.519472'
    - '2013-06-25 06:11:20.177843'
    - 
    - 
  - - 571
    - Complex#imaginary =>real
    - 9
    - '2013-06-22 13:37:50.854904'
    - '2013-06-25 06:11:20.323403'
    - Returns the imaginary part.
    - 
  - - 572
    - Complex#imaginary =>real
    - 9
    - '2013-06-22 13:37:51.346372'
    - '2013-06-25 06:11:20.613438'
    - 
    - 
  - - 573
    - Complex#inspect =>string
    - 9
    - '2013-06-22 13:37:51.639962'
    - '2013-06-25 06:11:20.936865'
    - Returns the value as a string for inspection.
    - 
  - - 574
    - Complex#magnitude =>real
    - 9
    - '2013-06-22 13:37:52.020048'
    - '2013-06-25 06:11:21.249632'
    - Returns the absolute part of its polar form.
    - 
  - - 575
    - Complex#numerator =>numeric
    - 9
    - '2013-06-22 13:37:52.513346'
    - '2013-06-25 06:11:21.606601'
    - Returns the numerator.
    - 
  - - 576
    - Complex#phase =>float
    - 9
    - '2013-06-22 13:37:52.826554'
    - '2013-06-25 06:11:21.907573'
    - Returns the angle part of its polar form.
    - 
  - - 577
    - Complex#polar =>array
    - 9
    - '2013-06-22 13:37:53.118655'
    - '2013-06-25 06:11:22.187580'
    - Returns an array; [cmp.abs, cmp.arg].
    - 
  - - 578
    - Complex#cmp / numeric =>complex
    - 9
    - '2013-06-22 13:37:53.421286'
    - '2013-06-25 06:11:22.490062'
    - 
    - 
  - - 579
    - Complex#quo(numeric) =>complex
    - 9
    - '2013-06-22 13:37:53.901573'
    - '2013-06-25 06:11:22.780087'
    - 
    - 
  - - 580
    - Complex#rationalize([eps]) =>rational
    - 9
    - '2013-06-22 13:37:54.205717'
    - '2013-06-25 06:11:23.081226'
    - ! 'Returns the value as a rational if possible (the imaginary part should be

      exactly zero).'
    - 
  - - 581
    - Complex#real =>real
    - 9
    - '2013-06-22 13:37:54.498469'
    - '2013-06-25 06:11:23.426465'
    - Returns the real part.
    - 
  - - 582
    - Complex#real? =>false
    - 9
    - '2013-06-22 13:37:54.821740'
    - '2013-06-25 06:11:23.706195'
    - Returns false.
    - 
  - - 583
    - Complex#rect =>array
    - 9
    - '2013-06-22 13:37:55.168611'
    - '2013-06-25 06:11:23.885371'
    - 
    - 
  - - 584
    - Complex#rectangular =>array
    - 9
    - '2013-06-22 13:37:55.472876'
    - '2013-06-25 06:11:24.197176'
    - Returns an array; [cmp.real, cmp.imag].
    - 
  - - 585
    - Complex#rect =>array
    - 9
    - '2013-06-22 13:37:55.764551'
    - '2013-06-25 06:11:24.353824'
    - 
    - 
  - - 586
    - Complex#rectangular =>array
    - 9
    - '2013-06-22 13:37:56.089280'
    - '2013-06-25 06:11:24.667132'
    - 
    - 
  - - 587
    - Complex#to_c =>self
    - 9
    - '2013-06-22 13:37:56.441492'
    - '2013-06-25 06:11:24.981504'
    - Returns self.
    - 
  - - 588
    - Complex#to_f =>float
    - 9
    - '2013-06-22 13:37:56.749290'
    - '2013-06-25 06:11:25.292668'
    - ! 'Returns the value as a float if possible (the imaginary part should be

      exactly zero).'
    - 
  - - 589
    - Complex#to_i =>integer
    - 9
    - '2013-06-22 13:37:57.031877'
    - '2013-06-25 06:11:25.605401'
    - ! 'Returns the value as an integer if possible (the imaginary part should be

      exactly zero).'
    - 
  - - 590
    - Complex#to_r =>rational
    - 9
    - '2013-06-22 13:37:57.378579'
    - '2013-06-25 06:11:25.929333'
    - ! 'Returns the value as a rational if possible (the imaginary part should be

      exactly zero).'
    - 
  - - 591
    - Complex#to_s =>string
    - 9
    - '2013-06-22 13:37:57.748352'
    - '2013-06-25 06:11:26.085461'
    - Returns the value as a string.
    - 
  - - 592
    - IO#binread(name, [length [, offset]] ) =>string
    - 43
    - '2013-06-22 13:38:12.171080'
    - '2013-06-25 06:11:26.386827'
    - ! 'Opens the file, optionally seeks to the given offset, then returns

      length bytes (defaulting to the rest of the file).

      binread ensures the file is closed before returning. The open

      mode would be “rb:ASCII-8BIT”.'
    - 
  - - 593
    - IO#binwrite(name, string, [offset] ) => fixnum
    - 43
    - '2013-06-22 13:38:12.519134'
    - '2013-06-23 06:50:45.769048'
    - 
    - 
  - - 594
    - IO#binwrite(name, string, [offset], open_args ) => fixnum
    - 43
    - '2013-06-22 13:38:12.823647'
    - '2013-06-25 03:57:55.266883'
    - ! 'Same as IO.write except opening the file in binary mode and

      ASCII-8BIT encoding (“wb:ASCII-8BIT”).'
    - 
  - - 595
    - IO#copy_stream(src, dst)
    - 43
    - '2013-06-22 13:38:13.170823'
    - '2013-06-23 06:50:46.093597'
    - 
    - 
  - - 596
    - IO#copy_stream(src, dst, copy_length)
    - 43
    - '2013-06-22 13:38:13.540244'
    - '2013-06-23 06:50:46.238463'
    - 
    - 
  - - 597
    - IO#copy_stream(src, dst, copy_length, src_offset)
    - 43
    - '2013-06-22 13:38:13.922409'
    - '2013-06-25 03:57:55.423037'
    - ! '::copy_stream copies

      src to dst. src and dst is either a

      filename or an IO.'
    - 
  - - 598
    - IO#for_fd(fd, mode [, opt]) =>io
    - 43
    - '2013-06-22 13:38:14.234946'
    - '2013-06-25 06:11:26.666101'
    - Synonym for IO.new.
    - 
  - - 599
    - IO#foreach(name, sep=$/ [, open_args]) {|line| block } =>nil
    - 43
    - '2013-06-22 13:38:14.583686'
    - '2013-06-25 06:11:26.978234'
    - 
    - 
  - - 600
    - IO#foreach(name, limit [, open_args]) {|line| block } =>nil
    - 43
    - '2013-06-22 13:38:14.886446'
    - '2013-06-25 06:11:27.135019'
    - 
    - 
  - - 601
    - IO#foreach(name, sep, limit [, open_args]) {|line| block } =>nil
    - 43
    - '2013-06-22 13:38:15.199762'
    - '2013-06-25 06:11:27.449093'
    - 
    - 
  - - 602
    - IO#foreach(...) =>an_enumerator
    - 43
    - '2013-06-22 13:38:15.524578'
    - '2013-06-25 06:11:27.772944'
    - ! 'Executes the block for every line in the named I/O port, where lines are

      separated by sep.'
    - 
  - - 603
    - IO#new(fd [, mode] [, opt]) =>io
    - 43
    - '2013-06-22 13:38:15.851264'
    - '2013-06-25 06:11:27.951651'
    - ! "Returns a new IO object (a stream) for the given\ninteger file descriptor
      fd and mode string. \nopt may be used to specify parts of mode in a\nmore readable
      fashion.  See also ::sysopen and ::for_fd."
    - 
  - - 604
    - IO#open(fd, mode="r" [, opt]) =>io
    - 43
    - '2013-06-22 13:38:16.142350'
    - '2013-06-25 06:11:28.230896'
    - 
    - 
  - - 605
    - IO#open(fd, mode="r" [, opt]) { |io| block } =>obj
    - 43
    - '2013-06-22 13:38:16.678587'
    - '2013-06-25 06:11:28.365719'
    - ! 'With no associated block, IO.open is a synonym for ::new.  If the optional
      code block is

      given, it will be passed io as an argument, and the IO object will automatically
      be closed when the block

      terminates. In this instance, ::open

      returns the value of the block.'
    - 
  - - 606
    - IO#pipe =>[read_io, write_io]
    - 43
    - '2013-06-22 13:38:17.104544'
    - '2013-06-25 06:11:28.677521'
    - 
    - 
  - - 607
    - IO#pipe(ext_enc) =>[read_io, write_io]
    - 43
    - '2013-06-22 13:38:17.408802'
    - '2013-06-25 06:11:28.968006'
    - 
    - 
  - - 608
    - IO#pipe("ext_enc:int_enc" [, opt]) =>[read_io, write_io]
    - 43
    - '2013-06-22 13:38:17.700062'
    - '2013-06-25 06:11:29.246962'
    - 
    - 
  - - 609
    - IO#pipe(ext_enc, int_enc [, opt]) =>[read_io, write_io]
    - 43
    - '2013-06-22 13:38:18.013502'
    - '2013-06-25 06:11:29.393093'
    - 
    - 
  - - 610
    - IO#pipe(...) {|read_io, write_io| ... }
    - 43
    - '2013-06-22 13:38:18.360417'
    - '2013-06-25 03:57:56.198704'
    - ! 'Creates a pair of pipe endpoints (connected to each other) and returns them

      as a two-element array of IO objects: [

      read_io, write_io ].'
    - 
  - - 611
    - IO#popen([env,] cmd, mode="r" [, opt]) =>io
    - 43
    - '2013-06-22 13:38:18.687327'
    - '2013-06-25 06:11:29.684664'
    - 
    - 
  - - 612
    - IO#popen([env,] cmd, mode="r" [, opt]) {|io| block } =>obj
    - 43
    - '2013-06-22 13:38:19.001497'
    - '2013-06-25 06:11:29.985954'
    - ! 'Runs the specified command as a subprocess; the subprocess’s standard input

      and output will be connected to the returned IO object.'
    - 
  - - 613
    - IO#read(name, [length [, offset]] ) =>string
    - 43
    - '2013-06-22 13:38:19.371064'
    - '2013-06-25 06:11:30.287845'
    - 
    - 
  - - 614
    - IO#read(name, [length [, offset]], open_args) =>string
    - 43
    - '2013-06-22 13:38:19.740138'
    - '2013-06-25 06:11:30.477425'
    - ! "Opens the file, optionally seeks to the given offset, then\nreturns length
      bytes (defaulting to the rest of the file). \nread ensures the file is closed
      before returning."
    - 
  - - 615
    - IO#readlines(name, sep=$/ [, open_args]) =>array
    - 43
    - '2013-06-22 13:38:20.066865'
    - '2013-06-25 06:11:30.645098'
    - 
    - 
  - - 616
    - IO#readlines(name, limit [, open_args]) =>array
    - 43
    - '2013-06-22 13:38:20.369478'
    - '2013-06-25 06:11:30.925009'
    - 
    - 
  - - 617
    - IO#readlines(name, sep, limit [, open_args]) =>array
    - 43
    - '2013-06-22 13:38:20.716404'
    - '2013-06-25 06:11:31.214427'
    - ! 'Reads the entire file specified by name as individual lines, and

      returns those lines in an array. Lines are separated by sep.'
    - 
  - - 618
    - IO#select(read_array
    - 43
    - '2013-06-22 13:38:21.052483'
    - '2013-06-23 06:50:50.352871'
    - 
    - 
  - - 619
    - IO#[, write_array
    - 43
    - '2013-06-22 13:38:21.365631'
    - '2013-06-23 06:50:50.506920'
    - 
    - 
  - - 620
    - IO#[, error_array
    - 43
    - '2013-06-22 13:38:21.681213'
    - '2013-06-23 06:50:50.665113'
    - 
    - 
  - - 621
    - IO#[, timeout]]]) =>array or nil
    - 43
    - '2013-06-22 13:38:22.017150'
    - '2013-06-25 06:11:31.504221'
    - ! 'Calls select(2) system call. It monitors given arrays of IO

      objects, waits one or more of IO objects ready for reading,

      are ready for writing, and have pending exceptions respectively, and

      returns an array that contains arrays of those IO

      objects.  It will return nil if optional timeout

      value is given and no IO object is ready in timeout

      seconds.'
    - 
  - - 622
    - IO#sysopen(path, [mode, [perm]]) =>fixnum
    - 43
    - '2013-06-22 13:38:22.352646'
    - '2013-06-25 06:11:31.650048'
    - ! 'Opens the given path, returning the underlying file descriptor as a

      Fixnum.'
    - 
  - - 623
    - IO#try_convert(obj) =>io or nil
    - 43
    - '2013-06-22 13:38:22.633487'
    - '2013-06-25 06:11:31.951979'
    - ! 'Try to convert obj into an IO, using #to_io method. Returns converted IO
      or nil if obj cannot be converted for any

      reason.'
    - 
  - - 624
    - IO#write(name, string, [offset] ) => fixnum
    - 43
    - '2013-06-22 13:38:22.960039'
    - '2013-06-23 06:50:51.425763'
    - 
    - 
  - - 625
    - IO#write(name, string, [offset], open_args ) => fixnum
    - 43
    - '2013-06-22 13:38:23.307863'
    - '2013-06-25 03:57:57.286910'
    - ! 'Opens the file, optionally seeks to the given offset, writes

      string, then returns the length written. write

      ensures the file is closed before returning. If offset is not

      given, the file is truncated.  Otherwise, it is not truncated.'
    - 
  - - 626
    - ! 'IO#ios click to toggle source '
    - 43
    - '2013-06-22 13:38:23.610481'
    - '2013-06-25 03:57:57.443748'
    - ! 'String Output---Writes obj to

      ios. obj will be converted to a string using

      to_s.'
    - 
  - - 627
    - IO#advise(advice, offset=0, len=0) =>nil
    - 43
    - '2013-06-22 13:38:23.924085'
    - '2013-06-25 06:11:32.220840'
    - ! 'advice is one of the following symbols:'
    - 
  - - 628
    - IO#autoclose = bool =>true or false
    - 43
    - '2013-06-22 13:38:24.239726'
    - '2013-06-25 06:11:32.522182'
    - Sets auto-close flag.
    - 
  - - 629
    - IO#autoclose? =>true or false
    - 43
    - '2013-06-22 13:38:24.575335'
    - '2013-06-25 06:11:32.834308'
    - ! 'Returns true if the underlying file descriptor of ios

      will be closed automatically at its finalization, otherwise

      false.'
    - 
  - - 630
    - IO#binmode =>ios
    - 43
    - '2013-06-22 13:38:24.855633'
    - '2013-06-25 06:11:33.124052'
    - ! 'Puts ios into binary mode. Once a stream is in binary mode, it

      cannot be reset to nonbinary mode.'
    - 
  - - 631
    - IO#binmode? =>true or false
    - 43
    - '2013-06-22 13:38:25.180920'
    - '2013-06-25 06:11:33.270659'
    - Returns true if ios is binmode.
    - 
  - - 632
    - IO#close =>nil
    - 43
    - '2013-06-22 13:38:25.505410'
    - '2013-06-25 06:11:33.449738'
    - ! 'Closes ios and flushes any pending writes to the operating system.

      The stream is unavailable for any further data operations; an

      IOError is raised if such an attempt is made. I/O streams are

      automatically closed when they are claimed by the garbage collector.'
    - 
  - - 633
    - IO#close_on_exec = bool =>true or false
    - 43
    - '2013-06-22 13:38:25.831880'
    - '2013-06-25 06:11:33.738595'
    - Sets a close-on-exec flag.
    - 
  - - 634
    - IO#close_on_exec? =>true or false
    - 43
    - '2013-06-22 13:38:26.122976'
    - '2013-06-25 06:11:34.040111'
    - Returns true if ios will be closed on exec.
    - 
  - - 635
    - IO#close_read =>nil
    - 43
    - '2013-06-22 13:38:26.469888'
    - '2013-06-25 06:11:34.207768'
    - ! 'Closes the read end of a duplex I/O stream (i.e., one that contains both
      a

      read and a write stream, such as a pipe). Will raise an

      IOError if the stream is not duplexed.'
    - 
  - - 636
    - IO#close_write =>nil
    - 43
    - '2013-06-22 13:38:26.817135'
    - '2013-06-25 06:11:34.511359'
    - ! 'Closes the write end of a duplex I/O stream (i.e., one that contains both
      a

      read and a write stream, such as a pipe). Will raise an

      IOError if the stream is not duplexed.'
    - 
  - - 637
    - IO#closed? =>true or false
    - 43
    - '2013-06-22 13:38:27.154528'
    - '2013-06-25 06:11:34.824426'
    - ! 'Returns true if ios is completely closed (for duplex

      streams, both reader and writer), false otherwise.'
    - 
  - - 638
    - IO#each(sep=$/) {|line| block } =>ios
    - 43
    - '2013-06-22 13:38:27.446058'
    - '2013-06-25 06:11:35.135826'
    - 
    - 
  - - 639
    - IO#each(limit) {|line| block } =>ios
    - 43
    - '2013-06-22 13:38:27.748823'
    - '2013-06-25 06:11:35.414978'
    - 
    - 
  - - 640
    - IO#each(sep,limit) {|line| block } =>ios
    - 43
    - '2013-06-22 13:38:28.073348'
    - '2013-06-25 06:11:35.561274'
    - 
    - 
  - - 641
    - IO#each(...) =>an_enumerator
    - 43
    - '2013-06-22 13:38:28.387014'
    - '2013-06-25 06:11:35.861526'
    - 
    - 
  - - 642
    - IO#each_line(sep=$/) {|line| block } =>ios
    - 43
    - '2013-06-22 13:38:28.680212'
    - '2013-06-25 06:11:36.162635'
    - 
    - 
  - - 643
    - IO#each_line(limit) {|line| block } =>ios
    - 43
    - '2013-06-22 13:38:28.982634'
    - '2013-06-25 06:11:36.508285'
    - 
    - 
  - - 644
    - IO#each_line(sep,limit) {|line| block } =>ios
    - 43
    - '2013-06-22 13:38:29.462974'
    - '2013-06-25 06:11:36.822213'
    - 
    - 
  - - 645
    - IO#each_line(...) =>an_enumerator
    - 43
    - '2013-06-22 13:38:29.798909'
    - '2013-06-25 06:11:37.124737'
    - ! 'Executes the block for every line in ios, where lines are

      separated by sep. ios must be opened for reading or an

      IOError will be raised.'
    - 
  - - 646
    - IO#each_byte {|byte| block } =>ios
    - 43
    - '2013-06-22 13:38:30.148400'
    - '2013-06-25 06:11:37.426051'
    - 
    - 
  - - 647
    - IO#each_byte =>an_enumerator
    - 43
    - '2013-06-22 13:38:30.594481'
    - '2013-06-25 06:11:37.738463'
    - ! 'Calls the given block once for each byte (0..255) in ios, passing

      the byte as an argument. The stream must be opened for reading or an

      IOError will be raised.'
    - 
  - - 648
    - IO#each_char {|c| block } =>ios
    - 43
    - '2013-06-22 13:38:30.919040'
    - '2013-06-25 06:11:37.873064'
    - 
    - 
  - - 649
    - IO#each_char =>an_enumerator
    - 43
    - '2013-06-22 13:38:31.232680'
    - '2013-06-25 06:11:38.151898'
    - ! 'Calls the given block once for each character in ios, passing the

      character as an argument. The stream must be opened for reading or an

      IOError will be raised.'
    - 
  - - 650
    - IO#each_codepoint {|c| block } =>ios
    - 43
    - '2013-06-22 13:38:31.702356'
    - '2013-06-25 06:11:38.442070'
    - 
    - 
  - - 651
    - IO#codepoints {|c| block } =>ios
    - 43
    - '2013-06-22 13:38:32.006700'
    - '2013-06-25 06:11:38.587369'
    - 
    - 
  - - 652
    - IO#each_codepoint =>an_enumerator
    - 43
    - '2013-06-22 13:38:32.342871'
    - '2013-06-25 06:11:38.888503'
    - 
    - 
  - - 653
    - IO#codepoints =>an_enumerator
    - 43
    - '2013-06-22 13:38:32.811707'
    - '2013-06-25 06:11:39.167907'
    - ! 'Passes the Integer ordinal of each character in ios,

      passing the codepoint as an argument. The stream must be opened for reading

      or an IOError will be raised.'
    - 
  - - 654
    - IO#each_line(sep=$/) {|line| block } =>ios
    - 43
    - '2013-06-22 13:38:33.147553'
    - '2013-06-25 06:11:39.360120'
    - 
    - 
  - - 655
    - IO#each_line(limit) {|line| block } =>ios
    - 43
    - '2013-06-22 13:38:33.441834'
    - '2013-06-25 06:11:39.661263'
    - 
    - 
  - - 656
    - IO#each_line(sep,limit) {|line| block } =>ios
    - 43
    - '2013-06-22 13:38:33.910147'
    - '2013-06-25 06:11:39.795698'
    - 
    - 
  - - 657
    - IO#each_line(...) =>an_enumerator
    - 43
    - '2013-06-22 13:38:34.235651'
    - '2013-06-25 06:11:40.074636'
    - 
    - 
  - - 658
    - IO#eof =>true or false
    - 43
    - '2013-06-22 13:38:34.581868'
    - '2013-06-25 06:11:40.353825'
    - 
    - 
  - - 659
    - IO#eof? =>true or false
    - 43
    - '2013-06-22 13:38:35.050926'
    - '2013-06-25 06:11:40.655500'
    - ! 'Returns true if ios is at end of file that means there are no more

      data to read. The stream must be opened for reading or an

      IOError will be raised.'
    - 
  - - 660
    - IO#eof? =>true or false
    - 43
    - '2013-06-22 13:38:35.399643'
    - '2013-06-25 06:11:40.956570'
    - 
    - 
  - - 661
    - IO#external_encoding =>encoding
    - 43
    - '2013-06-22 13:38:35.735314'
    - '2013-06-25 06:11:41.146486'
    - ! 'Returns the Encoding object that represents the

      encoding of the file. If io is write mode and no encoding is specified,

      returns nil.'
    - 
  - - 662
    - IO#fcntl(integer_cmd, arg) =>integer
    - 43
    - '2013-06-22 13:38:36.239155'
    - '2013-06-25 06:11:41.458262'
    - ! 'Provides a mechanism for issuing low-level commands to control or query

      file-oriented I/O streams. Arguments and results are platform dependent. If

      arg is a number, its value is passed directly. If it is a string,

      it is interpreted as a binary sequence of bytes (Array#pack

      might be a useful way to build this string). On Unix platforms, see

      fcntl(2) for details. Not implemented on all platforms.'
    - 
  - - 663
    - IO#fdatasync =>0 or nil
    - 43
    - '2013-06-22 13:38:36.741232'
    - '2013-06-25 06:11:41.628015'
    - Immediately writes all buffered data in ios to disk.
    - 
  - - 664
    - IO#fileno =>fixnum
    - 43
    - '2013-06-22 13:38:37.212029'
    - '2013-06-25 06:11:41.929748'
    - 
    - 
  - - 665
    - IO#to_i =>fixnum
    - 43
    - '2013-06-22 13:38:37.558703'
    - '2013-06-25 06:11:42.230527'
    - ! 'Returns an integer representing the numeric file descriptor for

      ios.'
    - 
  - - 666
    - IO#flush =>ios
    - 43
    - '2013-06-22 13:38:37.872340'
    - '2013-06-25 06:11:42.509594'
    - ! 'Flushes any buffered data within ios to the underlying operating

      system (note that this is Ruby internal buffering only; the OS may buffer

      the data as well).'
    - 
  - - 667
    - IO#fsync =>0 or nil
    - 43
    - '2013-06-22 13:38:38.352869'
    - '2013-06-25 06:11:42.666480'
    - ! 'Immediately writes all buffered data in ios to disk. Note that

      fsync differs from using IO#sync=. The latter

      ensures that data is flushed from Ruby’s buffers, but does not guarantee

      that the underlying operating system actually writes it to disk.'
    - 
  - - 668
    - IO#getbyte =>fixnum or nil
    - 43
    - '2013-06-22 13:38:38.677206'
    - '2013-06-25 06:11:42.967446'
    - ! 'Gets the next 8-bit byte (0..255) from ios. Returns

      nil if called at end of file.'
    - 
  - - 669
    - IO#getc =>string or nil
    - 43
    - '2013-06-22 13:38:39.014716'
    - '2013-06-25 06:11:43.257874'
    - ! 'Reads a one-character string from ios. Returns nil if

      called at end of file.'
    - 
  - - 670
    - IO#gets(sep=$/) =>string or nil
    - 43
    - '2013-06-22 13:38:39.505957'
    - '2013-06-25 06:11:43.559377'
    - 
    - 
  - - 671
    - IO#gets(limit) =>string or nil
    - 43
    - '2013-06-22 13:38:39.952633'
    - '2013-06-25 06:11:43.883429'
    - 
    - 
  - - 672
    - IO#gets(sep, limit) =>string or nil
    - 43
    - '2013-06-22 13:38:40.433240'
    - '2013-06-25 06:11:44.185937'
    - ! 'Reads the next “line” from the I/O stream; lines are separated by

      sep. A separator of nil reads the entire contents,

      and a zero-length separator reads the input a paragraph at a time (two

      successive newlines in the input separate paragraphs). The stream must be

      opened for reading or an IOError will be raised. The line read

      in will be returned and also assigned to $_. Returns

      nil if called at end of file.  If the first argument is an

      integer, or optional second argument is given, the returning string would

      not be longer than the given value in bytes.'
    - 
  - - 673
    - IO#inspect =>string
    - 43
    - '2013-06-22 13:38:40.882002'
    - '2013-06-25 06:11:44.475616'
    - Return a string describing this IO object.
    - 
  - - 674
    - IO#internal_encoding =>encoding
    - 43
    - '2013-06-22 13:38:41.717816'
    - '2013-06-25 06:11:44.621013'
    - ! 'Returns the Encoding of the internal string if

      conversion is specified.  Otherwise returns nil.'
    - 
  - - 675
    - IO#ioctl(integer_cmd, arg) =>integer
    - 43
    - '2013-06-22 13:38:42.198586'
    - '2013-06-25 06:11:44.922502'
    - ! 'Provides a mechanism for issuing low-level commands to control or query I/O

      devices. Arguments and results are platform dependent. If arg is a

      number, its value is passed directly. If it is a string, it is interpreted

      as a binary sequence of bytes. On Unix platforms, see ioctl(2)

      for details. Not implemented on all platforms.'
    - 
  - - 676
    - IO#isatty =>true or false
    - 43
    - '2013-06-22 13:38:42.800744'
    - '2013-06-25 06:11:45.223690'
    - ! 'Returns true if ios is associated with a terminal

      device (tty), false otherwise.'
    - 
  - - 677
    - IO#lineno =>integer
    - 43
    - '2013-06-22 13:38:43.403400'
    - '2013-06-25 06:11:45.558832'
    - ! 'Returns the current line number in ios.  The stream must be opened

      for reading. lineno counts the number of times gets is called rather than the
      number of

      newlines encountered.  The two values will differ if gets is called with a separator
      other than

      newline.'
    - 
  - - 678
    - IO#lineno = integer =>integer
    - 43
    - '2013-06-22 13:38:44.030003'
    - '2013-06-25 06:11:45.949632'
    - ! 'Manually sets the current line number to the given value. $.

      is updated only on the next read.'
    - 
  - - 679
    - IO#pid =>fixnum
    - 43
    - '2013-06-22 13:38:44.498934'
    - '2013-06-25 06:11:46.262032'
    - ! 'Returns the process ID of a child process associated with ios.

      This will be set by IO.popen.'
    - 
  - - 680
    - IO#pos =>integer
    - 43
    - '2013-06-22 13:38:45.112647'
    - '2013-06-25 06:11:46.463012'
    - Returns the current offset (in bytes) of ios.
    - 
  - - 681
    - IO#pos = integer =>integer
    - 43
    - '2013-06-22 13:38:45.725974'
    - '2013-06-25 06:11:46.622058'
    - ! 'Seeks to the given position (in bytes) in ios. It is not

      guaranteed that seeking to the right position when ios is

      textmode.'
    - 
  - - 682
    - IO#print() =>nil
    - 43
    - '2013-06-22 13:38:46.241539'
    - '2013-06-25 06:11:46.911201'
    - 
    - 
  - - 683
    - IO#print(obj, ...) =>nil
    - 43
    - '2013-06-22 13:38:46.733141'
    - '2013-06-25 06:11:47.246145'
    - ! 'Writes the given object(s) to ios. The stream must be opened for

      writing. If the output field separator ($,) is not

      nil, it will be inserted between each object. If the output

      record separator ($\</code>) is not <code>nil, it

      will be appended to the output. If no arguments are given, prints

      $_. Objects that aren’t strings will be converted by calling

      their to_s method. With no argument, prints the contents of

      the variable $_. Returns nil.'
    - 
  - - 684
    - IO#printf(format_string [, obj, ...]) =>nil
    - 43
    - '2013-06-22 13:38:47.368569'
    - '2013-06-25 06:11:47.414498'
    - ! 'Formats and writes to ios, converting parameters under control of

      the format string. See Kernel#sprintf for details.'
    - 
  - - 685
    - IO#putc(obj) =>obj
    - 43
    - '2013-06-22 13:38:48.015481'
    - '2013-06-25 06:11:47.737844'
    - ! 'If obj is Numeric, write the character whose code is

      the least-significant byte of obj, otherwise write the first byte

      of the string representation of obj to ios. Note: This

      method is not safe for use with multi-byte characters as it will truncate

      them.'
    - 
  - - 686
    - IO#puts(obj, ...) =>nil
    - 43
    - '2013-06-22 13:38:48.640123'
    - '2013-06-25 06:11:48.060431'
    - ! 'Writes the given objects to ios as with IO#print.

      Writes a record separator (typically a newline) after any that do not

      already end with a newline sequence. If called with an array argument,

      writes each element on a new line. If called without arguments, outputs a

      single record separator.'
    - 
  - - 687
    - IO#read([length [, outbuf]]) =>string, outbuf, or nil
    - 43
    - '2013-06-22 13:38:49.222089'
    - '2013-06-25 06:11:48.261508'
    - Reads length bytes from the I/O stream.
    - 
  - - 688
    - IO#read_nonblock(maxlen) =>string
    - 43
    - '2013-06-22 13:38:49.824823'
    - '2013-06-25 06:11:48.418189'
    - 
    - 
  - - 689
    - IO#read_nonblock(maxlen, outbuf) =>outbuf
    - 43
    - '2013-06-22 13:38:50.460998'
    - '2013-06-25 06:11:48.563481'
    - ! 'Reads at most maxlen bytes from ios using the read(2)

      system call after O_NONBLOCK is set for the underlying file descriptor.'
    - 
  - - 690
    - IO#readbyte =>fixnum
    - 43
    - '2013-06-22 13:38:51.243137'
    - '2013-06-25 06:11:48.699009'
    - ! 'Reads a byte as with IO#getbyte, but raises an

      EOFError on end of file.'
    - 
  - - 691
    - IO#readchar =>string
    - 43
    - '2013-06-22 13:38:52.157189'
    - '2013-06-25 06:11:48.857675'
    - ! 'Reads a one-character string from ios. Raises an

      EOFError on end of file.'
    - 
  - - 692
    - IO#readline(sep=$/) =>string
    - 43
    - '2013-06-22 13:38:52.785936'
    - '2013-06-25 06:11:49.024537'
    - 
    - 
  - - 693
    - IO#readline(limit) =>string
    - 43
    - '2013-06-22 13:38:53.210442'
    - '2013-06-25 06:11:49.336987'
    - 
    - 
  - - 694
    - IO#readline(sep, limit) =>string
    - 43
    - '2013-06-22 13:38:53.557581'
    - '2013-06-25 06:11:49.504774'
    - ! 'Reads a line as with IO#gets, but raises an

      EOFError on end of file.'
    - 
  - - 695
    - IO#readlines(sep=$/) =>array
    - 43
    - '2013-06-22 13:38:53.904201'
    - '2013-06-25 06:11:49.672440'
    - 
    - 
  - - 696
    - IO#readlines(limit) =>array
    - 43
    - '2013-06-22 13:38:54.232133'
    - '2013-06-25 06:11:49.829302'
    - 
    - 
  - - 697
    - IO#readlines(sep, limit) =>array
    - 43
    - '2013-06-22 13:38:54.678089'
    - '2013-06-25 06:11:49.974871'
    - ! 'Reads all of the lines in ios, and returns them in

      anArray. Lines are separated by the optional sep. If

      sep is nil, the rest of the stream is returned as a

      single record.  If the first argument is an integer, or optional second

      argument is given, the returning string would not be longer than the given

      value in bytes. The stream must be opened for reading or an

      IOError will be raised.'
    - 
  - - 698
    - IO#readpartial(maxlen) =>string
    - 43
    - '2013-06-22 13:38:55.002914'
    - '2013-06-25 06:11:50.109559'
    - 
    - 
  - - 699
    - IO#readpartial(maxlen, outbuf) =>outbuf
    - 43
    - '2013-06-22 13:38:55.349765'
    - '2013-06-25 06:11:50.243741'
    - ! 'Reads at most maxlen bytes from the I/O stream. It blocks only if

      ios has no data immediately available. It doesn’t block if some

      data available. If the optional outbuf argument is present, it

      must reference a String, which will receive the

      data. The outbuf will contain only the received data after the

      method call even if it is not empty at the beginning. It raises

      EOFError on end of file.'
    - 
  - - 700
    - IO#reopen(other_IO) =>ios
    - 43
    - '2013-06-22 13:38:55.831985'
    - '2013-06-25 06:11:50.547106'
    - 
    - 
  - - 701
    - IO#reopen(path, mode_str) =>ios
    - 43
    - '2013-06-22 13:38:56.122834'
    - '2013-06-25 06:11:50.714686'
    - ! 'Reassociates ios with the I/O stream given in other_IO or

      to a new stream opened on path. This may dynamically change the

      actual class of this stream.'
    - 
  - - 702
    - IO#rewind =>0
    - 43
    - '2013-06-22 13:38:56.459063'
    - '2013-06-25 06:11:50.883338'
    - ! 'Positions ios to the beginning of input, resetting

      lineno to zero.'
    - 
  - - 703
    - IO#seek(amount, whence=IO::SEEK_SET) =>0
    - 43
    - '2013-06-22 13:38:56.949829'
    - '2013-06-25 06:11:51.050088'
    - ! 'Seeks to a given offset anInteger in the stream according to the

      value of whence:'
    - 
  - - 704
    - IO#set_encoding(ext_enc) =>io
    - 43
    - '2013-06-22 13:38:57.296987'
    - '2013-06-25 06:11:51.218613'
    - 
    - 
  - - 705
    - IO#set_encoding("ext_enc:int_enc") =>io
    - 43
    - '2013-06-22 13:38:57.601534'
    - '2013-06-25 06:11:51.663954'
    - 
    - 
  - - 706
    - IO#set_encoding(ext_enc, int_enc) =>io
    - 43
    - '2013-06-22 13:38:58.081736'
    - '2013-06-25 06:11:51.900456'
    - 
    - 
  - - 707
    - IO#set_encoding("ext_enc:int_enc", opt) =>io
    - 43
    - '2013-06-22 13:38:58.428719'
    - '2013-06-25 06:11:52.045483'
    - 
    - 
  - - 708
    - IO#set_encoding(ext_enc, int_enc, opt) =>io
    - 43
    - '2013-06-22 13:38:58.764314'
    - '2013-06-25 06:11:52.213592'
    - ! 'If single argument is specified, read string from io is tagged with the

      encoding specified.  If encoding is a colon separated two encoding names

      “A:B”, the read string is converted from encoding A (external encoding) to

      encoding B (internal encoding), then tagged with B.  If two arguments are

      specified, those must be encoding objects or encoding names, and the first

      one is the external encoding, and the second one is the internal encoding.

      If the external encoding and the internal encoding is specified, optional

      hash argument specify the conversion option.'
    - 
  - - 709
    - IO#stat =>stat
    - 43
    - '2013-06-22 13:38:59.190825'
    - '2013-06-25 06:11:52.383074'
    - ! 'Returns status information for ios as an object of type

      File::Stat.'
    - 
  - - 710
    - IO#sync =>true or false
    - 43
    - '2013-06-22 13:38:59.537640'
    - '2013-06-25 06:11:52.550664'
    - ! 'Returns the current “sync mode” of ios. When sync mode is true,

      all output is immediately flushed to the underlying operating system and is

      not buffered by Ruby internally. See also IO#fsync.'
    - 
  - - 711
    - IO#sync = boolean =>boolean
    - 43
    - '2013-06-22 13:38:59.884650'
    - '2013-06-25 06:11:52.875094'
    - ! 'Sets the “sync mode” to true or false. When sync

      mode is true, all output is immediately flushed to the underlying operating

      system and is not buffered internally. Returns the new state. See also

      IO#fsync.'
    - 
  - - 712
    - IO#sysread(maxlen[, outbuf]) =>string
    - 43
    - '2013-06-22 13:39:00.376004'
    - '2013-06-25 06:11:53.020362'
    - ! 'Reads maxlen bytes from ios using a low-level read and

      returns them as a string.  Do not mix with other methods that read from

      ios or you may get unpredictable results. If the optional

      outbuf argument is present, it must reference a String, which will receive the
      data. The

      outbuf will contain only the received data after the method call

      even if it is not empty at the beginning. Raises

      SystemCallError on error and EOFError at end of

      file.'
    - 
  - - 713
    - IO#sysseek(offset, whence=IO::SEEK_SET) =>integer
    - 43
    - '2013-06-22 13:39:00.668601'
    - '2013-06-25 06:11:53.155004'
    - ! 'Seeks to a given offset in the stream according to the value of

      whence (see IO#seek for values of whence).

      Returns the new offset into the file.'
    - 
  - - 714
    - IO#syswrite(string) =>integer
    - 43
    - '2013-06-22 13:39:00.994210'
    - '2013-06-25 06:11:53.289323'
    - ! 'Writes the given string to ios using a low-level write. Returns

      the number of bytes written. Do not mix with other methods that write to

      ios or you may get unpredictable results. Raises

      SystemCallError on error.'
    - 
  - - 715
    - IO#tell =>integer
    - 43
    - '2013-06-22 13:39:01.474176'
    - '2013-06-25 06:11:53.446812'
    - Returns the current offset (in bytes) of ios.
    - 
  - - 716
    - IO#to_io =>ios
    - 43
    - '2013-06-22 13:39:01.788105'
    - '2013-06-25 06:11:53.615088'
    - Returns ios.
    - 
  - - 717
    - IO#tty? =>true or false
    - 43
    - '2013-06-22 13:39:02.068203'
    - '2013-06-25 06:11:53.927591'
    - ! 'Returns true if ios is associated with a terminal

      device (tty), false otherwise.'
    - 
  - - 718
    - IO#ungetbyte(string) =>nil
    - 43
    - '2013-06-22 13:39:02.572524'
    - '2013-06-25 06:11:54.085354'
    - 
    - 
  - - 719
    - IO#ungetbyte(integer) =>nil
    - 43
    - '2013-06-22 13:39:02.919714'
    - '2013-06-25 06:11:54.231180'
    - ! 'Pushes back bytes (passed as a parameter) onto ios, such that a

      subsequent buffered read will return it. Only one byte may be pushed back

      before a subsequent read operation (that is, you will be able to read only

      the last of several bytes that have been pushed back). Has no effect with

      unbuffered reads (such as IO#sysread).'
    - 
  - - 720
    - IO#ungetc(string) =>nil
    - 43
    - '2013-06-22 13:39:03.222467'
    - '2013-06-25 06:11:54.365802'
    - ! 'Pushes back one character (passed as a parameter) onto ios, such

      that a subsequent buffered character read will return it. Only one

      character may be pushed back before a subsequent read operation (that is,

      you will be able to read only the last of several characters that have been

      pushed back). Has no effect with unbuffered reads (such as

      IO#sysread).'
    - 
  - - 721
    - IO#write(string) =>integer
    - 43
    - '2013-06-22 13:39:03.702615'
    - '2013-06-25 06:11:54.499856'
    - ! 'Writes the given string to ios. The stream must be opened for

      writing. If the argument is not a string, it will be converted to a string

      using to_s. Returns the number of bytes written.'
    - 
  - - 722
    - IO#write_nonblock(string) =>integer
    - 43
    - '2013-06-22 13:39:04.105578'
    - '2013-06-25 06:11:54.646154'
    - ! 'Writes the given string to ios using the write(2) system call

      after O_NONBLOCK is set for the underlying file descriptor.'
    - 
  - - 723
    - File#absolute_path(file_name [, dir_string] ) =>abs_file_name
    - 33
    - '2013-06-22 13:39:28.676919'
    - '2013-06-25 06:11:54.814172'
    - ! 'Converts a pathname to an absolute pathname. Relative paths are referenced

      from the current working directory of the process unless

      dir_string is given, in which case it will be used as the starting

      point. If the given pathname starts with a “~” it is NOT

      expanded, it is treated as a normal directory name.'
    - 
  - - 724
    - File#atime(file_name) =>time
    - 33
    - '2013-06-22 13:39:29.157446'
    - '2013-06-25 06:11:55.126077'
    - Returns the last access time for the named file as a Time object).
    - 
  - - 725
    - File#basename(file_name [, suffix] ) =>base_name
    - 33
    - '2013-06-22 13:39:29.470898'
    - '2013-06-25 06:11:55.283194'
    - ! 'Returns the last component of the filename given in file_name,

      which can be formed using both File::SEPARATOR and

      File::ALT_SEPARATOR as the separator when

      File::ALT_SEPARATOR is not nil. If

      suffix is given and present at the end of file_name, it

      is removed.'
    - 
  - - 726
    - File#blockdev?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:29.773286'
    - '2013-06-25 06:11:55.450987'
    - Returns true if the named file is a block device.
    - 
  - - 727
    - File#chardev?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:30.142974'
    - '2013-06-25 06:11:55.598202'
    - Returns true if the named file is a character device.
    - 
  - - 728
    - File#chmod(mode_int, file_name, ... ) =>integer
    - 33
    - '2013-06-22 13:39:30.469295'
    - '2013-06-25 06:11:55.734045'
    - ! 'Changes permission bits on the named file(s) to the bit pattern represented

      by mode_int. Actual effects are operating system dependent (see

      the beginning of this section). On Unix systems, see chmod(2)

      for details. Returns the number of files processed.'
    - 
  - - 729
    - File#chown(owner_int, group_int, file_name,... ) =>integer
    - 33
    - '2013-06-22 13:39:30.760398'
    - '2013-06-25 06:11:55.878758'
    - ! 'Changes the owner and group of the named file(s) to the given numeric owner

      and group id’s. Only a process with superuser privileges may change the

      owner of a file. The current owner of a file may change the file’s group to

      any group to which the owner belongs. A nil or -1 owner or

      group id is ignored. Returns the number of files processed.'
    - 
  - - 730
    - File#ctime(file_name) =>time
    - 33
    - '2013-06-22 13:39:31.121191'
    - '2013-06-25 06:11:56.200729'
    - ! 'Returns the change time for the named file (the time at which directory

      information about the file was changed, not the file itself).'
    - 
  - - 731
    - File#delete(file_name, ...) =>integer
    - 33
    - '2013-06-22 13:39:31.465872'
    - '2013-06-25 06:11:56.370034'
    - ! 'Deletes the named files, returning the number of names passed as arguments.

      Raises an exception on any error. See also Dir::rmdir.'
    - 
  - - 732
    - File#directory?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:31.879684'
    - '2013-06-25 06:11:56.516412'
    - ! 'Returns true if the named file is a directory, or a symlink

      that points at a directory, and false otherwise.'
    - 
  - - 733
    - File#dirname(file_name) =>dir_name
    - 33
    - '2013-06-22 13:39:32.183550'
    - '2013-06-25 06:11:56.683577'
    - ! 'Returns all components of the filename given in file_name except

      the last one. The filename can be formed using both

      File::SEPARATOR and File::ALT_SEPARATOR as the

      separator when File::ALT_SEPARATOR is not nil.'
    - 
  - - 734
    - File#executable?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:32.565001'
    - '2013-06-25 06:11:56.841008'
    - ! 'Returns true if the named file is executable by the effective

      user id of this process.'
    - 
  - - 735
    - File#executable_real?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:32.900812'
    - '2013-06-25 06:11:56.997221'
    - ! 'Returns true if the named file is executable by the real user

      id of this process.'
    - 
  - - 736
    - File#exist?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:33.248199'
    - '2013-06-25 06:11:57.315712'
    - Return true if the named file exists.
    - 
  - - 737
    - File#exists?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:33.564841'
    - '2013-06-25 06:11:57.484686'
    - Return true if the named file exists.
    - 
  - - 738
    - File#expand_path(file_name [, dir_string] ) =>abs_file_name
    - 33
    - '2013-06-22 13:39:33.899539'
    - '2013-06-25 06:11:57.651657'
    - ! 'Converts a pathname to an absolute pathname. Relative paths are referenced

      from the current working directory of the process unless

      dir_string is given, in which case it will be used as the starting

      point. The given pathname may start with a “~”, which expands

      to the process owner’s home directory (the environment variable

      HOME must be set correctly). “~user”

      expands to the named user’s home directory.'
    - 
  - - 739
    - File#extname(path) =>string
    - 33
    - '2013-06-22 13:39:34.235380'
    - '2013-06-25 06:11:57.819119'
    - ! 'Returns the extension (the portion of file name in path

      starting from the last period).'
    - 
  - - 740
    - File#file?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:34.538873'
    - '2013-06-25 06:11:57.976910'
    - Returns true if the named file exists and is a regular file.
    - 
  - - 741
    - File#fnmatch( pattern, path, [flags] ) =>(true or false)
    - 33
    - '2013-06-22 13:39:34.853726'
    - '2013-06-25 06:11:58.111395'
    - 
    - 
  - - 742
    - File#fnmatch?( pattern, path, [flags] ) =>(true or false)
    - 33
    - '2013-06-22 13:39:35.189068'
    - '2013-06-25 06:11:58.257955'
    - ! 'Returns true if path matches against pattern The pattern

      is not a regular expression; instead it follows rules similar to shell

      filename globbing. It may contain the following metacharacters:'
    - 
  - - 743
    - File#fnmatch?( pattern, path, [flags] ) =>(true or false)
    - 33
    - '2013-06-22 13:39:35.525025'
    - '2013-06-25 06:11:58.558239'
    - 
    - 
  - - 744
    - File#ftype(file_name) =>string
    - 33
    - '2013-06-22 13:39:35.827004'
    - '2013-06-25 06:11:58.706687'
    - ! 'Identifies the type of the named file; the return string is one of

      “file”, “directory”,

      “characterSpecial”, “blockSpecial”,

      “fifo”, “link”, “socket”, or

      “unknown”.'
    - 
  - - 745
    - File#grpowned?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:36.174583'
    - '2013-06-25 06:11:58.874176'
    - ! 'Returns true if the named file exists and the effective group

      id of the calling process is the owner of the file. Returns

      false on Windows.'
    - 
  - - 746
    - File#identical?(file_1, file_2) =>true or false
    - 33
    - '2013-06-22 13:39:36.609224'
    - '2013-06-25 06:11:59.042321'
    - Returns true if the named files are identical.
    - 
  - - 747
    - File#join(string, ...) =>path
    - 33
    - '2013-06-22 13:39:36.925729'
    - '2013-06-25 06:11:59.187576'
    - ! 'Returns a new string formed by joining the strings using

      File::SEPARATOR.'
    - 
  - - 748
    - File#lchmod(mode_int, file_name, ...) =>integer
    - 33
    - '2013-06-22 13:39:37.228479'
    - '2013-06-25 06:11:59.333719'
    - ! 'Equivalent to File::chmod, but does not follow symbolic links

      (so it will change the permissions associated with the link, not the file

      referenced by the link). Often not available.'
    - 
  - - 749
    - File#lchown(owner_int, group_int, file_name,..) =>integer
    - 33
    - '2013-06-22 13:39:37.531410'
    - '2013-06-25 06:11:59.624352'
    - ! 'Equivalent to File::chown, but does not follow symbolic links

      (so it will change the owner associated with the link, not the file

      referenced by the link). Often not available. Returns number of files in

      the argument list.'
    - 
  - - 750
    - File#link(old_name, new_name) =>0
    - 33
    - '2013-06-22 13:39:37.857492'
    - '2013-06-25 06:11:59.781020'
    - ! 'Creates a new name for an existing file using a hard link. Will not

      overwrite new_name if it already exists (raising a subclass of

      SystemCallError). Not available on all platforms.'
    - 
  - - 751
    - File#lstat(file_name) =>stat
    - 33
    - '2013-06-22 13:39:38.181905'
    - '2013-06-25 06:11:59.949037'
    - ! 'Same as File::stat, but does not follow the last symbolic

      link. Instead, reports on the link itself.'
    - 
  - - 752
    - File#mtime(file_name) =>time
    - 33
    - '2013-06-22 13:39:38.495453'
    - '2013-06-25 06:12:00.107099'
    - Returns the modification time for the named file as a Time object.
    - 
  - - 753
    - File#new(filename, mode="r" [, opt]) =>file
    - 33
    - '2013-06-22 13:39:38.797990'
    - '2013-06-25 06:12:00.264520'
    - 
    - 
  - - 754
    - File#new(filename [, mode [, perm]] [, opt]) =>file
    - 33
    - '2013-06-22 13:39:39.122497'
    - '2013-06-25 06:12:00.432274'
    - ! 'Opens the file named by filename according to the given

      mode and returns a new File object.'
    - 
  - - 755
    - File#open(filename, mode="r" [, opt]) =>file
    - 33
    - '2013-06-22 13:39:39.449206'
    - '2013-06-25 06:12:00.757387'
    - 
    - 
  - - 756
    - File#open(filename [, mode [, perm]] [, opt]) =>file
    - 33
    - '2013-06-22 13:39:39.774229'
    - '2013-06-25 06:12:00.914153'
    - 
    - 
  - - 757
    - File#open(filename, mode="r" [, opt]) {|file| block } =>obj
    - 33
    - '2013-06-22 13:39:40.076525'
    - '2013-06-25 06:12:01.070103'
    - 
    - 
  - - 758
    - File#open(filename [, mode [, perm]] [, opt]) {|file| block } =>obj
    - 33
    - '2013-06-22 13:39:40.423339'
    - '2013-06-25 06:12:01.238790'
    - ! 'With no associated block, File.open is a synonym for ::new. If the optional
      code block is

      given, it will be passed the opened file as an argument and

      the File object will automatically be closed when

      the block terminates.  The value of the block will be returned from

      File.open.'
    - 
  - - 759
    - File#owned?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:40.794175'
    - '2013-06-25 06:12:01.406329'
    - ! 'Returns true if the named file exists and the effective used

      id of the calling process is the owner of the file.'
    - 
  - - 760
    - File#path(path) =>string
    - 33
    - '2013-06-22 13:39:41.107867'
    - '2013-06-25 06:12:01.565106'
    - Returns the string representation of the path
    - 
  - - 761
    - File#pipe?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:41.410249'
    - '2013-06-25 06:12:01.866490'
    - Returns true if the named file is a pipe.
    - 
  - - 762
    - File#readable?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:41.935008'
    - '2013-06-25 06:12:02.001809'
    - ! 'Returns true if the named file is readable by the effective

      user id of this process.'
    - 
  - - 763
    - File#readable_real?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:42.259820'
    - '2013-06-25 06:12:02.146404'
    - ! 'Returns true if the named file is readable by the real user id

      of this process.'
    - 
  - - 764
    - File#readlink(link_name) =>file_name
    - 33
    - '2013-06-22 13:39:42.597010'
    - '2013-06-25 06:12:02.303342'
    - ! 'Returns the name of the file referenced by the given link. Not available
      on

      all platforms.'
    - 
  - - 765
    - File#realdirpath(pathname [, dir_string]) =>real_pathname
    - 33
    - '2013-06-22 13:39:43.055813'
    - '2013-06-25 06:12:02.471146'
    - ! 'Returns the real (absolute) pathname of pathname in the actual

      filesystem. The real pathname doesn’t contain symlinks or useless dots.'
    - 
  - - 766
    - File#realpath(pathname [, dir_string]) =>real_pathname
    - 33
    - '2013-06-22 13:39:43.380132'
    - '2013-06-25 06:12:02.639069'
    - ! 'Returns the real (absolute) pathname of pathname in the actual

      filesystem not containing symlinks or useless dots.'
    - 
  - - 767
    - File#rename(old_name, new_name) =>0
    - 33
    - '2013-06-22 13:39:43.704943'
    - '2013-06-25 06:12:02.807773'
    - ! 'Renames the given file to the new name. Raises a

      SystemCallError if the file cannot be renamed.'
    - 
  - - 768
    - File#setgid?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:44.231623'
    - '2013-06-25 06:12:03.142182'
    - Returns true if the named file has the setgid bit set.
    - 
  - - 769
    - File#setuid?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:44.556545'
    - '2013-06-25 06:12:03.290640'
    - Returns true if the named file has the setuid bit set.
    - 
  - - 770
    - File#size(file_name) =>integer
    - 33
    - '2013-06-22 13:39:44.880835'
    - '2013-06-25 06:12:03.446691'
    - Returns the size of file_name.
    - 
  - - 771
    - File#size?(file_name) =>Integer or nil
    - 33
    - '2013-06-22 13:39:45.349516'
    - '2013-06-25 06:12:03.603297'
    - ! 'Returns nil if file_name doesn’t exist or has

      zero size, the size of the file otherwise.'
    - 
  - - 772
    - File#socket?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:45.696676'
    - '2013-06-25 06:12:03.760817'
    - Returns true if the named file is a socket.
    - 
  - - 773
    - File#split(file_name) =>array
    - 33
    - '2013-06-22 13:39:46.012076'
    - '2013-06-25 06:12:03.927649'
    - ! 'Splits the given string into a directory and a file component and returns

      them in a two-element array. See also File::dirname and

      File::basename.'
    - 
  - - 774
    - File#stat(file_name) =>stat
    - 33
    - '2013-06-22 13:39:46.481488'
    - '2013-06-25 06:12:04.229934'
    - ! 'Returns a File::Stat object for the named file (see

      File::Stat).'
    - 
  - - 775
    - File#sticky?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:46.806357'
    - '2013-06-25 06:12:04.386919'
    - Returns true if the named file has the sticky bit set.
    - 
  - - 776
    - File#symlink(old_name, new_name) =>0
    - 33
    - '2013-06-22 13:39:47.152872'
    - '2013-06-25 06:12:04.543466'
    - ! 'Creates a symbolic link called new_name for the existing file

      old_name. Raises a NotImplemented exception on

      platforms that do not support symbolic links.'
    - 
  - - 777
    - File#symlink?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:47.777809'
    - '2013-06-25 06:12:04.700126'
    - Returns true if the named file is a symbolic link.
    - 
  - - 778
    - File#truncate(file_name, integer) =>0
    - 33
    - '2013-06-22 13:39:48.248735'
    - '2013-06-25 06:12:04.847419'
    - ! 'Truncates the file file_name to be at most integer bytes

      long. Not available on all platforms.'
    - 
  - - 779
    - File#umask() =>integer
    - 33
    - '2013-06-22 13:39:48.862019'
    - '2013-06-25 06:12:04.994210'
    - 
    - 
  - - 780
    - File#umask(integer) =>integer
    - 33
    - '2013-06-22 13:39:49.464883'
    - '2013-06-25 06:12:05.306192'
    - ! 'Returns the current umask value for this process. If the optional argument

      is given, set the umask to that value and return the previous value. Umask

      values are subtracted from the default permissions, so a umask of

      0222 would make a file read-only for everyone.'
    - 
  - - 781
    - File#unlink(file_name, ...) =>integer
    - 33
    - '2013-06-22 13:39:50.067149'
    - '2013-06-25 06:12:05.463020'
    - ! 'Deletes the named files, returning the number of names passed as arguments.

      Raises an exception on any error. See also Dir::rmdir.'
    - 
  - - 782
    - File#utime(atime, mtime, file_name,...) =>integer
    - 33
    - '2013-06-22 13:39:50.515972'
    - '2013-06-25 06:12:05.619801'
    - ! 'Sets the access and modification times of each named file to the first two

      arguments. Returns the number of file names in the argument list.'
    - 
  - - 783
    - File#world_readable?(file_name) =>fixnum or nil
    - 33
    - '2013-06-22 13:39:50.908166'
    - '2013-06-25 06:12:05.777050'
    - ! 'If file_name is readable by others, returns an integer

      representing the file permission bits of file_name. Returns

      nil otherwise. The meaning of the bits is platform dependent;

      on Unix systems, see stat(2).'
    - 
  - - 784
    - File#world_writable?(file_name) =>fixnum or nil
    - 33
    - '2013-06-22 13:39:51.533134'
    - '2013-06-25 06:12:05.934048'
    - ! 'If file_name is writable by others, returns an integer

      representing the file permission bits of file_name. Returns

      nil otherwise. The meaning of the bits is platform dependent;

      on Unix systems, see stat(2).'
    - 
  - - 785
    - File#writable?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:51.990743'
    - '2013-06-25 06:12:06.079253'
    - ! 'Returns true if the named file is writable by the effective

      user id of this process.'
    - 
  - - 786
    - File#writable_real?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:52.606695'
    - '2013-06-25 06:12:06.227131'
    - ! 'Returns true if the named file is writable by the real user id

      of this process.'
    - 
  - - 787
    - File#zero?(file_name) =>true or false
    - 33
    - '2013-06-22 13:39:53.220939'
    - '2013-06-25 06:12:06.417281'
    - Returns true if the named file exists and has a zero size.
    - 
  - - 788
    - File#atime =>time
    - 33
    - '2013-06-22 13:39:53.822488'
    - '2013-06-25 06:12:06.707759'
    - Returns the last access time (a Time object)
    - 
  - - 789
    - File#chmod(mode_int) =>0
    - 33
    - '2013-06-22 13:39:54.402959'
    - '2013-06-25 06:12:07.031628'
    - ! 'Changes permission bits on file to the bit pattern represented by

      mode_int. Actual effects are platform dependent; on Unix systems,

      see chmod(2) for details. Follows symbolic links. Also see

      File#lchmod.'
    - 
  - - 790
    - File#chown(owner_int, group_int ) =>0
    - 33
    - '2013-06-22 13:39:54.993777'
    - '2013-06-25 06:12:07.332792'
    - ! 'Changes the owner and group of file to the given numeric owner and

      group id’s. Only a process with superuser privileges may change the owner

      of a file. The current owner of a file may change the file’s group to any

      group to which the owner belongs. A nil or -1 owner or group

      id is ignored. Follows symbolic links. See also File#lchown.'
    - 
  - - 791
    - File#ctime =>time
    - 33
    - '2013-06-22 13:39:55.754099'
    - '2013-06-25 06:12:07.633732'
    - ! 'Returns the change time for file (that is, the time directory

      information about the file was changed, not the file itself).'
    - 
  - - 792
    - File#flock(locking_constant) =>0 or false
    - 33
    - '2013-06-22 13:39:56.244816'
    - '2013-06-25 06:12:07.780139'
    - ! 'Locks or unlocks a file according to locking_constant (a logical

      or of the values in the table below). Returns false

      if File::LOCK_NB is specified and the operation would

      otherwise have blocked. Not available on all platforms.'
    - 
  - - 793
    - File#lstat =>stat
    - 33
    - '2013-06-22 13:39:56.592237'
    - '2013-06-25 06:12:08.069459'
    - ! 'Same as IO#stat, but does not follow the last symbolic link.

      Instead, reports on the link itself.'
    - 
  - - 794
    - File#mtime =>time
    - 33
    - '2013-06-22 13:39:56.905150'
    - '2013-06-25 06:12:08.359893'
    - Returns the modification time for file.
    - 
  - - 795
    - File#path =>filename
    - 33
    - '2013-06-22 13:39:57.230059'
    - '2013-06-25 06:12:08.685118'
    - 
    - 
  - - 796
    - File#to_path =>filename
    - 33
    - '2013-06-22 13:39:57.568227'
    - '2013-06-25 06:12:08.986642'
    - ! 'Returns the pathname used to create file as a string. Does not

      normalize the name.'
    - 
  - - 797
    - File#size =>integer
    - 33
    - '2013-06-22 13:39:57.893145'
    - '2013-06-25 06:12:09.288339'
    - Returns the size of file in bytes.
    - 
  - - 798
    - File#to_path =>filename
    - 33
    - '2013-06-22 13:39:58.217809'
    - '2013-06-25 06:12:09.578981'
    - 
    - 
  - - 799
    - File#truncate(integer) =>0
    - 33
    - '2013-06-22 13:39:58.542495'
    - '2013-06-25 06:12:09.868753'
    - ! 'Truncates file to at most integer bytes. The file must be

      opened for writing. Not available on all platforms.'
    - 
  - - 800
    - Enumerable#all? [{ |obj| block } ] =>true or false
    - 23
    - '2013-06-22 13:41:58.022152'
    - '2013-06-25 06:12:10.159436'
    - ! 'Passes each element of the collection to the given block. The method

      returns true if the block never returns false or

      nil. If the block is not given, Ruby adds an implicit block of

      { |obj| obj } which will cause all? to return true

      when none of the collection members are false or

      nil.'
    - 
  - - 801
    - Enumerable#any? [{ |obj| block }] =>true or false
    - 23
    - '2013-06-22 13:41:58.406677'
    - '2013-06-25 06:12:10.460800'
    - ! 'Passes each element of the collection to the given block. The method

      returns true if the block ever returns a value other than

      false or nil. If the block is not given, Ruby

      adds an implicit block of { |obj| obj } that will cause any? to return true

      if at least one of the collection members is not false or

      nil.'
    - 
  - - 802
    - Enumerable#chunk { |elt| ... } =>an_enumerator
    - 23
    - '2013-06-22 13:41:58.764403'
    - '2013-06-25 06:12:10.772892'
    - 
    - 
  - - 803
    - Enumerable#chunk(initial_state) { |elt, state| ... } =>an_enumerator
    - 23
    - '2013-06-22 13:41:59.078170'
    - '2013-06-25 06:12:11.087393'
    - ! 'Enumerates over the items, chunking them together based on the return value

      of the block.'
    - 
  - - 804
    - Enumerable#collect { |obj| block } =>array
    - 23
    - '2013-06-22 13:41:59.404683'
    - '2013-06-25 06:12:11.387715'
    - 
    - 
  - - 805
    - Enumerable#collect =>an_enumerator
    - 23
    - '2013-06-22 13:41:59.729776'
    - '2013-06-25 06:12:11.736680'
    - ! 'Returns a new array with the results of running block once for

      every element in enum.'
    - 
  - - 806
    - Enumerable#collect_concat { |obj| block } =>array
    - 23
    - '2013-06-22 13:42:00.099287'
    - '2013-06-25 06:12:11.890677'
    - 
    - 
  - - 807
    - Enumerable#collect_concat =>an_enumerator
    - 23
    - '2013-06-22 13:42:00.424048'
    - '2013-06-25 06:12:12.191923'
    - ! 'Returns a new array with the concatenated results of running block

      once for every element in enum.'
    - 
  - - 808
    - Enumerable#count =>int
    - 23
    - '2013-06-22 13:42:00.739374'
    - '2013-06-25 06:12:12.482416'
    - 
    - 
  - - 809
    - Enumerable#count(item) =>int
    - 23
    - '2013-06-22 13:42:01.086160'
    - '2013-06-25 06:12:12.783686'
    - 
    - 
  - - 810
    - Enumerable#count { |obj| block } =>int
    - 23
    - '2013-06-22 13:42:01.421589'
    - '2013-06-25 06:12:13.095807'
    - ! 'Returns the number of items in enum through enumeration. If an

      argument is given, the number of items in enum that are equal

      to item are counted.  If a block is given, it counts the

      number of elements yielding a true value.'
    - 
  - - 811
    - Enumerable#cycle(n=nil) { |obj| block } =>nil
    - 23
    - '2013-06-22 13:42:01.747049'
    - '2013-06-25 06:12:13.264198'
    - 
    - 
  - - 812
    - Enumerable#cycle(n=nil) =>an_enumerator
    - 23
    - '2013-06-22 13:42:02.082561'
    - '2013-06-25 06:12:13.567238'
    - ! "Calls block for each element of enum repeatedly\nn times or forever if none
      or nil is given.  If a\nnon-positive number is given or the collection is empty,
      does nothing. \nReturns nil if the loop has finished without getting\ninterrupted."
    - 
  - - 813
    - Enumerable#detect(ifnone = nil) { |obj| block } =>obj or nil
    - 23
    - '2013-06-22 13:42:02.398181'
    - '2013-06-25 06:12:13.868092'
    - 
    - 
  - - 814
    - Enumerable#detect(ifnone = nil) =>an_enumerator
    - 23
    - '2013-06-22 13:42:02.723096'
    - '2013-06-25 06:12:14.158689'
    - ! 'Passes each entry in enum to block. Returns the first for

      which block is not false.  If no object matches, calls

      ifnone and returns its result when it is specified, or returns

      nil otherwise.'
    - 
  - - 815
    - Enumerable#drop(n) =>array
    - 23
    - '2013-06-22 13:42:03.026275'
    - '2013-06-25 06:12:14.460319'
    - ! 'Drops first n elements from enum, and returns rest elements in an

      array.'
    - 
  - - 816
    - Enumerable#drop_while { |arr| block } =>array
    - 23
    - '2013-06-22 13:42:03.360967'
    - '2013-06-25 06:12:14.750314'
    - 
    - 
  - - 817
    - Enumerable#drop_while =>an_enumerator
    - 23
    - '2013-06-22 13:42:03.777238'
    - '2013-06-25 06:12:15.052091'
    - ! 'Drops elements up to, but not including, the first element for which the

      block returns nil or false and returns an array

      containing the remaining elements.'
    - 
  - - 818
    - Enumerable#each_cons(n) { ... } =>nil
    - 23
    - '2013-06-22 13:42:04.101629'
    - '2013-06-25 06:12:15.363807'
    - 
    - 
  - - 819
    - Enumerable#each_cons(n) =>an_enumerator
    - 23
    - '2013-06-22 13:42:04.450159'
    - '2013-06-25 06:12:15.654157'
    - ! "Iterates the given block for each array of consecutive <n> elements. \nIf
      no block is given, returns an enumerator."
    - 
  - - 820
    - Enumerable#each_entry { |obj| block } =>enum
    - 23
    - '2013-06-22 13:42:04.796425'
    - '2013-06-25 06:12:15.957406'
    - 
    - 
  - - 821
    - Enumerable#each_entry =>an_enumerator
    - 23
    - '2013-06-22 13:42:05.123818'
    - '2013-06-25 06:12:16.247403'
    - ! 'Calls block once for each element in self, passing

      that element as a parameter, converting multiple values from yield to an

      array.'
    - 
  - - 822
    - Enumerable#each_slice(n) { ... } =>nil
    - 23
    - '2013-06-22 13:42:05.414530'
    - '2013-06-25 06:12:16.393690'
    - 
    - 
  - - 823
    - Enumerable#each_slice(n) =>an_enumerator
    - 23
    - '2013-06-22 13:42:05.739939'
    - '2013-06-25 06:12:16.672987'
    - ! 'Iterates the given block for each slice of <n> elements.  If no block

      is given, returns an enumerator.'
    - 
  - - 824
    - Enumerable#each_with_index(*args) { |obj, i| block } =>enum
    - 23
    - '2013-06-22 13:42:06.063928'
    - '2013-06-25 06:12:17.129483'
    - 
    - 
  - - 825
    - Enumerable#each_with_index(*args) =>an_enumerator
    - 23
    - '2013-06-22 13:42:06.378002'
    - '2013-06-25 06:12:17.431032'
    - ! 'Calls block with two arguments, the item and its index, for each

      item in enum.  Given arguments are passed through to each().'
    - 
  - - 826
    - Enumerable#each_with_object(obj) { |(*args), memo_obj| ... } =>obj
    - 23
    - '2013-06-22 13:42:06.671247'
    - '2013-06-25 06:12:17.621068'
    - 
    - 
  - - 827
    - Enumerable#each_with_object(obj) =>an_enumerator
    - 23
    - '2013-06-22 13:42:06.994731'
    - '2013-06-25 06:12:17.778532'
    - ! 'Iterates the given block for each element with an arbitrary object given,

      and returns the initially given object.'
    - 
  - - 828
    - Enumerable#entries =>array
    - 23
    - '2013-06-22 13:42:07.319516'
    - '2013-06-25 06:12:18.079146'
    - Returns an array containing the items in enum.
    - 
  - - 829
    - Enumerable#find(ifnone = nil) { |obj| block } =>obj or nil
    - 23
    - '2013-06-22 13:42:07.633367'
    - '2013-06-25 06:12:18.394547'
    - 
    - 
  - - 830
    - Enumerable#find(ifnone = nil) =>an_enumerator
    - 23
    - '2013-06-22 13:42:07.946570'
    - '2013-06-25 06:12:18.695979'
    - ! 'Passes each entry in enum to block. Returns the first for

      which block is not false.  If no object matches, calls

      ifnone and returns its result when it is specified, or returns

      nil otherwise.'
    - 
  - - 831
    - Enumerable#find_all { |obj| block } =>array
    - 23
    - '2013-06-22 13:42:08.273254'
    - '2013-06-25 06:12:19.029826'
    - 
    - 
  - - 832
    - Enumerable#find_all =>an_enumerator
    - 23
    - '2013-06-22 13:42:08.609288'
    - '2013-06-25 06:12:19.341886'
    - ! 'Returns an array containing all elements of enum for which the

      given block returns a true value.'
    - 
  - - 833
    - Enumerable#find_index(value) =>int or nil
    - 23
    - '2013-06-22 13:42:08.944944'
    - '2013-06-25 06:12:19.509713'
    - 
    - 
  - - 834
    - Enumerable#find_index { |obj| block } =>int or nil
    - 23
    - '2013-06-22 13:42:09.270053'
    - '2013-06-25 06:12:19.812427'
    - 
    - 
  - - 835
    - Enumerable#find_index =>an_enumerator
    - 23
    - '2013-06-22 13:42:09.585220'
    - '2013-06-25 06:12:20.112394'
    - ! 'Compares each entry in enum with value or passes to

      block.  Returns the index for the first for which the evaluated

      value is non-false.  If no object matches, returns nil'
    - 
  - - 836
    - Enumerable#first =>obj or nil
    - 23
    - '2013-06-22 13:42:09.910376'
    - '2013-06-25 06:12:20.424947'
    - 
    - 
  - - 837
    - Enumerable#first(n) =>an_array
    - 23
    - '2013-06-22 13:42:10.245984'
    - '2013-06-25 06:12:20.705564'
    - ! 'Returns the first element, or the first n elements, of the

      enumerable. If the enumerable is empty, the first form returns

      nil, and the second form returns an empty array.'
    - 
  - - 838
    - Enumerable#flat_map { |obj| block } =>array
    - 23
    - '2013-06-22 13:42:10.649649'
    - '2013-06-25 06:12:21.018776'
    - 
    - 
  - - 839
    - Enumerable#flat_map =>an_enumerator
    - 23
    - '2013-06-22 13:42:10.964031'
    - '2013-06-25 06:12:21.186120'
    - ! 'Returns a new array with the concatenated results of running block

      once for every element in enum.'
    - 
  - - 840
    - Enumerable#grep(pattern) =>array
    - 23
    - '2013-06-22 13:42:11.299595'
    - '2013-06-25 06:12:21.509884'
    - 
    - 
  - - 841
    - Enumerable#grep(pattern) { |obj| block } =>array
    - 23
    - '2013-06-22 13:42:11.613262'
    - '2013-06-25 06:12:22.111871'
    - ! 'Returns an array of every element in enum for which Pattern

      === element. If the optional block is supplied, each

      matching element is passed to it, and the block’s result is stored in the

      output array.'
    - 
  - - 842
    - Enumerable#group_by { |obj| block } =>a_hash
    - 23
    - '2013-06-22 13:42:11.949127'
    - '2013-06-25 06:12:22.413057'
    - 
    - 
  - - 843
    - Enumerable#group_by =>an_enumerator
    - 23
    - '2013-06-22 13:42:12.262863'
    - '2013-06-25 06:12:22.582003'
    - ! 'Groups the collection by result of the block.  Returns a hash where the

      keys are the evaluated result from the block and the values are arrays of

      elements in the collection that correspond to the key.'
    - 
  - - 844
    - Enumerable#include?(obj) =>true or false
    - 23
    - '2013-06-22 13:42:12.601004'
    - '2013-06-25 06:12:22.882130'
    - ! 'Returns true if any member of enum equals

      obj. Equality is tested using ==.'
    - 
  - - 845
    - Enumerable#inject(initial, sym) =>obj
    - 23
    - '2013-06-22 13:42:12.927210'
    - '2013-06-25 06:12:23.052774'
    - 
    - 
  - - 846
    - Enumerable#inject(sym) =>obj
    - 23
    - '2013-06-22 13:42:13.261508'
    - '2013-06-25 06:12:23.365678'
    - 
    - 
  - - 847
    - Enumerable#inject(initial) { |memo, obj| block } =>obj
    - 23
    - '2013-06-22 13:42:13.842420'
    - '2013-06-25 06:12:23.677403'
    - 
    - 
  - - 848
    - Enumerable#inject { |memo, obj| block } =>obj
    - 23
    - '2013-06-22 13:42:14.158010'
    - '2013-06-25 06:12:23.979331'
    - ! 'Combines all elements of enum by applying a binary operation,

      specified by a block or a symbol that names a method or operator.'
    - 
  - - 849
    - Enumerable#lazy =>lazy_enumerator
    - 23
    - '2013-06-22 13:42:14.494579'
    - '2013-06-25 06:12:24.136025'
    - ! 'Returns a lazy enumerator, whose methods map/collect,

      flat_map/collect_concat, select/find_all, reject, grep, zip, take, #take_while,
      drop, #drop_while, and cycle

      enumerate values only on an as-needed basis.  However, if a block is given

      to zip or cycle, values are enumerated immediately.'
    - 
  - - 850
    - Enumerable#map { |obj| block } =>array
    - 23
    - '2013-06-22 13:42:14.974066'
    - '2013-06-25 06:12:24.653284'
    - 
    - 
  - - 851
    - Enumerable#map =>an_enumerator
    - 23
    - '2013-06-22 13:42:15.277519'
    - '2013-06-25 06:12:24.827621'
    - ! 'Returns a new array with the results of running block once for

      every element in enum.'
    - 
  - - 852
    - Enumerable#max =>obj
    - 23
    - '2013-06-22 13:42:15.601101'
    - '2013-06-25 06:12:25.129357'
    - 
    - 
  - - 853
    - Enumerable#max { |a, b| block } =>obj
    - 23
    - '2013-06-22 13:42:16.105316'
    - '2013-06-25 06:12:25.410567'
    - ! 'Returns the object in enum with the maximum value. The first form

      assumes all objects implement Comparable; the second uses the

      block to return a <=> b.'
    - 
  - - 854
    - Enumerable#max_by { |obj| block } =>obj
    - 23
    - '2013-06-22 13:42:16.430509'
    - '2013-06-25 06:12:25.711662'
    - 
    - 
  - - 855
    - Enumerable#max_by =>an_enumerator
    - 23
    - '2013-06-22 13:42:16.732816'
    - '2013-06-25 06:12:26.013216'
    - ! 'Returns the object in enum that gives the maximum value from the

      given block.'
    - 
  - - 856
    - Enumerable#member?(obj) =>true or false
    - 23
    - '2013-06-22 13:42:17.201901'
    - '2013-06-25 06:12:26.181347'
    - ! 'Returns true if any member of enum equals

      obj. Equality is tested using ==.'
    - 
  - - 857
    - Enumerable#min =>obj
    - 23
    - '2013-06-22 13:42:17.539594'
    - '2013-06-25 06:12:26.483362'
    - 
    - 
  - - 858
    - Enumerable#min { |a, b| block } =>obj
    - 23
    - '2013-06-22 13:42:17.864528'
    - '2013-06-25 06:12:26.817196'
    - ! 'Returns the object in enum with the minimum value. The first form

      assumes all objects implement Comparable; the second uses the

      block to return a <=> b.'
    - 
  - - 859
    - Enumerable#min_by { |obj| block } =>obj
    - 23
    - '2013-06-22 13:42:18.456422'
    - '2013-06-25 06:12:27.119087'
    - 
    - 
  - - 860
    - Enumerable#min_by =>an_enumerator
    - 23
    - '2013-06-22 13:42:18.936766'
    - '2013-06-25 06:12:27.419909'
    - ! 'Returns the object in enum that gives the minimum value from the

      given block.'
    - 
  - - 861
    - Enumerable#minmax =>[min, max]
    - 23
    - '2013-06-22 13:42:19.529684'
    - '2013-06-25 06:12:27.723433'
    - 
    - 
  - - 862
    - Enumerable#minmax { |a, b| block } =>[min, max]
    - 23
    - '2013-06-22 13:42:20.154719'
    - '2013-06-25 06:12:28.024548'
    - ! 'Returns two elements array which contains the minimum and the maximum value

      in the enumerable.  The first form assumes all objects implement

      Comparable; the second uses the block to return a

      <=> b.'
    - 
  - - 863
    - Enumerable#minmax_by { |obj| block } =>[min, max]
    - 23
    - '2013-06-22 13:42:20.768072'
    - '2013-06-25 06:12:28.216582'
    - 
    - 
  - - 864
    - Enumerable#minmax_by =>an_enumerator
    - 23
    - '2013-06-22 13:42:21.392976'
    - '2013-06-25 06:12:28.416955'
    - ! 'Returns a two element array containing the objects in enum that

      correspond to the minimum and maximum values respectively from the given

      block.'
    - 
  - - 865
    - Enumerable#none? [{ |obj| block }] =>true or false
    - 23
    - '2013-06-22 13:42:22.051069'
    - '2013-06-25 06:12:28.717426'
    - ! 'Passes each element of the collection to the given block. The method

      returns true if the block never returns true for

      all elements. If the block is not given, none? will return

      true only if none of the collection members is true.'
    - 
  - - 866
    - Enumerable#one? [{ |obj| block }] =>true or false
    - 23
    - '2013-06-22 13:42:22.389144'
    - '2013-06-25 06:12:29.018581'
    - ! 'Passes each element of the collection to the given block. The method

      returns true if the block returns true exactly

      once. If the block is not given, one? will return

      true only if exactly one of the collection members is true.'
    - 
  - - 867
    - Enumerable#partition { |obj| block } =>[ true_array, false_array ]
    - 23
    - '2013-06-22 13:42:22.702889'
    - '2013-06-25 06:12:29.331118'
    - 
    - 
  - - 868
    - Enumerable#partition =>an_enumerator
    - 23
    - '2013-06-22 13:42:23.038415'
    - '2013-06-25 06:12:29.632771'
    - ! 'Returns two arrays, the first containing the elements of enum for

      which the block evaluates to true, the second containing the rest.'
    - 
  - - 869
    - Enumerable#reduce(initial, sym) =>obj
    - 23
    - '2013-06-22 13:42:23.385296'
    - '2013-06-25 06:12:29.789790'
    - 
    - 
  - - 870
    - Enumerable#reduce(sym) =>obj
    - 23
    - '2013-06-22 13:42:23.701116'
    - '2013-06-25 06:12:30.103505'
    - 
    - 
  - - 871
    - Enumerable#reduce(initial) { |memo, obj| block } =>obj
    - 23
    - '2013-06-22 13:42:24.026545'
    - '2013-06-25 06:12:30.416349'
    - 
    - 
  - - 872
    - Enumerable#reduce { |memo, obj| block } =>obj
    - 23
    - '2013-06-22 13:42:24.473923'
    - '2013-06-25 06:12:30.729052'
    - ! 'Combines all elements of enum by applying a binary operation,

      specified by a block or a symbol that names a method or operator.'
    - 
  - - 873
    - Enumerable#reject { |obj| block } =>array
    - 23
    - '2013-06-22 13:42:24.820645'
    - '2013-06-25 06:12:30.996660'
    - 
    - 
  - - 874
    - Enumerable#reject =>an_enumerator
    - 23
    - '2013-06-22 13:42:25.102334'
    - '2013-06-25 06:12:31.142591'
    - ! 'Returns an array for all elements of enum for which the given

      block returns false.'
    - 
  - - 875
    - Enumerable#reverse_each(*args) { |item| block } =>enum
    - 23
    - '2013-06-22 13:42:25.427285'
    - '2013-06-25 06:12:31.444138'
    - 
    - 
  - - 876
    - Enumerable#reverse_each(*args) =>an_enumerator
    - 23
    - '2013-06-22 13:42:25.773961'
    - '2013-06-25 06:12:31.745155'
    - Builds a temporary array and traverses that array in reverse order.
    - 
  - - 877
    - Enumerable#select { |obj| block } =>array
    - 23
    - '2013-06-22 13:42:26.098746'
    - '2013-06-25 06:12:32.046299'
    - 
    - 
  - - 878
    - Enumerable#select =>an_enumerator
    - 23
    - '2013-06-22 13:42:26.401119'
    - '2013-06-25 06:12:32.349948'
    - ! 'Returns an array containing all elements of enum for which the

      given block returns a true value.'
    - 
  - - 879
    - Enumerable#slice_before(pattern) =>an_enumerator
    - 23
    - '2013-06-22 13:42:27.061118'
    - '2013-06-25 06:12:32.506958'
    - 
    - 
  - - 880
    - Enumerable#slice_before { |elt| bool } =>an_enumerator
    - 23
    - '2013-06-22 13:42:27.408121'
    - '2013-06-25 06:12:32.807643'
    - 
    - 
  - - 881
    - Enumerable#slice_before(initial_state) { |elt, state| bool } =>an_enumerator
    - 23
    - '2013-06-22 13:42:27.888067'
    - '2013-06-25 06:12:33.098207'
    - ! 'Creates an enumerator for each chunked elements. The beginnings of chunks

      are defined by pattern and the block.'
    - 
  - - 882
    - Enumerable#sort =>array
    - 23
    - '2013-06-22 13:42:28.213299'
    - '2013-06-25 06:12:33.388328'
    - 
    - 
  - - 883
    - Enumerable#sort { |a, b| block } =>array
    - 23
    - '2013-06-22 13:42:28.550443'
    - '2013-06-25 06:12:33.545684'
    - ! 'Returns an array containing the items in enum sorted, either

      according to their own <=> method, or by using the

      results of the supplied block. The block should return -1, 0, or +1

      depending on the comparison between a and b. As of Ruby

      1.8, the method Enumerable#sort_by implements a built-in

      Schwartzian Transform, useful when key computation or comparison is

      expensive.'
    - 
  - - 884
    - Enumerable#sort_by { |obj| block } =>array
    - 23
    - '2013-06-22 13:42:29.041807'
    - '2013-06-25 06:12:33.836559'
    - 
    - 
  - - 885
    - Enumerable#sort_by =>an_enumerator
    - 23
    - '2013-06-22 13:42:29.366495'
    - '2013-06-25 06:12:34.025970'
    - ! 'Sorts enum using a set of keys generated by mapping the values in

      enum through the given block.'
    - 
  - - 886
    - Enumerable#take(n) =>array
    - 23
    - '2013-06-22 13:42:29.669155'
    - '2013-06-25 06:12:34.306845'
    - Returns first n elements from enum.
    - 
  - - 887
    - Enumerable#take_while { |arr| block } =>array
    - 23
    - '2013-06-22 13:42:30.173557'
    - '2013-06-25 06:12:34.452391'
    - 
    - 
  - - 888
    - Enumerable#take_while =>an_enumerator
    - 23
    - '2013-06-22 13:42:30.510425'
    - '2013-06-25 06:12:34.753780'
    - ! 'Passes elements to the block until the block returns nil or

      false, then stops iterating and returns an array of all prior

      elements.'
    - 
  - - 889
    - Enumerable#to_a =>array
    - 23
    - '2013-06-22 13:42:30.801216'
    - '2013-06-25 06:12:34.933308'
    - Returns an array containing the items in enum.
    - 
  - - 890
    - Enumerable#zip(arg, ...) =>an_array_of_array
    - 23
    - '2013-06-22 13:42:31.237562'
    - '2013-06-25 06:12:35.233763'
    - 
    - 
  - - 891
    - Enumerable#zip(arg, ...) { |arr| block } =>nil
    - 23
    - '2013-06-22 13:42:31.679418'
    - '2013-06-25 06:12:35.535163'
    - ! 'Takes one element from enum and merges corresponding elements from

      each args.  This generates a sequence of n-element

      arrays, where n is one more than the count of arguments.  The

      length of the resulting sequence will be enum#size.  If the

      size of any argument is less than enum#size, nil

      values are supplied. If a block is given, it is invoked for each output

      array, otherwise an array of arrays is returned.'
    - 
  - - 892
    - Fixnum#fix & integer =>integer_result
    - 37
    - '2013-06-22 13:43:05.824991'
    - '2013-06-25 06:12:35.692161'
    - Bitwise AND.
    - 
  - - 893
    - Fixnum#fix * numeric =>numeric_result
    - 37
    - '2013-06-22 13:43:06.307517'
    - '2013-06-25 06:12:36.004388'
    - ! 'Performs multiplication: the class of the resulting object depends on the

      class of numeric and on the magnitude of the result.'
    - 
  - - 894
    - Fixnum#fix ** numeric =>numeric_result
    - 37
    - '2013-06-22 13:43:06.927980'
    - '2013-06-25 06:12:36.328282'
    - ! 'Raises fix to the numeric power, which may be

      negative or fractional.'
    - 
  - - 895
    - Fixnum#fix + numeric =>numeric_result
    - 37
    - '2013-06-22 13:43:07.252872'
    - '2013-06-25 06:12:36.631154'
    - ! 'Performs addition: the class of the resulting object depends on the class

      of numeric and on the magnitude of the result.'
    - 
  - - 896
    - Fixnum#fix - numeric =>numeric_result
    - 37
    - '2013-06-22 13:43:07.599813'
    - '2013-06-25 06:12:36.899509'
    - ! 'Performs subtraction: the class of the resulting object depends on the

      class of numeric and on the magnitude of the result.'
    - 
  - - 897
    - Fixnum#-fix =>integer
    - 37
    - '2013-06-22 13:43:07.946525'
    - '2013-06-25 06:12:37.044391'
    - Negates fix (which might return a Bignum).
    - 
  - - 898
    - Fixnum#fix / numeric =>numeric_result
    - 37
    - '2013-06-22 13:43:08.249002'
    - '2013-06-25 06:12:37.234646'
    - ! 'Performs division: the class of the resulting object depends on the class

      of numeric and on the magnitude of the result.'
    - 
  - - 899
    - ! 'Fixnum#fix click to toggle source '
    - 37
    - '2013-06-22 13:43:08.553370'
    - '2013-06-25 03:51:41.469525'
    - ! 'Returns true if the value of fix is less than or

      equal to that of real.'
    - 
  - - 900
    - ! 'Fixnum#fix click to toggle source '
    - 37
    - '2013-06-22 13:43:08.900224'
    - '2013-06-23 06:51:58.107362'
    - 
    - 
  - - 901
    - ! 'Fixnum#fix click to toggle source '
    - 37
    - '2013-06-22 13:43:09.236022'
    - '2013-06-23 06:51:58.420116'
    - 
    - 
  - - 902
    - Fixnum#fix numeric =>-1, 0, +1 or nil
    - 37
    - '2013-06-22 13:43:09.549409'
    - '2013-06-25 06:12:37.536038'
    - ! 'Comparison—Returns -1, 0, +1 or nil depending on whether fix

      is less than, equal to, or greater than numeric. This is the

      basis for the tests in  Comparable.'
    - 
  - - 903
    - Fixnum#fix > real =>true or false
    - 37
    - '2013-06-22 13:43:09.853858'
    - '2013-06-25 06:12:37.837245'
    - ! 'Returns true if the value of fix is greater than

      that of real.'
    - 
  - - 904
    - Fixnum#fix >= real =>true or false
    - 37
    - '2013-06-22 13:43:10.189572'
    - '2013-06-25 06:12:38.160964'
    - ! 'Returns true if the value of fix is greater than

      or equal to that of real.'
    - 
  - - 905
    - Fixnum#fix >> count =>integer
    - 37
    - '2013-06-22 13:43:10.525835'
    - '2013-06-25 06:12:38.328557'
    - ! 'Shifts fix right count positions (left if count

      is negative).'
    - 
  - - 906
    - Fixnum#fix[n] =>0, 1
    - 37
    - '2013-06-22 13:43:10.840728'
    - '2013-06-25 06:12:38.629784'
    - ! 'Bit Reference—Returns the nth bit in the binary representation of

      fix, where fix is the least

      significant bit.'
    - 
  - - 907
    - Fixnum#fix ^ integer =>integer_result
    - 37
    - '2013-06-22 13:43:11.142869'
    - '2013-06-25 06:12:38.922824'
    - Bitwise EXCLUSIVE OR.
    - 
  - - 908
    - Fixnum#abs =>integer
    - 37
    - '2013-06-22 13:43:11.640903'
    - '2013-06-25 06:12:39.211982'
    - Returns the absolute value of fix.
    - 
  - - 909
    - Fixnum#div(numeric) =>integer
    - 37
    - '2013-06-22 13:43:11.971860'
    - '2013-06-25 06:12:39.513322'
    - ! 'Performs integer division: returns integer value.'
    - 
  - - 910
    - Fixnum#divmod(numeric) =>array
    - 37
    - '2013-06-22 13:43:12.340982'
    - '2013-06-25 06:12:39.670900'
    - See Numeric#divmod.
    - 
  - - 911
    - Fixnum#even? =>true or false
    - 37
    - '2013-06-22 13:43:12.732758'
    - '2013-06-25 06:12:39.982334'
    - Returns true if fix is an even number.
    - 
  - - 912
    - Fixnum#fdiv(numeric) =>float
    - 37
    - '2013-06-22 13:43:13.060202'
    - '2013-06-25 06:12:40.294654'
    - ! 'Returns the floating point result of dividing fix by

      numeric.'
    - 
  - - 913
    - Fixnum#magnitude =>integer
    - 37
    - '2013-06-22 13:43:13.383732'
    - '2013-06-25 06:12:40.595532'
    - Returns the absolute value of fix.
    - 
  - - 914
    - Fixnum#modulo(other) =>real
    - 37
    - '2013-06-22 13:43:13.697542'
    - '2013-06-25 06:12:40.907998'
    - ! 'Returns fix modulo other. See

      numeric.divmod for more information.'
    - 
  - - 915
    - Fixnum#odd? =>true or false
    - 37
    - '2013-06-22 13:43:14.000055'
    - '2013-06-25 06:12:41.209826'
    - Returns true if fix is an odd number.
    - 
  - - 916
    - Fixnum#size =>fixnum
    - 37
    - '2013-06-22 13:43:14.326586'
    - '2013-06-25 06:12:41.355118'
    - ! 'Returns the number of bytes in the machine representation of a

      Fixnum.'
    - 
  - - 917
    - Fixnum#next =>integer
    - 37
    - '2013-06-22 13:43:14.650894'
    - '2013-06-25 06:12:41.646974'
    - 
    - 
  - - 918
    - Fixnum#succ =>integer
    - 37
    - '2013-06-22 13:43:14.976043'
    - '2013-06-25 06:12:41.926119'
    - Returns the Integer equal to int + 1.
    - 
  - - 919
    - Fixnum#to_f =>float
    - 37
    - '2013-06-22 13:43:15.279137'
    - '2013-06-25 06:12:42.239323'
    - Converts fix to a Float.
    - 
  - - 920
    - Fixnum#to_s(base=10) =>string
    - 37
    - '2013-06-22 13:43:15.613875'
    - '2013-06-25 06:12:42.551167'
    - ! 'Returns a string containing the representation of fix radix

      base (between 2 and 36).'
    - 
  - - 921
    - Fixnum#zero? =>true or false
    - 37
    - '2013-06-22 13:43:15.940477'
    - '2013-06-25 06:12:42.718715'
    - Returns true if fix is zero.
    - 
  - - 922
    - Fixnum#fix | integer =>integer_result
    - 37
    - '2013-06-22 13:43:16.288038'
    - '2013-06-25 06:12:43.008979'
    - Bitwise OR.
    - 
  - - 923
    - Fixnum#~fix =>integer
    - 37
    - '2013-06-22 13:43:16.623945'
    - '2013-06-25 06:12:43.177870'
    - ! 'One’s complement: returns a number where each bit is flipped.'
    - 
  - - 924
    - Continuation#cont[args, ...]
    - 11
    - '2013-06-22 22:54:38.229364'
    - '2013-06-25 03:33:58.655916'
    - ! 'Invokes the continuation. The program continues from the end of the

      callcc block. If no arguments are given, the original

      callcc returns nil. If one argument is given,

      callcc returns it. Otherwise, an array containing

      args is returned.'
    - 
  - - 925
    - Continuation#call(args, ...)
    - 11
    - '2013-06-22 22:54:38.645603'
    - '2013-06-25 03:33:58.864404'
    - ! 'Invokes the continuation. The program continues from the end of the

      callcc block. If no arguments are given, the original

      callcc returns nil. If one argument is given,

      callcc returns it. Otherwise, an array containing

      args is returned.'
    - 
  - - 926
    - FalseClass#false & obj =>false
    - 30
    - '2013-06-22 22:55:12.188588'
    - '2013-06-25 06:12:43.367654'
    - 
    - 
  - - 927
    - FalseClass#nil & obj =>false
    - 30
    - '2013-06-22 22:55:12.535988'
    - '2013-06-25 06:12:43.523472'
    - ! 'And—Returns false. obj is always evaluated as it is

      the argument to a method call—there is no short-circuit evaluation in this

      case.'
    - 
  - - 928
    - FalseClass#false ^ obj =>true or false
    - 30
    - '2013-06-22 22:55:12.838594'
    - '2013-06-25 06:12:43.693363'
    - 
    - 
  - - 929
    - FalseClass#nil ^ obj =>true or false
    - 30
    - '2013-06-22 22:55:13.174292'
    - '2013-06-25 06:12:43.861008'
    - ! 'Exclusive Or—If obj is nil or false,

      returns false; otherwise, returns true.'
    - 
  - - 930
    - FalseClass#to_s =>"false"
    - 30
    - '2013-06-22 22:55:13.515254'
    - '2013-06-25 06:12:44.028708'
    - ‘nuf said…
    - 
  - - 931
    - FalseClass#false | obj =>true or false
    - 30
    - '2013-06-22 22:55:13.829135'
    - '2013-06-25 06:12:44.197071'
    - 
    - 
  - - 932
    - FalseClass#nil | obj =>true or false
    - 30
    - '2013-06-22 22:55:14.164961'
    - '2013-06-25 06:12:44.510540'
    - ! 'Or—Returns false if obj is nil or

      false; true otherwise.'
    - 
  - - 933
    - ! 'Comparable#obj click to toggle source '
    - 8
    - '2013-06-22 23:02:15.479338'
    - '2013-06-25 03:19:13.150410'
    - ! 'Compares two objects based on the receiver’s <=> method,

      returning true if it returns -1 or 0.'
    - 
  - - 934
    - ! 'Comparable#obj click to toggle source '
    - 8
    - '2013-06-22 23:02:15.828643'
    - '2013-06-23 06:52:04.355254'
    - 
    - 
  - - 935
    - Comparable#obj == other =>true or false
    - 8
    - '2013-06-22 23:02:16.164283'
    - '2013-06-25 06:12:44.677370'
    - ! 'Compares two objects based on the receiver’s <=> method,

      returning true if it returns 0. Also returns true if obj and

      other are the same object.'
    - 
  - - 936
    - Comparable#obj > other =>true or false
    - 8
    - '2013-06-22 23:02:16.478322'
    - '2013-06-25 06:12:44.812369'
    - ! 'Compares two objects based on the receiver’s <=> method,

      returning true if it returns 1.'
    - 
  - - 937
    - Comparable#obj >= other =>true or false
    - 8
    - '2013-06-22 23:02:16.813870'
    - '2013-06-25 06:12:44.958648'
    - ! 'Compares two objects based on the receiver’s <=> method,

      returning true if it returns 0 or 1.'
    - 
  - - 938
    - Comparable#between?(min, max) =>true or false
    - 8
    - '2013-06-22 23:02:17.150132'
    - '2013-06-25 06:12:45.103724'
    - ! 'Returns false if obj <=>

      min is less than zero or if anObject

      <=> max is greater than zero, true

      otherwise.'
    - 
  - - 939
    - Time#at(time) =>time
    - 110
    - '2013-06-22 23:02:54.540563'
    - '2013-06-25 06:12:45.273381'
    - 
    - 
  - - 940
    - Time#at(seconds_with_frac) =>time
    - 110
    - '2013-06-22 23:02:54.901507'
    - '2013-06-25 06:12:45.441037'
    - 
    - 
  - - 941
    - Time#at(seconds, microseconds_with_frac) =>time
    - 110
    - '2013-06-22 23:02:55.237489'
    - '2013-06-25 06:12:45.742262'
    - ! 'Creates a new Time object with the value given by

      time, the given number of seconds_with_frac, or

      seconds and microseconds_with_frac since the

      Epoch. seconds_with_frac and

      microseconds_with_frac can be an Integer, Float, Rational, or other Numeric.
      non-portable feature allows the offset to

      be negative on some systems.'
    - 
  - - 942
    - Time#gm(year) =>time
    - 110
    - '2013-06-22 23:02:55.584685'
    - '2013-06-25 06:12:45.898891'
    - 
    - 
  - - 943
    - Time#gm(year, month) =>time
    - 110
    - '2013-06-22 23:02:55.920687'
    - '2013-06-25 06:12:46.044740'
    - 
    - 
  - - 944
    - Time#gm(year, month, day) =>time
    - 110
    - '2013-06-22 23:02:56.247180'
    - '2013-06-25 06:12:46.180033'
    - 
    - 
  - - 945
    - Time#gm(year, month, day, hour) =>time
    - 110
    - '2013-06-22 23:02:56.583519'
    - '2013-06-25 06:12:46.325365'
    - 
    - 
  - - 946
    - Time#gm(year, month, day, hour, min) =>time
    - 110
    - '2013-06-22 23:02:56.919716'
    - '2013-06-25 06:12:46.470535'
    - 
    - 
  - - 947
    - Time#gm(year, month, day, hour, min, sec_with_frac) =>time
    - 110
    - '2013-06-22 23:02:57.255169'
    - '2013-06-25 06:12:46.771742'
    - 
    - 
  - - 948
    - Time#gm(year, month, day, hour, min, sec, usec_with_frac) =>time
    - 110
    - '2013-06-22 23:02:57.583388'
    - '2013-06-25 06:12:46.942073'
    - 
    - 
  - - 949
    - Time#gm(sec, min, hour, day, month, year, wday, yday, isdst, tz) =>time
    - 110
    - '2013-06-22 23:02:57.941093'
    - '2013-06-25 06:12:47.109734'
    - ! 'Creates a Time object based on given values,

      interpreted as UTC (GMT). The year must be specified. Other values default

      to the minimum value for that field (and may be nil or

      omitted). Months may be specified by numbers from 1 to 12, or by the

      three-letter English month names. Hours are specified on a 24-hour clock

      (0..23). Raises an ArgumentError if any

      values are out of range. Will also accept ten arguments in the order output

      by #to_a.'
    - 
  - - 950
    - Time#local(year) =>time
    - 110
    - '2013-06-22 23:02:58.254692'
    - '2013-06-25 06:12:47.277548'
    - 
    - 
  - - 951
    - Time#local(year, month) =>time
    - 110
    - '2013-06-22 23:02:58.590051'
    - '2013-06-25 06:12:47.434155'
    - 
    - 
  - - 952
    - Time#local(year, month, day) =>time
    - 110
    - '2013-06-22 23:02:58.903706'
    - '2013-06-25 06:12:47.568345'
    - 
    - 
  - - 953
    - Time#local(year, month, day, hour) =>time
    - 110
    - '2013-06-22 23:02:59.241644'
    - '2013-06-25 06:12:47.703048'
    - 
    - 
  - - 954
    - Time#local(year, month, day, hour, min) =>time
    - 110
    - '2013-06-22 23:02:59.544585'
    - '2013-06-25 06:12:47.982133'
    - 
    - 
  - - 955
    - Time#local(year, month, day, hour, min, sec_with_frac) =>time
    - 110
    - '2013-06-22 23:02:59.868724'
    - '2013-06-25 06:12:48.150257'
    - 
    - 
  - - 956
    - Time#local(year, month, day, hour, min, sec, usec_with_frac) =>time
    - 110
    - '2013-06-22 23:03:00.193603'
    - '2013-06-25 06:12:48.318153'
    - 
    - 
  - - 957
    - Time#local(sec, min, hour, day, month, year, wday, yday, isdst, tz) =>time
    - 110
    - '2013-06-22 23:03:00.531859'
    - '2013-06-25 06:12:48.476661'
    - ! 'Same as ::gm, but interprets the values

      in the local time zone.'
    - 
  - - 958
    - Time#mktime(year) =>time
    - 110
    - '2013-06-22 23:03:00.834242'
    - '2013-06-25 06:12:48.644378'
    - 
    - 
  - - 959
    - Time#mktime(year, month) =>time
    - 110
    - '2013-06-22 23:03:01.277769'
    - '2013-06-25 06:12:48.800994'
    - 
    - 
  - - 960
    - Time#mktime(year, month, day) =>time
    - 110
    - '2013-06-22 23:03:01.650593'
    - '2013-06-25 06:12:49.091348'
    - 
    - 
  - - 961
    - Time#mktime(year, month, day, hour) =>time
    - 110
    - '2013-06-22 23:03:01.989326'
    - '2013-06-25 06:12:49.226310'
    - 
    - 
  - - 962
    - Time#mktime(year, month, day, hour, min) =>time
    - 110
    - '2013-06-22 23:03:02.335982'
    - '2013-06-25 06:12:49.383108'
    - 
    - 
  - - 963
    - Time#mktime(year, month, day, hour, min, sec_with_frac) =>time
    - 110
    - '2013-06-22 23:03:02.649806'
    - '2013-06-25 06:12:49.550635'
    - 
    - 
  - - 964
    - Time#mktime(year, month, day, hour, min, sec, usec_with_frac) =>time
    - 110
    - '2013-06-22 23:03:02.975280'
    - '2013-06-25 06:12:49.718827'
    - 
    - 
  - - 965
    - Time#mktime(sec, min, hour, day, month, year, wday, yday, isdst, tz) =>time
    - 110
    - '2013-06-22 23:03:03.310300'
    - '2013-06-25 06:12:49.887319'
    - ! 'Same as ::gm, but interprets the values

      in the local time zone.'
    - 
  - - 966
    - Time#new =>time
    - 110
    - '2013-06-22 23:03:03.625728'
    - '2013-06-25 06:12:50.200452'
    - 
    - 
  - - 967
    - Time#new(year, month=nil, day=nil, hour=nil, min=nil, sec=nil, utc_offset=nil)
      =>time
    - 110
    - '2013-06-22 23:03:03.939383'
    - '2013-06-25 06:12:50.358214'
    - Returns a Time object.
    - 
  - - 968
    - Time#utc(year) =>time
    - 110
    - '2013-06-22 23:03:04.275389'
    - '2013-06-25 06:12:50.492390'
    - 
    - 
  - - 969
    - Time#utc(year, month) =>time
    - 110
    - '2013-06-22 23:03:04.645354'
    - '2013-06-25 06:12:50.637700'
    - 
    - 
  - - 970
    - Time#utc(year, month, day) =>time
    - 110
    - '2013-06-22 23:03:04.972197'
    - '2013-06-25 06:12:50.794558'
    - 
    - 
  - - 971
    - Time#utc(year, month, day, hour) =>time
    - 110
    - '2013-06-22 23:03:05.296781'
    - '2013-06-25 06:12:50.963209'
    - 
    - 
  - - 972
    - Time#utc(year, month, day, hour, min) =>time
    - 110
    - '2013-06-22 23:03:05.644072'
    - '2013-06-25 06:12:51.285588'
    - 
    - 
  - - 973
    - Time#utc(year, month, day, hour, min, sec_with_frac) =>time
    - 110
    - '2013-06-22 23:03:05.968875'
    - '2013-06-25 06:12:51.453626'
    - 
    - 
  - - 974
    - Time#utc(year, month, day, hour, min, sec, usec_with_frac) =>time
    - 110
    - '2013-06-22 23:03:06.262415'
    - '2013-06-25 06:12:51.610260'
    - 
    - 
  - - 975
    - Time#utc(sec, min, hour, day, month, year, wday, yday, isdst, tz) =>time
    - 110
    - '2013-06-22 23:03:06.609964'
    - '2013-06-25 06:12:51.791870'
    - ! 'Creates a Time object based on given values,

      interpreted as UTC (GMT). The year must be specified. Other values default

      to the minimum value for that field (and may be nil or

      omitted). Months may be specified by numbers from 1 to 12, or by the

      three-letter English month names. Hours are specified on a 24-hour clock

      (0..23). Raises an ArgumentError if any

      values are out of range. Will also accept ten arguments in the order output

      by #to_a.'
    - 
  - - 976
    - Time#time + numeric =>time
    - 110
    - '2013-06-22 23:03:06.945839'
    - '2013-06-25 06:12:51.925997'
    - ! 'Addition — Adds some number of seconds (possibly fractional) to

      time and returns that value as a new Time

      object.'
    - 
  - - 977
    - Time#time - other_time =>float
    - 110
    - '2013-06-22 23:03:07.270899'
    - '2013-06-25 06:12:52.082926'
    - 
    - 
  - - 978
    - Time#time - numeric =>time
    - 110
    - '2013-06-22 23:03:07.597537'
    - '2013-06-25 06:12:52.250793'
    - ! 'Difference — Returns a new Time object that

      represents the difference between time and

      other_time, or subtracts the given number of seconds in

      numeric from time.'
    - 
  - - 979
    - Time#time other_time =>-1, 0, +1 or nil
    - 110
    - '2013-06-22 23:03:07.944570'
    - '2013-06-25 06:12:52.563074'
    - Comparison—Compares time with other_time.
    - 
  - - 980
    - Time#asctime =>string
    - 110
    - '2013-06-22 23:03:08.280294'
    - '2013-06-25 06:12:52.730960'
    - Returns a canonical string representation of time.
    - 
  - - 981
    - Time#ctime =>string
    - 110
    - '2013-06-22 23:03:08.571915'
    - '2013-06-25 06:12:52.899543'
    - Returns a canonical string representation of time.
    - 
  - - 982
    - Time#day =>fixnum
    - 110
    - '2013-06-22 23:03:08.875976'
    - '2013-06-25 06:12:53.056272'
    - Returns the day of the month (1..n) for time.
    - 
  - - 983
    - Time#dst? =>true or false
    - 110
    - '2013-06-22 23:03:09.223098'
    - '2013-06-25 06:12:53.212187'
    - Returns true if time occurs during Daylight Saving Time in its time zone.
    - 
  - - 984
    - Time#eql?(other_time)
    - 110
    - '2013-06-22 23:03:09.536751'
    - '2013-06-25 05:13:00.443614'
    - ! 'Returns true if time and other_time are

      both Time objects with the same seconds and

      fractional seconds.'
    - 
  - - 985
    - Time#friday? =>true or false
    - 110
    - '2013-06-22 23:03:09.828251'
    - '2013-06-25 06:12:53.358154'
    - Returns true if time represents Friday.
    - 
  - - 986
    - Time#getgm =>new_time
    - 110
    - '2013-06-22 23:03:10.141408'
    - '2013-06-25 06:12:53.650260'
    - ! 'Returns a new Time object representing

      time in UTC.'
    - 
  - - 987
    - Time#getlocal =>new_time
    - 110
    - '2013-06-22 23:03:10.524330'
    - '2013-06-25 06:12:53.807246'
    - 
    - 
  - - 988
    - Time#getlocal(utc_offset) =>new_time
    - 110
    - '2013-06-22 23:03:10.826814'
    - '2013-06-25 06:12:53.974932'
    - ! 'Returns a new Time object representing

      time in local time (using the local time zone in effect for this

      process).'
    - 
  - - 989
    - Time#getutc =>new_time
    - 110
    - '2013-06-22 23:03:11.118301'
    - '2013-06-25 06:12:54.142627'
    - ! 'Returns a new Time object representing

      time in UTC.'
    - 
  - - 990
    - Time#gmt? =>true or false
    - 110
    - '2013-06-22 23:03:11.532007'
    - '2013-06-25 06:12:54.310080'
    - Returns true if time represents a time in UTC (GMT).
    - 
  - - 991
    - Time#gmt_offset =>fixnum
    - 110
    - '2013-06-22 23:03:11.869472'
    - '2013-06-25 06:12:54.479055'
    - ! 'Returns the offset in seconds between the timezone of time and

      UTC.'
    - 
  - - 992
    - Time#gmtime =>time
    - 110
    - '2013-06-22 23:03:12.161218'
    - '2013-06-25 06:12:54.790708'
    - Converts time to UTC (GMT), modifying the receiver.
    - 
  - - 993
    - Time#gmtoff =>fixnum
    - 110
    - '2013-06-22 23:03:12.463367'
    - '2013-06-25 06:12:54.936269'
    - ! 'Returns the offset in seconds between the timezone of time and

      UTC.'
    - 
  - - 994
    - Time#hash =>fixnum
    - 110
    - '2013-06-22 23:03:12.810876'
    - '2013-06-25 06:12:55.071479'
    - Returns a hash code for this Time object.
    - 
  - - 995
    - Time#hour =>fixnum
    - 110
    - '2013-06-22 23:03:13.157913'
    - '2013-06-25 06:12:55.229437'
    - Returns the hour of the day (0..23) for time.
    - 
  - - 996
    - Time#inspect =>string
    - 110
    - '2013-06-22 23:03:13.451189'
    - '2013-06-25 06:12:55.398233'
    - ! 'Returns a string representing time. Equivalent to calling strftime with the
      appropriate format

      string.'
    - 
  - - 997
    - Time#isdst =>true or false
    - 110
    - '2013-06-22 23:03:13.775874'
    - '2013-06-25 06:12:55.565457'
    - Returns true if time occurs during Daylight Saving Time in its time zone.
    - 
  - - 998
    - Time#localtime =>time
    - 110
    - '2013-06-22 23:03:14.123107'
    - '2013-06-25 06:12:55.877570'
    - 
    - 
  - - 999
    - Time#localtime(utc_offset) =>time
    - 110
    - '2013-06-22 23:03:14.460084'
    - '2013-06-25 06:12:56.034707'
    - ! 'Converts time to local time (using the local time zone in effect

      for this process) modifying the receiver.'
    - 
  - - 1000
    - Time#mday =>fixnum
    - 110
    - '2013-06-22 23:03:14.763445'
    - '2013-06-25 06:12:56.217582'
    - Returns the day of the month (1..n) for time.
    - 
  - - 1001
    - Time#min =>fixnum
    - 110
    - '2013-06-22 23:03:15.110616'
    - '2013-06-25 06:12:56.359923'
    - Returns the minute of the hour (0..59) for time.
    - 
  - - 1002
    - Time#mon =>fixnum
    - 110
    - '2013-06-22 23:03:15.457466'
    - '2013-06-25 06:12:56.504525'
    - 
    - 
  - - 1003
    - Time#month =>fixnum
    - 110
    - '2013-06-22 23:03:15.782403'
    - '2013-06-25 06:12:56.650575'
    - Returns the month of the year (1..12) for time.
    - 
  - - 1004
    - Time#monday? =>true or false
    - 110
    - '2013-06-22 23:03:16.120078'
    - '2013-06-25 06:12:57.165043'
    - Returns true if time represents Monday.
    - 
  - - 1005
    - Time#month =>fixnum
    - 110
    - '2013-06-22 23:03:16.466924'
    - '2013-06-25 06:12:57.334174'
    - 
    - 
  - - 1006
    - Time#nsec =>int
    - 110
    - '2013-06-22 23:03:16.813981'
    - '2013-06-25 06:12:57.602119'
    - Returns the number of nanoseconds for time.
    - 
  - - 1007
    - Time#round([ndigits]) =>new_time
    - 110
    - '2013-06-22 23:03:17.138489'
    - '2013-06-25 06:12:57.892030'
    - ! 'Rounds sub seconds to a given precision in decimal digits (0 digits by

      default). It returns a new Time object.

      ndigits should be zero or positive integer.'
    - 
  - - 1008
    - Time#saturday? =>true or false
    - 110
    - '2013-06-22 23:03:17.418763'
    - '2013-06-25 06:12:58.159932'
    - Returns true if time represents Saturday.
    - 
  - - 1009
    - Time#sec =>fixnum
    - 110
    - '2013-06-22 23:03:17.756348'
    - '2013-06-25 06:12:58.305324'
    - Returns the second of the minute (0..60) for time.
    - 
  - - 1010
    - Time#strftime( string ) =>string
    - 110
    - '2013-06-22 23:03:18.081608'
    - '2013-06-25 06:12:58.606712'
    - ! 'Formats time according to the directives in the given format

      string.'
    - 
  - - 1011
    - Time#subsec =>number
    - 110
    - '2013-06-22 23:03:18.383633'
    - '2013-06-25 06:12:58.919114'
    - Returns the fraction for time.
    - 
  - - 1012
    - Time#succ =>new_time
    - 110
    - '2013-06-22 23:03:18.820047'
    - '2013-06-25 06:12:59.211163'
    - ! 'Returns a new Time object, one second later than

      time. #succ is obsolete

      since 1.9.2 for time is not a discrete value.'
    - 
  - - 1013
    - Time#sunday? =>true or false
    - 110
    - '2013-06-22 23:03:19.157774'
    - '2013-06-25 06:12:59.391229'
    - Returns true if time represents Sunday.
    - 
  - - 1014
    - Time#thursday? =>true or false
    - 110
    - '2013-06-22 23:03:19.493459'
    - '2013-06-25 06:12:59.669111'
    - Returns true if time represents Thursday.
    - 
  - - 1015
    - Time#to_a =>array
    - 110
    - '2013-06-22 23:03:19.818051'
    - '2013-06-25 06:12:59.814745'
    - ! 'Returns a ten-element array of values for time:'
    - 
  - - 1016
    - Time#to_f =>float
    - 110
    - '2013-06-22 23:03:20.131970'
    - '2013-06-25 06:13:00.094699'
    - ! 'Returns the value of time as a floating point number of seconds

      since the Epoch.'
    - 
  - - 1017
    - Time#to_i =>int
    - 110
    - '2013-06-22 23:03:20.467717'
    - '2013-06-25 06:13:00.394948'
    - ! 'Returns the value of time as an integer number of seconds since

      the Epoch.'
    - 
  - - 1018
    - Time#to_r =>a_rational
    - 110
    - '2013-06-22 23:03:20.950077'
    - '2013-06-25 06:13:00.685449'
    - ! 'Returns the value of time as a rational number of seconds since

      the Epoch.'
    - 
  - - 1019
    - Time#to_s =>string
    - 110
    - '2013-06-22 23:03:21.263645'
    - '2013-06-25 06:13:00.997711'
    - ! 'Returns a string representing time. Equivalent to calling strftime with the
      appropriate format

      string.'
    - 
  - - 1020
    - Time#tuesday? =>true or false
    - 110
    - '2013-06-22 23:03:21.565824'
    - '2013-06-25 06:13:01.298798'
    - Returns true if time represents Tuesday.
    - 
  - - 1021
    - Time#tv_nsec =>int
    - 110
    - '2013-06-22 23:03:21.913022'
    - '2013-06-25 06:13:01.613188'
    - Returns the number of nanoseconds for time.
    - 
  - - 1022
    - Time#tv_sec =>int
    - 110
    - '2013-06-22 23:03:22.395732'
    - '2013-06-25 06:13:01.925756'
    - ! 'Returns the value of time as an integer number of seconds since

      the Epoch.'
    - 
  - - 1023
    - Time#tv_usec =>int
    - 110
    - '2013-06-22 23:03:22.687160'
    - '2013-06-25 06:13:02.215438'
    - Returns the number of microseconds for time.
    - 
  - - 1024
    - Time#usec =>int
    - 110
    - '2013-06-22 23:03:23.023219'
    - '2013-06-25 06:13:02.506405'
    - Returns the number of microseconds for time.
    - 
  - - 1025
    - Time#gmtime =>time
    - 110
    - '2013-06-22 23:03:23.525885'
    - '2013-06-25 06:13:02.807459'
    - 
    - 
  - - 1026
    - Time#utc =>time
    - 110
    - '2013-06-22 23:03:23.841838'
    - '2013-06-25 06:13:03.119909'
    - Converts time to UTC (GMT), modifying the receiver.
    - 
  - - 1027
    - Time#utc? =>true or false
    - 110
    - '2013-06-22 23:03:24.144015'
    - '2013-06-25 06:13:03.576164'
    - Returns true if time represents a time in UTC (GMT).
    - 
  - - 1028
    - Time#utc_offset =>fixnum
    - 110
    - '2013-06-22 23:03:24.646781'
    - '2013-06-25 06:13:03.888602'
    - ! 'Returns the offset in seconds between the timezone of time and

      UTC.'
    - 
  - - 1029
    - Time#wday =>fixnum
    - 110
    - '2013-06-22 23:03:24.983572'
    - '2013-06-25 06:13:04.211632'
    - ! 'Returns an integer representing the day of the week, 0..6, with Sunday ==

      0.'
    - 
  - - 1030
    - Time#wednesday? =>true or false
    - 110
    - '2013-06-22 23:03:25.298477'
    - '2013-06-25 06:13:04.514289'
    - Returns true if time represents Wednesday.
    - 
  - - 1031
    - Time#yday =>fixnum
    - 110
    - '2013-06-22 23:03:25.767732'
    - '2013-06-25 06:13:04.682783'
    - Returns an integer representing the day of the year, 1..366.
    - 
  - - 1032
    - Time#year =>fixnum
    - 110
    - '2013-06-22 23:03:26.114690'
    - '2013-06-25 06:13:04.983635'
    - Returns the year for time (including the century).
    - 
  - - 1033
    - Time#zone =>string
    - 110
    - '2013-06-22 23:03:26.417102'
    - '2013-06-25 06:13:05.262948'
    - ! 'Returns the name of the time zone used for time. As of Ruby 1.8,

      returns “UTC” rather than “GMT” for UTC times.'
    - 
  - - 1034
    - Integer#ceil =>integer
    - 54
    - '2013-06-22 23:04:00.733418'
    - '2013-06-25 06:13:05.563927'
    - ! 'As int is already an Integer, all these methods

      simply return the receiver.'
    - 
  - - 1035
    - Integer#chr([encoding]) =>string
    - 54
    - '2013-06-22 23:04:01.197600'
    - '2013-06-25 06:13:05.865275'
    - ! 'Returns a string containing the character represented by the receiver’s

      value according to encoding.'
    - 
  - - 1036
    - Integer#denominator =>1
    - 54
    - '2013-06-22 23:04:01.567162'
    - '2013-06-25 06:13:06.189678'
    - Returns 1.
    - 
  - - 1037
    - Integer#downto(limit) {|i| block } =>self
    - 54
    - '2013-06-22 23:04:01.915876'
    - '2013-06-25 06:13:06.478789'
    - 
    - 
  - - 1038
    - Integer#downto(limit) =>an_enumerator
    - 54
    - '2013-06-22 23:04:02.251731'
    - '2013-06-25 06:13:06.803375'
    - ! 'Iterates block, passing decreasing values from int down

      to and including limit.'
    - 
  - - 1039
    - Integer#even? =>true or false
    - 54
    - '2013-06-22 23:04:02.576273'
    - '2013-06-25 06:13:07.103573'
    - Returns true if int is an even number.
    - 
  - - 1040
    - Integer#floor =>integer
    - 54
    - '2013-06-22 23:04:02.878906'
    - '2013-06-25 06:13:07.407064'
    - ! 'As int is already an Integer, all these methods

      simply return the receiver.'
    - 
  - - 1041
    - Integer#gcd(int2) =>integer
    - 54
    - '2013-06-22 23:04:03.214984'
    - '2013-06-25 06:13:07.707952'
    - ! 'Returns the greatest common divisor (always positive).  0.gcd(x) and

      x.gcd(0) return abs(x).'
    - 
  - - 1042
    - Integer#gcdlcm(int2) =>array
    - 54
    - '2013-06-22 23:04:03.552365'
    - '2013-06-25 06:13:08.164887'
    - Returns an array; [int.gcd(int2), int.lcm(int2)].
    - 
  - - 1043
    - Integer#integer? =>true
    - 54
    - '2013-06-22 23:04:03.888651'
    - '2013-06-25 06:13:08.477818'
    - Always returns true.
    - 
  - - 1044
    - Integer#lcm(int2) =>integer
    - 54
    - '2013-06-22 23:04:04.191090'
    - '2013-06-25 06:13:08.790392'
    - ! 'Returns the least common multiple (always positive).  0.lcm(x) and x.lcm(0)

      return zero.'
    - 
  - - 1045
    - Integer#next =>integer
    - 54
    - '2013-06-22 23:04:04.549835'
    - '2013-06-25 06:13:09.068626'
    - Returns the Integer equal to int + 1.
    - 
  - - 1046
    - Integer#numerator =>self
    - 54
    - '2013-06-22 23:04:05.220625'
    - '2013-06-25 06:13:09.369994'
    - Returns self.
    - 
  - - 1047
    - Integer#odd? =>true or false
    - 54
    - '2013-06-22 23:04:05.545163'
    - '2013-06-25 06:13:09.793200'
    - Returns true if int is an odd number.
    - 
  - - 1048
    - Integer#ord =>self
    - 54
    - '2013-06-22 23:04:05.858864'
    - '2013-06-25 06:13:09.971998'
    - Returns the int itself.
    - 
  - - 1049
    - Integer#pred =>integer
    - 54
    - '2013-06-22 23:04:06.194771'
    - '2013-06-25 06:13:10.119845'
    - Returns the Integer equal to int - 1.
    - 
  - - 1050
    - Integer#rationalize([eps]) =>rational
    - 54
    - '2013-06-22 23:04:06.521629'
    - '2013-06-25 06:13:10.287410'
    - ! 'Returns the value as a rational.  The optional argument eps is always

      ignored.'
    - 
  - - 1051
    - Integer#round([ndigits]) =>integer or float
    - 54
    - '2013-06-22 23:04:06.846775'
    - '2013-06-25 06:13:10.455311'
    - ! 'Rounds flt to a given precision in decimal digits (default 0

      digits). Precision may be negative.  Returns a floating point number when

      ndigits is positive, self for zero, and round

      down for negative.'
    - 
  - - 1052
    - Integer#succ =>integer
    - 54
    - '2013-06-22 23:04:07.182685'
    - '2013-06-25 06:13:10.623902'
    - Returns the Integer equal to int + 1.
    - 
  - - 1053
    - Integer#times {|i| block } =>self
    - 54
    - '2013-06-22 23:04:07.518691'
    - '2013-06-25 06:13:10.790759'
    - 
    - 
  - - 1054
    - Integer#times =>an_enumerator
    - 54
    - '2013-06-22 23:04:07.834209'
    - '2013-06-25 06:13:10.958721'
    - ! 'Iterates block int times, passing in values from zero to

      int - 1.'
    - 
  - - 1055
    - Integer#to_i =>integer
    - 54
    - '2013-06-22 23:04:08.137239'
    - '2013-06-25 06:13:11.115652'
    - 
    - 
  - - 1056
    - Integer#to_int =>integer
    - 54
    - '2013-06-22 23:04:08.472725'
    - '2013-06-25 06:13:11.273477'
    - ! 'As int is already an Integer, all these methods

      simply return the receiver.'
    - 
  - - 1057
    - Integer#to_int =>integer
    - 54
    - '2013-06-22 23:04:08.809058'
    - '2013-06-25 06:13:11.429501'
    - 
    - 
  - - 1058
    - Integer#to_r =>rational
    - 54
    - '2013-06-22 23:04:09.156263'
    - '2013-06-25 06:13:11.576771'
    - Returns the value as a rational.
    - 
  - - 1059
    - Integer#truncate =>integer
    - 54
    - '2013-06-22 23:04:09.471843'
    - '2013-06-25 06:13:11.744560'
    - ! 'As int is already an Integer, all these methods

      simply return the receiver.'
    - 
  - - 1060
    - Integer#upto(limit) {|i| block } =>self
    - 54
    - '2013-06-22 23:04:09.807543'
    - '2013-06-25 06:13:11.912486'
    - 
    - 
  - - 1061
    - Integer#upto(limit) =>an_enumerator
    - 54
    - '2013-06-22 23:04:10.166383'
    - '2013-06-25 06:13:12.081063'
    - ! 'Iterates block, passing in integer values from int up to

      and including limit.'
    - 
  - - 1062
    - Float#float * other =>float
    - 38
    - '2013-06-22 23:41:31.222093'
    - '2013-06-25 06:13:12.237255'
    - ! 'Returns a new float which is the product of float and

      other.'
    - 
  - - 1063
    - Float#flt ** other =>float
    - 38
    - '2013-06-22 23:41:31.555290'
    - '2013-06-25 06:13:12.384777'
    - Raises float the other power.
    - 
  - - 1064
    - Float#float + other =>float
    - 38
    - '2013-06-22 23:41:31.879600'
    - '2013-06-25 06:13:12.528995'
    - ! 'Returns a new float which is the sum of float and

      other.'
    - 
  - - 1065
    - Float#float - other =>float
    - 38
    - '2013-06-22 23:41:32.206796'
    - '2013-06-25 06:13:12.674713'
    - ! 'Returns a new float which is the difference of float and

      other.'
    - 
  - - 1066
    - Float#-float =>float
    - 38
    - '2013-06-22 23:41:32.542156'
    - '2013-06-25 06:13:12.831517'
    - Returns float, negated.
    - 
  - - 1067
    - Float#float / other =>float
    - 38
    - '2013-06-22 23:41:32.856342'
    - '2013-06-25 06:13:12.991074'
    - ! 'Returns a new float which is the result of dividing float by

      other.'
    - 
  - - 1068
    - ! 'Float#flt click to toggle source '
    - 38
    - '2013-06-22 23:41:33.170591'
    - '2013-06-25 03:53:06.481524'
    - ! 'true if flt is less than or equal to

      real. The result of NaN <= NaN is undefined,

      so the implementation-dependent value is returned.'
    - 
  - - 1069
    - ! 'Float#flt click to toggle source '
    - 38
    - '2013-06-22 23:41:33.472674'
    - '2013-06-23 06:52:39.299864'
    - 
    - 
  - - 1070
    - Float#float real =>-1, 0, +1 or nil
    - 38
    - '2013-06-22 23:41:33.799490'
    - '2013-06-25 06:13:13.147250'
    - ! 'Returns -1, 0, +1 or nil depending on whether float is less

      than, equal to, or greater than real. This is the basis for

      the tests in Comparable.'
    - 
  - - 1071
    - Float#flt > real =>true or false
    - 38
    - '2013-06-22 23:41:34.123682'
    - '2013-06-25 06:13:13.303995'
    - ! 'true if flt is greater than real.

      The result of NaN > NaN is undefined, so the

      implementation-dependent value is returned.'
    - 
  - - 1072
    - Float#flt >= real =>true or false
    - 38
    - '2013-06-22 23:41:34.460258'
    - '2013-06-25 06:13:13.460693'
    - ! 'true if flt is greater than or equal to

      real. The result of NaN >= NaN is undefined,

      so the implementation-dependent value is returned.'
    - 
  - - 1073
    - Float#abs =>float
    - 38
    - '2013-06-22 23:41:34.762530'
    - '2013-06-25 06:13:13.617252'
    - Returns the absolute value of flt.
    - 
  - - 1074
    - Float#angle =>0 or float
    - 38
    - '2013-06-22 23:41:35.089170'
    - '2013-06-25 06:13:13.763116'
    - Returns 0 if the value is positive, pi otherwise.
    - 
  - - 1075
    - Float#arg =>0 or float
    - 38
    - '2013-06-22 23:41:35.402511'
    - '2013-06-25 06:13:13.909248'
    - Returns 0 if the value is positive, pi otherwise.
    - 
  - - 1076
    - Float#ceil =>integer
    - 38
    - '2013-06-22 23:41:35.727244'
    - '2013-06-25 06:13:14.065595'
    - ! 'Returns the smallest Integer greater than or equal to

      flt.'
    - 
  - - 1077
    - Float#coerce(numeric) =>array
    - 38
    - '2013-06-22 23:41:36.029886'
    - '2013-06-25 06:13:14.234470'
    - ! 'Returns an array with both aNumeric and flt represented

      as Float objects. This is achieved by converting

      aNumeric to a Float.'
    - 
  - - 1078
    - Float#denominator =>integer
    - 38
    - '2013-06-22 23:41:36.354632'
    - '2013-06-25 06:13:14.381903'
    - ! 'Returns the denominator (always positive).  The result is machine

      dependent.'
    - 
  - - 1079
    - Float#divmod(numeric) =>array
    - 38
    - '2013-06-22 23:41:36.681074'
    - '2013-06-25 06:13:14.537847'
    - See Numeric#divmod.
    - 
  - - 1080
    - Float#eql?(obj) =>true or false
    - 38
    - '2013-06-22 23:41:36.994723'
    - '2013-06-25 06:13:14.683848'
    - ! 'Returns true only if obj is a Float with

      the same value as flt. Contrast this with Float#==,

      which performs type conversions. The result of NaN.eql?(NaN)

      is undefined, so the implementation-dependent value is returned.'
    - 
  - - 1081
    - Float#fdiv(numeric) =>float
    - 38
    - '2013-06-22 23:41:37.296898'
    - '2013-06-25 06:13:14.840773'
    - Returns float / numeric.
    - 
  - - 1082
    - Float#finite? =>true or false
    - 38
    - '2013-06-22 23:41:37.632803'
    - '2013-06-25 06:13:14.985651'
    - ! 'Returns true if flt is a valid IEEE floating point

      number (it is not infinite, and nan? is false).'
    - 
  - - 1083
    - Float#floor =>integer
    - 38
    - '2013-06-22 23:41:38.160078'
    - '2013-06-25 06:13:15.131425'
    - Returns the largest integer less than or equal to flt.
    - 
  - - 1084
    - Float#hash =>integer
    - 38
    - '2013-06-22 23:41:38.506733'
    - '2013-06-25 06:13:15.299852'
    - Returns a hash code for this float.
    - 
  - - 1085
    - Float#infinite? =>nil, -1, +1
    - 38
    - '2013-06-22 23:41:38.842634'
    - '2013-06-25 06:13:15.457746'
    - ! 'Returns nil, -1, or +1 depending on whether flt is

      finite, -infinity, or +infinity.'
    - 
  - - 1086
    - Float#magnitude =>float
    - 38
    - '2013-06-22 23:41:39.133507'
    - '2013-06-25 06:13:15.625118'
    - Returns the absolute value of flt.
    - 
  - - 1087
    - Float#modulo(other) =>float
    - 38
    - '2013-06-22 23:41:39.425093'
    - '2013-06-25 06:13:15.783638'
    - ! 'Return the modulo after division of float by

      other.'
    - 
  - - 1088
    - Float#nan? =>true or false
    - 38
    - '2013-06-22 23:41:39.752113'
    - '2013-06-25 06:13:15.940722'
    - ! 'Returns true if flt is an invalid IEEE floating point

      number.'
    - 
  - - 1089
    - Float#numerator =>integer
    - 38
    - '2013-06-22 23:41:40.065375'
    - '2013-06-25 06:13:16.085650'
    - Returns the numerator.  The result is machine dependent.
    - 
  - - 1090
    - Float#phase =>0 or float
    - 38
    - '2013-06-22 23:41:40.379044'
    - '2013-06-25 06:13:16.231528'
    - Returns 0 if the value is positive, pi otherwise.
    - 
  - - 1091
    - Float#quo(numeric) =>float
    - 38
    - '2013-06-22 23:41:40.703800'
    - '2013-06-25 06:13:16.389033'
    - Returns float / numeric.
    - 
  - - 1092
    - Float#rationalize([eps]) =>rational
    - 38
    - '2013-06-22 23:41:41.041382'
    - '2013-06-25 06:13:16.556938'
    - ! 'Returns a simpler approximation of the value (flt-|eps| <= result <=

      flt+|eps|).  if the optional eps is not given, it will be chosen

      automatically.'
    - 
  - - 1093
    - Float#round([ndigits]) =>integer or float
    - 38
    - '2013-06-22 23:41:41.366541'
    - '2013-06-25 06:13:16.713964'
    - ! 'Rounds flt to a given precision in decimal digits (default 0

      digits). Precision may be negative.  Returns a floating point number when

      ndigits is more than zero.'
    - 
  - - 1094
    - Float#to_f =>self
    - 38
    - '2013-06-22 23:41:41.669284'
    - '2013-06-25 06:13:16.870058'
    - As flt is already a float, returns self.
    - 
  - - 1095
    - Float#to_i =>integer
    - 38
    - '2013-06-22 23:41:41.993858'
    - '2013-06-25 06:13:17.026624'
    - 
    - 
  - - 1096
    - Float#to_int =>integer
    - 38
    - '2013-06-22 23:41:42.309224'
    - '2013-06-25 06:13:17.186330'
    - Returns flt truncated to an Integer.
    - 
  - - 1097
    - Float#to_int =>integer
    - 38
    - '2013-06-22 23:41:42.601066'
    - '2013-06-25 06:13:17.342464'
    - 
    - 
  - - 1098
    - Float#to_r =>rational
    - 38
    - '2013-06-22 23:41:42.925681'
    - '2013-06-25 06:13:17.488691'
    - Returns the value as a rational.
    - 
  - - 1099
    - Float#to_s =>string
    - 38
    - '2013-06-22 23:41:43.272875'
    - '2013-06-25 06:13:17.656712'
    - ! 'Returns a string containing a representation of self. As well as a fixed
      or

      exponential form of the number, the call may return “NaN”,

      “Infinity”, and “-Infinity”.'
    - 
  - - 1100
    - Float#truncate =>integer
    - 38
    - '2013-06-22 23:41:43.597341'
    - '2013-06-25 06:13:17.823937'
    - Returns flt truncated to an Integer.
    - 
  - - 1101
    - Float#zero? =>true or false
    - 38
    - '2013-06-22 23:41:43.901532'
    - '2013-06-25 06:13:17.992599'
    - Returns true if flt is 0.0.
    - 
  - - 1102
    - NilClass#false & obj =>false
    - 68
    - '2013-06-22 23:42:17.805687'
    - '2013-06-25 06:13:18.148441'
    - 
    - 
  - - 1103
    - NilClass#nil & obj =>false
    - 68
    - '2013-06-22 23:42:18.149036'
    - '2013-06-25 06:13:18.306197'
    - ! 'And—Returns false. obj is always evaluated as it is

      the argument to a method call—there is no short-circuit evaluation in this

      case.'
    - 
  - - 1104
    - NilClass#false ^ obj =>true or false
    - 68
    - '2013-06-22 23:42:18.484892'
    - '2013-06-25 06:13:18.473356'
    - 
    - 
  - - 1105
    - NilClass#nil ^ obj =>true or false
    - 68
    - '2013-06-22 23:42:18.831986'
    - '2013-06-25 06:13:18.631921'
    - ! 'Exclusive Or—If obj is nil or false,

      returns false; otherwise, returns true.'
    - 
  - - 1106
    - NilClass#inspect =>"nil"
    - 68
    - '2013-06-22 23:42:19.145479'
    - '2013-06-25 06:13:18.788682'
    - Always returns the string “nil”.
    - 
  - - 1107
    - NilClass#nil? =>true
    - 68
    - '2013-06-22 23:42:19.470858'
    - '2013-06-25 06:13:18.956689'
    - ! 'Only the object nil responds true to

      nil?.'
    - 
  - - 1108
    - NilClass#rationalize([eps]) =>(0/1)
    - 68
    - '2013-06-22 23:42:19.819390'
    - '2013-06-25 06:13:19.124975'
    - Returns zero as a rational.  The optional argument eps is always ignored.
    - 
  - - 1109
    - NilClass#to_a =>[]
    - 68
    - '2013-06-22 23:42:20.144142'
    - '2013-06-25 06:13:19.292839'
    - Always returns an empty array.
    - 
  - - 1110
    - NilClass#to_c =>(0+0i)
    - 68
    - '2013-06-22 23:42:20.435953'
    - '2013-06-25 06:13:19.449651'
    - Returns zero as a complex.
    - 
  - - 1111
    - NilClass#to_f =>0.0
    - 68
    - '2013-06-22 23:42:20.749197'
    - '2013-06-25 06:13:19.617369'
    - Always returns zero.
    - 
  - - 1112
    - NilClass#to_h =>{}
    - 68
    - '2013-06-22 23:42:21.064607'
    - '2013-06-25 06:13:19.763640'
    - Always returns an empty hash.
    - 
  - - 1113
    - NilClass#to_i =>0
    - 68
    - '2013-06-22 23:42:21.389484'
    - '2013-06-25 06:13:19.911146'
    - Always returns zero.
    - 
  - - 1114
    - NilClass#to_r =>(0/1)
    - 68
    - '2013-06-22 23:42:21.703666'
    - '2013-06-25 06:13:20.068159'
    - Returns zero as a rational.
    - 
  - - 1115
    - NilClass#to_s =>""
    - 68
    - '2013-06-22 23:42:22.028420'
    - '2013-06-25 06:13:20.224833'
    - Always returns the empty string.
    - 
  - - 1116
    - NilClass#false | obj =>true or false
    - 68
    - '2013-06-22 23:42:22.366256'
    - '2013-06-25 06:13:20.381992'
    - 
    - 
  - - 1117
    - NilClass#nil | obj =>true or false
    - 68
    - '2013-06-22 23:42:22.657743'
    - '2013-06-25 06:13:20.537829'
    - ! 'Or—Returns false if obj is nil or

      false; true otherwise.'
    - 
  - - 1118
    - Exception#exception(string) =>an_exception or exc
    - 29
    - '2013-06-23 00:07:56.152460'
    - '2013-06-25 06:13:20.728044'
    - ! 'With no argument, or if the argument is the same as the receiver, return

      the receiver. Otherwise, create a new exception object of the same class as

      the receiver, but with a message equal to string.to_str.'
    - 
  - - 1119
    - Exception#new(msg = nil) =>exception
    - 29
    - '2013-06-23 00:07:56.505056'
    - '2013-06-25 06:13:20.873915'
    - ! 'Construct a new Exception object, optionally

      passing in a message.'
    - 
  - - 1120
    - Exception#exc == obj =>true or false
    - 29
    - '2013-06-23 00:07:56.798024'
    - '2013-06-25 06:13:21.030839'
    - ! 'Equality—If obj is not an Exception, returns

      false. Otherwise, returns true if exc

      and obj share same class, messages, and backtrace.'
    - 
  - - 1121
    - Exception#backtrace =>array
    - 29
    - '2013-06-23 00:07:57.134161'
    - '2013-06-25 06:13:21.176366'
    - ! 'Returns any backtrace associated with the exception. The backtrace is an

      array of strings, each containing either “filename:lineNo: in `method”‘ or

      “filename:lineNo.”'
    - 
  - - 1122
    - Exception#exception(string) =>an_exception or exc
    - 29
    - '2013-06-23 00:07:57.447867'
    - '2013-06-25 06:13:21.301648'
    - 
    - 
  - - 1123
    - Exception#inspect =>string
    - 29
    - '2013-06-23 00:07:57.773142'
    - '2013-06-25 06:13:21.481315'
    - Return this exception’s class name and message
    - 
  - - 1124
    - Exception#message =>string
    - 29
    - '2013-06-23 00:07:58.111334'
    - '2013-06-25 06:13:21.637665'
    - ! 'Returns the result of invoking exception.to_s. Normally this

      returns the exception’s message or name. By supplying a to_str method,

      exceptions are agreeing to be used where Strings are expected.'
    - 
  - - 1125
    - Exception#set_backtrace(backtrace) =>array
    - 29
    - '2013-06-23 00:07:58.458603'
    - '2013-06-25 06:13:21.940137'
    - ! 'Sets the backtrace information associated with exc. The

      backtrace must be an array of String

      objects or a single String in the format

      described in #backtrace.'
    - 
  - - 1126
    - Exception#to_s =>string
    - 29
    - '2013-06-23 00:07:58.760892'
    - '2013-06-25 06:13:22.107564'
    - ! 'Returns exception’s message (or the name of the exception if no message is

      set).'
    - 
  - - 1127
    - FileTest#blockdev?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:13.691593'
    - '2013-06-25 06:13:22.265070'
    - Returns true if the named file is a block device.
    - 
  - - 1128
    - FileTest#chardev?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:13.996655'
    - '2013-06-25 06:13:22.434511'
    - Returns true if the named file is a character device.
    - 
  - - 1129
    - FileTest#directory?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:14.287724'
    - '2013-06-25 06:13:22.600388'
    - ! 'Returns true if the named file is a directory, or a symlink

      that points at a directory, and false otherwise.'
    - 
  - - 1130
    - FileTest#executable?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:14.625667'
    - '2013-06-25 06:13:22.759938'
    - ! 'Returns true if the named file is executable by the effective

      user id of this process.'
    - 
  - - 1131
    - FileTest#executable_real?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:14.950766'
    - '2013-06-25 06:13:23.061967'
    - ! 'Returns true if the named file is executable by the real user

      id of this process.'
    - 
  - - 1132
    - FileTest#exist?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:15.286984'
    - '2013-06-25 06:13:23.229663'
    - Return true if the named file exists.
    - 
  - - 1133
    - FileTest#exists?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:15.611654'
    - '2013-06-25 06:13:23.374637'
    - Return true if the named file exists.
    - 
  - - 1134
    - FileTest#file?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:15.961052'
    - '2013-06-25 06:13:23.531533'
    - Returns true if the named file exists and is a regular file.
    - 
  - - 1135
    - FileTest#grpowned?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:16.275006'
    - '2013-06-25 06:13:23.677539'
    - ! 'Returns true if the named file exists and the effective group

      id of the calling process is the owner of the file. Returns

      false on Windows.'
    - 
  - - 1136
    - FileTest#identical?(file_1, file_2) =>true or false
    - 36
    - '2013-06-23 00:08:16.599875'
    - '2013-06-25 06:13:23.834012'
    - Returns true if the named files are identical.
    - 
  - - 1137
    - FileTest#owned?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:16.935267'
    - '2013-06-25 06:13:23.990770'
    - ! 'Returns true if the named file exists and the effective used

      id of the calling process is the owner of the file.'
    - 
  - - 1138
    - FileTest#pipe?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:17.271347'
    - '2013-06-25 06:13:24.292496'
    - Returns true if the named file is a pipe.
    - 
  - - 1139
    - FileTest#readable?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:17.576083'
    - '2013-06-25 06:13:24.451871'
    - ! 'Returns true if the named file is readable by the effective

      user id of this process.'
    - 
  - - 1140
    - FileTest#readable_real?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:17.900826'
    - '2013-06-25 06:13:24.618986'
    - ! 'Returns true if the named file is readable by the real user id

      of this process.'
    - 
  - - 1141
    - FileTest#setgid?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:18.236660'
    - '2013-06-25 06:13:24.786985'
    - Returns true if the named file has the setgid bit set.
    - 
  - - 1142
    - FileTest#setuid?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:18.584301'
    - '2013-06-25 06:13:24.932248'
    - Returns true if the named file has the setuid bit set.
    - 
  - - 1143
    - FileTest#size(file_name) =>integer
    - 36
    - '2013-06-23 00:08:18.888172'
    - '2013-06-25 06:13:25.078018'
    - Returns the size of file_name.
    - 
  - - 1144
    - FileTest#size?(file_name) =>Integer or nil
    - 36
    - '2013-06-23 00:08:19.224479'
    - '2013-06-25 06:13:25.368335'
    - ! 'Returns nil if file_name doesn’t exist or has

      zero size, the size of the file otherwise.'
    - 
  - - 1145
    - FileTest#socket?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:19.571529'
    - '2013-06-25 06:13:25.525392'
    - Returns true if the named file is a socket.
    - 
  - - 1146
    - FileTest#sticky?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:20.130409'
    - '2013-06-25 06:13:25.682135'
    - Returns true if the named file has the sticky bit set.
    - 
  - - 1147
    - FileTest#symlink?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:20.643356'
    - '2013-06-25 06:13:25.829747'
    - Returns true if the named file is a symbolic link.
    - 
  - - 1148
    - FileTest#world_readable?(file_name) =>fixnum or nil
    - 36
    - '2013-06-23 00:08:21.007970'
    - '2013-06-25 06:13:25.997633'
    - ! 'If file_name is readable by others, returns an integer

      representing the file permission bits of file_name. Returns

      nil otherwise. The meaning of the bits is platform dependent;

      on Unix systems, see stat(2).'
    - 
  - - 1149
    - FileTest#world_writable?(file_name) =>fixnum or nil
    - 36
    - '2013-06-23 00:08:21.310485'
    - '2013-06-25 06:13:26.143403'
    - ! 'If file_name is writable by others, returns an integer

      representing the file permission bits of file_name. Returns

      nil otherwise. The meaning of the bits is platform dependent;

      on Unix systems, see stat(2).'
    - 
  - - 1150
    - FileTest#writable?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:21.635152'
    - '2013-06-25 06:13:26.311514'
    - ! 'Returns true if the named file is writable by the effective

      user id of this process.'
    - 
  - - 1151
    - FileTest#writable_real?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:21.972753'
    - '2013-06-25 06:13:26.468990'
    - ! 'Returns true if the named file is writable by the real user id

      of this process.'
    - 
  - - 1152
    - FileTest#zero?(file_name) =>true or false
    - 36
    - '2013-06-23 00:08:22.286508'
    - '2013-06-25 06:13:26.636007'
    - Returns true if the named file exists and has a zero size.
    - 
  - - 1153
    - Kernel#Array(arg) =>array
    - 56
    - '2013-06-23 00:13:14.289349'
    - '2013-06-25 06:13:26.804287'
    - Returns arg as an Array.
    - 
  - - 1154
    - Kernel#Complex(x[, y]) =>numeric
    - 56
    - '2013-06-23 00:13:14.617539'
    - '2013-06-25 06:13:26.961220'
    - Returns x+i*y;
    - 
  - - 1155
    - Kernel#Float(arg) =>float
    - 56
    - '2013-06-23 00:13:14.933266'
    - '2013-06-25 06:13:27.117588'
    - ! 'Returns arg converted to a float. Numeric types are converted directly, the
      rest are

      converted using arg.to_f. As of Ruby 1.8, converting

      nil generates a TypeError.'
    - 
  - - 1156
    - Kernel#Hash(arg) =>hash
    - 56
    - '2013-06-23 00:13:15.268760'
    - '2013-06-25 06:13:27.277284'
    - ! 'Converts arg to a Hash by calling

      arg.to_hash. Returns an empty Hash when

      arg is nil or [].'
    - 
  - - 1157
    - Kernel#Integer(arg,base=0) =>integer
    - 56
    - '2013-06-23 00:13:15.605318'
    - '2013-06-25 06:13:27.577971'
    - ! 'Converts arg to a Fixnum or Bignum. Numeric types are converted directly
      (with floating

      point numbers being truncated).    base (0, or between 2 and 36)

      is a base for integer string representation.  If arg is a

      String, when base is omitted or equals to zero, radix

      indicators (0, 0b, and 0x) are

      honored. In any case, strings should be strictly conformed to numeric

      representation. This behavior is different from that of

      String#to_i.  Non string values will be converted using

      to_int, and to_i.'
    - 
  - - 1158
    - Kernel#Rational(x[, y]) =>numeric
    - 56
    - '2013-06-23 00:13:15.964338'
    - '2013-06-25 06:13:27.735067'
    - Returns x/y;
    - 
  - - 1159
    - Kernel#String(arg) =>string
    - 56
    - '2013-06-23 00:13:16.267925'
    - '2013-06-25 06:13:27.881232'
    - ! 'Converts arg to a String by calling its

      to_s method.'
    - 
  - - 1160
    - Kernel#__callee__ =>symbol
    - 56
    - '2013-06-23 00:13:16.603776'
    - '2013-06-25 06:13:28.048798'
    - ! 'Returns the called name of the current method as a Symbol. If called outside
      of a method, it returns

      nil.'
    - 
  - - 1161
    - Kernel#__dir__ =>string
    - 56
    - '2013-06-23 00:13:16.939453'
    - '2013-06-25 06:13:28.205107'
    - ! 'Returns the canonicalized absolute path of the directory of the file from

      which this method is called. It means symlinks in the path is resolved. If

      __FILE__ is nil, it returns nil. The

      return value equals to File.dirname(File.realpath(__FILE__)).'
    - 
  - - 1162
    - Kernel#__method__ =>symbol
    - 56
    - '2013-06-23 00:13:17.242470'
    - '2013-06-25 06:13:28.361893'
    - ! 'Returns the name at the definition of the current method as a Symbol. If
      called outside of a method, it returns

      nil.'
    - 
  - - 1163
    - Kernel#`cmd` =>string
    - 56
    - '2013-06-23 00:13:17.557802'
    - '2013-06-25 06:13:28.664261'
    - ! 'Returns the standard output of running cmd in a subshell. The

      built-in syntax %x{...} uses this method. Sets $?

      to the process status.'
    - 
  - - 1164
    - Kernel#abort
    - 56
    - '2013-06-23 00:13:17.893565'
    - '2013-06-23 06:52:58.413114'
    - 
    - 
  - - 1165
    - Kernel#Kernel::abort([msg])
    - 56
    - '2013-06-23 00:13:18.207231'
    - '2013-06-23 06:52:58.711928'
    - 
    - 
  - - 1166
    - Kernel#Process::abort([msg])
    - 56
    - '2013-06-23 00:13:18.510601'
    - '2013-06-25 04:00:50.338372'
    - ! 'Terminate execution immediately, effectively by calling

      Kernel.exit(false). If msg is given, it is written to

      STDERR prior to terminating.'
    - 
  - - 1167
    - Kernel#at_exit { block } =>proc
    - 56
    - '2013-06-23 00:13:18.823304'
    - '2013-06-25 06:13:28.832084'
    - ! 'Converts block to a Proc object (and therefore binds

      it at the point of call) and registers it for execution when the program

      exits. If multiple handlers are registered, they are executed in reverse

      order of registration.'
    - 
  - - 1168
    - Kernel#autoload(module, filename) =>nil
    - 56
    - '2013-06-23 00:13:19.150109'
    - '2013-06-25 06:13:28.979625'
    - ! 'Registers filename to be loaded (using

      Kernel::require) the first time that module (which

      may be a String or a symbol) is accessed.'
    - 
  - - 1169
    - Kernel#autoload?(name) =>String or nil
    - 56
    - '2013-06-23 00:13:19.464483'
    - '2013-06-25 06:13:29.135592'
    - ! 'Returns filename to be loaded if name is registered as

      autoload.'
    - 
  - - 1170
    - Kernel#binding =>a_binding
    - 56
    - '2013-06-23 00:13:19.766284'
    - '2013-06-25 06:13:29.293188'
    - ! 'Returns a Binding object, describing the variable and method

      bindings at the point of call. This object can be used when calling

      eval to execute the evaluated command in this environment. See

      also the description of class Binding.'
    - 
  - - 1171
    - Kernel#block_given? =>true or false
    - 56
    - '2013-06-23 00:13:20.124092'
    - '2013-06-25 06:13:29.449072'
    - ! 'Returns true if yield would execute a block in

      the current context. The iterator? form is mildly deprecated.'
    - 
  - - 1172
    - Kernel#callcc {|cont| block } =>obj
    - 56
    - '2013-06-23 00:13:20.462013'
    - '2013-06-25 06:13:29.739106'
    - ! 'Generates a Continuation object, which it

      passes to the associated block. You need to require

      ''continuation'' before using this method. Performing a

      cont.call will cause the callcc to return (as will falling

      through the end of the block). The value returned by the callcc is the value
      of the block, or

      the value passed to cont.call. See class Continuation for more details. Also
      see #throw for an alternative mechanism

      for unwinding a call stack.'
    - 
  - - 1173
    - Kernel#caller(start=1, length=nil) =>array or nil
    - 56
    - '2013-06-23 00:13:20.764586'
    - '2013-06-25 06:13:29.907484'
    - 
    - 
  - - 1174
    - Kernel#caller(range) =>array or nil
    - 56
    - '2013-06-23 00:13:21.078423'
    - '2013-06-25 06:13:30.054466'
    - ! 'Returns the current execution stack—an array containing strings in the form

      file:line or file:line: in `method''.'
    - 
  - - 1175
    - Kernel#caller_locations(start=1, length=nil) =>array or nil
    - 56
    - '2013-06-23 00:13:21.403150'
    - '2013-06-25 06:13:30.220722'
    - 
    - 
  - - 1176
    - Kernel#caller_locations(range) =>array or nil
    - 56
    - '2013-06-23 00:13:21.738911'
    - '2013-06-25 06:13:30.378463'
    - ! 'Returns the current execution stack—an array containing backtrace location

      objects.'
    - 
  - - 1177
    - Kernel#catch([arg]) {|tag| block } =>obj
    - 56
    - '2013-06-23 00:13:22.055153'
    - '2013-06-25 06:13:30.536420'
    - ! 'catch executes its block. If a throw is executed,

      Ruby searches up its stack for a catch block with a tag

      corresponding to the throw''s tag. If found, that

      block is terminated, and catch returns the value given to

      throw. If throw is not called, the block

      terminates normally, and the value of catch is the value of

      the last expression evaluated. catch expressions may be

      nested, and the throw call need not be in lexical scope.'
    - 
  - - 1178
    - Kernel#chomp =>$_
    - 56
    - '2013-06-23 00:13:22.356887'
    - '2013-06-25 06:13:30.693618'
    - 
    - 
  - - 1179
    - Kernel#chomp(string) =>$_
    - 56
    - '2013-06-23 00:13:22.670912'
    - '2013-06-25 06:13:30.884334'
    - ! 'Equivalent to $_ = $_.chomp(string). See

      String#chomp. Available only when -p/-n command line option

      specified.'
    - 
  - - 1180
    - Kernel#chop =>$_
    - 56
    - '2013-06-23 00:13:23.006811'
    - '2013-06-25 06:13:31.173512'
    - ! 'Equivalent to ($_.dup).chop!, except nil is never

      returned. See String#chop!. Available only when -p/-n command

      line option specified.'
    - 
  - - 1181
    - Kernel#eval(string [, binding [, filename [,lineno]]]) =>obj
    - 56
    - '2013-06-23 00:13:23.333340'
    - '2013-06-25 06:13:31.475944'
    - ! 'Evaluates the Ruby expression(s) in string. If binding is

      given, which must be a Binding object, the evaluation is

      performed in its context. If the optional filename and

      lineno parameters are present, they will be used when reporting

      syntax errors.'
    - 
  - - 1182
    - Kernel#exec([env,] command... [,options])
    - 56
    - '2013-06-23 00:13:23.669384'
    - '2013-06-25 04:00:52.605713'
    - ! 'Replaces the current process by running the given external

      command, which can take one of the following forms:'
    - 
  - - 1183
    - Kernel#exit(status=true)
    - 56
    - '2013-06-23 00:13:24.005223'
    - '2013-06-23 06:53:03.949718'
    - 
    - 
  - - 1184
    - Kernel#Kernel::exit(status=true)
    - 56
    - '2013-06-23 00:13:24.330024'
    - '2013-06-23 06:53:04.261403'
    - 
    - 
  - - 1185
    - Kernel#Process::exit(status=true)
    - 56
    - '2013-06-23 00:13:24.656987'
    - '2013-06-25 04:00:52.784381'
    - ! 'Initiates the termination of the Ruby script by raising the

      SystemExit exception. This exception may be caught. The

      optional parameter is used to return a status code to the invoking

      environment. true and FALSE of status

      means success and failure respectively.  The interpretation of other

      integer values are system dependent.'
    - 
  - - 1186
    - Kernel#exit!(status=false)
    - 56
    - '2013-06-23 00:13:24.992841'
    - '2013-06-25 04:00:52.942119'
    - ! 'Exits the process immediately. No exit handlers are run. status is

      returned to the underlying system as the exit status.'
    - 
  - - 1187
    - Kernel#fail
    - 56
    - '2013-06-23 00:13:25.328713'
    - '2013-06-23 06:53:05.176699'
    - 
    - 
  - - 1188
    - Kernel#fail(string)
    - 56
    - '2013-06-23 00:13:25.642480'
    - '2013-06-23 06:53:05.480364'
    - 
    - 
  - - 1189
    - Kernel#fail(exception [, string [, array]])
    - 56
    - '2013-06-23 00:13:25.956275'
    - '2013-06-25 04:00:53.110939'
    - ! 'With no arguments, raises the exception in $! or raises a

      RuntimeError if $! is nil. With a

      single String argument, raises a RuntimeError

      with the string as a message. Otherwise, the first parameter should be the

      name of an Exception class (or an object that returns an

      Exception object when sent an exception message).

      The optional second parameter sets the message associated with the

      exception, and the third parameter is an array of callback information.

      Exceptions are caught by the rescue clause of

      begin...end blocks.'
    - 
  - - 1190
    - Kernel#fork [{ block }] =>fixnum or nil
    - 56
    - '2013-06-23 00:13:26.271875'
    - '2013-06-25 06:13:31.948401'
    - ! 'Creates a subprocess. If a block is specified, that block is run in the

      subprocess, and the subprocess terminates with a status of zero. Otherwise,

      the fork call returns twice, once in the parent, returning the

      process ID of the child, and once in the child, returning nil. The

      child process can exit using Kernel.exit! to avoid running any

      at_exit functions. The parent process should use

      Process.wait to collect the termination statuses of its

      children or use Process.detach to register disinterest in

      their status; otherwise, the operating system may accumulate zombie

      processes.'
    - 
  - - 1191
    - Kernel#fork [{ block }] =>fixnum or nil
    - 56
    - '2013-06-23 00:13:26.596661'
    - '2013-06-25 06:13:32.244407'
    - 
    - 
  - - 1192
    - Kernel#format(format_string [, arguments...] ) =>string
    - 56
    - '2013-06-23 00:13:26.910514'
    - '2013-06-25 06:13:32.546045'
    - ! 'Returns the string resulting from applying format_string to any

      additional arguments.  Within the format string, any characters other than

      format sequences are copied to the result.'
    - 
  - - 1193
    - Kernel#gets(sep=$/) =>string or nil
    - 56
    - '2013-06-23 00:13:27.212741'
    - '2013-06-25 06:13:32.846657'
    - 
    - 
  - - 1194
    - Kernel#gets(limit) =>string or nil
    - 56
    - '2013-06-23 00:13:27.539071'
    - '2013-06-25 06:13:33.105527'
    - 
    - 
  - - 1195
    - Kernel#gets(sep,limit) =>string or nil
    - 56
    - '2013-06-23 00:13:27.886380'
    - '2013-06-25 06:13:33.263298'
    - ! 'Returns (and assigns to $_) the next line from the list of

      files in ARGV (or $*), or from standard input if

      no files are present on the command line. Returns nil at end

      of file. The optional argument specifies the record separator. The

      separator is included with the contents of each record. A separator of

      nil reads the entire contents, and a zero-length separator

      reads the input one paragraph at a time, where paragraphs are divided by

      two consecutive newlines.  If the first argument is an integer, or optional

      second argument is given, the returning string would not be longer than the

      given value in bytes.  If multiple filenames are present in

      ARGV, +gets(nil)+ will read the contents one file at a time.'
    - 
  - - 1196
    - Kernel#global_variables =>array
    - 56
    - '2013-06-23 00:13:28.210948'
    - '2013-06-25 06:13:33.452545'
    - Returns an array of the names of global variables.
    - 
  - - 1197
    - Kernel#gsub(pattern, replacement) =>$_
    - 56
    - '2013-06-23 00:13:28.513334'
    - '2013-06-25 06:13:33.753812'
    - 
    - 
  - - 1198
    - Kernel#gsub(pattern) {|...| block } =>$_
    - 56
    - '2013-06-23 00:13:28.984471'
    - '2013-06-25 06:13:34.055285'
    - ! 'Equivalent to $_.gsub..., except that $_ will be

      updated if substitution occurs. Available only when -p/-n command line

      option specified.'
    - 
  - - 1199
    - Kernel#iterator? =>true or false
    - 56
    - '2013-06-23 00:13:29.320288'
    - '2013-06-25 06:13:34.356800'
    - ! 'Returns true if yield would execute a block in

      the current context. The iterator? form is mildly deprecated.'
    - 
  - - 1200
    - Kernel#lambda { |...| block } =>a_proc
    - 56
    - '2013-06-23 00:13:29.623405'
    - '2013-06-25 06:13:34.502266'
    - ! 'Equivalent to Proc.new, except the resulting Proc objects check the number
      of parameters passed

      when called.'
    - 
  - - 1201
    - Kernel#load(filename, wrap=false) =>true
    - 56
    - '2013-06-23 00:13:30.092499'
    - '2013-06-25 06:13:34.793413'
    - ! 'Loads and executes the Ruby program in the file filename. If the

      filename does not resolve to an absolute path, the file is searched for in

      the library directories listed in $:. If the optional

      wrap parameter is true, the loaded script will be

      executed under an anonymous module, protecting the calling program’s global

      namespace. In no circumstance will any local variables in the loaded file

      be propagated to the loading environment.'
    - 
  - - 1202
    - Kernel#local_variables =>array
    - 56
    - '2013-06-23 00:13:30.416840'
    - '2013-06-25 06:13:35.085031'
    - Returns the names of the current local variables.
    - 
  - - 1203
    - Kernel#loop { block }
    - 56
    - '2013-06-23 00:13:30.766432'
    - '2013-06-23 06:53:09.710671'
    - 
    - 
  - - 1204
    - Kernel#loop =>an_enumerator
    - 56
    - '2013-06-23 00:13:31.336438'
    - '2013-06-25 06:13:35.375067'
    - Repeatedly executes the block.
    - 
  - - 1205
    - Kernel#open(path [, mode [, perm]] [, opt]) =>io or nil
    - 56
    - '2013-06-23 00:13:31.639065'
    - '2013-06-25 06:13:35.687234'
    - 
    - 
  - - 1206
    - Kernel#open(path [, mode [, perm]] [, opt]) {|io| block } =>obj
    - 56
    - '2013-06-23 00:13:31.964145'
    - '2013-06-25 06:13:35.854987'
    - ! 'Creates an IO object connected to the given stream,

      file, or subprocess.'
    - 
  - - 1207
    - Kernel#p(obj) =>obj
    - 56
    - '2013-06-23 00:13:32.468402'
    - '2013-06-25 06:13:36.145610'
    - 
    - 
  - - 1208
    - Kernel#p(obj1, obj2, ...) =>[obj, ...]
    - 56
    - '2013-06-23 00:13:32.771545'
    - '2013-06-25 06:13:36.458587'
    - 
    - 
  - - 1209
    - Kernel#p() =>nil
    - 56
    - '2013-06-23 00:13:33.095910'
    - '2013-06-25 06:13:36.748775'
    - ! 'For each object, directly writes obj.inspect followed

      by a newline to the program’s standard output.'
    - 
  - - 1210
    - Kernel#print(obj, ...) =>nil
    - 56
    - '2013-06-23 00:13:33.554659'
    - '2013-06-25 06:13:37.049239'
    - ! 'Prints each object in turn to $stdout. If the output field

      separator ($,) is not nil, its contents will

      appear between each field. If the output record separator

      ($\</code>) is not nil, it will be appended to the output. If

      no arguments are given, prints <code>$_. Objects that aren’t

      strings will be converted by calling their to_s method.'
    - 
  - - 1211
    - Kernel#printf(io, string [, obj ... ]) =>nil
    - 56
    - '2013-06-23 00:13:33.858309'
    - '2013-06-25 06:13:37.350903'
    - 
    - 
  - - 1212
    - Kernel#printf(string [, obj ... ]) =>nil
    - 56
    - '2013-06-23 00:13:34.255064'
    - '2013-06-25 06:13:37.520606'
    - ! 'Equivalent to:'
    - 
  - - 1213
    - Kernel#proc { |...| block } =>a_proc
    - 56
    - '2013-06-23 00:13:35.007886'
    - '2013-06-25 06:13:37.821572'
    - Equivalent to Proc.new.
    - 
  - - 1214
    - Kernel#putc(int) =>int
    - 56
    - '2013-06-23 00:13:35.332942'
    - '2013-06-25 06:13:38.145032'
    - ! 'Refer to the documentation for IO#putc

      for important information regarding multi-byte characters.'
    - 
  - - 1215
    - Kernel#puts(obj, ...) =>nil
    - 56
    - '2013-06-23 00:13:35.792678'
    - '2013-06-25 06:13:38.446446'
    - Equivalent to
    - 
  - - 1216
    - Kernel#raise
    - 56
    - '2013-06-23 00:13:36.094887'
    - '2013-06-23 06:53:13.208424'
    - 
    - 
  - - 1217
    - Kernel#raise(string)
    - 56
    - '2013-06-23 00:13:36.420237'
    - '2013-06-23 06:53:13.521613'
    - 
    - 
  - - 1218
    - Kernel#raise(exception [, string [, array]])
    - 56
    - '2013-06-23 00:13:36.955689'
    - '2013-06-25 04:00:56.014787'
    - ! 'With no arguments, raises the exception in $! or raises a

      RuntimeError if $! is nil. With a

      single String argument, raises a RuntimeError

      with the string as a message. Otherwise, the first parameter should be the

      name of an Exception class (or an object that returns an

      Exception object when sent an exception message).

      The optional second parameter sets the message associated with the

      exception, and the third parameter is an array of callback information.

      Exceptions are caught by the rescue clause of

      begin...end blocks.'
    - 
  - - 1219
    - Kernel#rand(max=0) =>number
    - 56
    - '2013-06-23 00:13:37.280567'
    - '2013-06-25 06:13:38.725415'
    - ! 'If called without an argument, or if max.to_i.abs == 0, rand

      returns a pseudo-random floating point number between 0.0 and 1.0,

      including 0.0 and excluding 1.0.'
    - 
  - - 1220
    - Kernel#readline(sep=$/) =>string
    - 56
    - '2013-06-23 00:13:37.585006'
    - '2013-06-25 06:13:38.860396'
    - 
    - 
  - - 1221
    - Kernel#readline(limit) =>string
    - 56
    - '2013-06-23 00:13:38.054939'
    - '2013-06-25 06:13:39.139193'
    - 
    - 
  - - 1222
    - Kernel#readline(sep, limit) =>string
    - 56
    - '2013-06-23 00:13:38.401799'
    - '2013-06-25 06:13:39.329229'
    - ! 'Equivalent to Kernel::gets, except readline

      raises EOFError at end of file.'
    - 
  - - 1223
    - Kernel#readlines(sep=$/) =>array
    - 56
    - '2013-06-23 00:13:38.704159'
    - '2013-06-25 06:13:39.641754'
    - 
    - 
  - - 1224
    - Kernel#readlines(limit) =>array
    - 56
    - '2013-06-23 00:13:39.197774'
    - '2013-06-25 06:13:39.955991'
    - 
    - 
  - - 1225
    - Kernel#readlines(sep,limit) =>array
    - 56
    - '2013-06-23 00:13:39.522215'
    - '2013-06-25 06:13:40.112729'
    - ! 'Returns an array containing the lines returned by calling

      Kernel.gets(sep) until the end of file.'
    - 
  - - 1226
    - Kernel#require(name) =>true or false
    - 56
    - '2013-06-23 00:13:39.858381'
    - '2013-06-25 06:13:40.414057'
    - ! 'Loads the given name, returning true if

      successful and false if the feature is already loaded.'
    - 
  - - 1227
    - Kernel#require_relative(string) =>true or false
    - 56
    - '2013-06-23 00:13:40.305262'
    - '2013-06-25 06:13:40.693223'
    - ! 'Ruby tries to load the library named string relative to the

      requiring file’s path.  If the file’s path cannot be determined a LoadError
      is raised. If a file is loaded

      true is returned and false otherwise.'
    - 
  - - 1228
    - Kernel#select(read_array
    - 56
    - '2013-06-23 00:13:40.596470'
    - '2013-06-23 06:53:16.481882'
    - 
    - 
  - - 1229
    - Kernel#[, write_array
    - 56
    - '2013-06-23 00:13:40.945371'
    - '2013-06-23 06:53:16.639082'
    - 
    - 
  - - 1230
    - Kernel#[, error_array
    - 56
    - '2013-06-23 00:13:41.448176'
    - '2013-06-23 06:53:16.796600'
    - 
    - 
  - - 1231
    - Kernel#[, timeout]]]) =>array or nil
    - 56
    - '2013-06-23 00:13:41.750945'
    - '2013-06-25 06:13:40.983627'
    - ! 'Calls select(2) system call. It monitors given arrays of IO

      objects, waits one or more of IO objects ready for reading,

      are ready for writing, and have pending exceptions respectively, and

      returns an array that contains arrays of those IO

      objects.  It will return nil if optional timeout

      value is given and no IO object is ready in timeout

      seconds.'
    - 
  - - 1232
    - Kernel#set_trace_func(proc) =>proc
    - 56
    - '2013-06-23 00:13:42.042716'
    - '2013-06-25 06:13:41.140280'
    - 
    - 
  - - 1233
    - Kernel#set_trace_func(nil) =>nil
    - 56
    - '2013-06-23 00:13:42.535156'
    - '2013-06-25 06:13:41.441424'
    - ! 'Establishes proc as the handler for tracing, or disables tracing

      if the parameter is nil.'
    - 
  - - 1234
    - Kernel#sleep([duration]) =>fixnum
    - 56
    - '2013-06-23 00:13:42.860100'
    - '2013-06-25 06:13:41.765369'
    - ! 'Suspends the current thread for duration seconds (which may be any

      number, including a Float with fractional seconds). Returns

      the actual number of seconds slept (rounded), which may be less than that

      asked for if another thread calls Thread#run. Called without

      an argument, sleep() will sleep forever.'
    - 
  - - 1235
    - Kernel#spawn([env,] command... [,options]) =>pid
    - 56
    - '2013-06-23 00:13:43.151025'
    - '2013-06-25 06:13:42.090292'
    - spawn executes specified command and return its pid.
    - 
  - - 1236
    - Kernel#spawn([env,] command... [,options]) =>pid
    - 56
    - '2013-06-23 00:13:43.609244'
    - '2013-06-25 06:13:42.380842'
    - 
    - 
  - - 1237
    - Kernel#sprintf(format_string [, arguments...] ) =>string
    - 56
    - '2013-06-23 00:13:43.947320'
    - '2013-06-25 06:13:42.659962'
    - ! 'Returns the string resulting from applying format_string to any

      additional arguments.  Within the format string, any characters other than

      format sequences are copied to the result.'
    - 
  - - 1238
    - Kernel#srand(number = Random.new_seed) =>old_seed
    - 56
    - '2013-06-23 00:13:44.294306'
    - '2013-06-25 06:13:42.806064'
    - ! 'Seeds the system pseudo-random number generator, Random::DEFAULT, with

      number.  The previous seed value is returned.'
    - 
  - - 1239
    - Kernel#sub(pattern, replacement) =>$_
    - 56
    - '2013-06-23 00:13:44.741396'
    - '2013-06-25 06:13:43.117633'
    - 
    - 
  - - 1240
    - Kernel#sub(pattern) {|...| block } =>$_
    - 56
    - '2013-06-23 00:13:45.054832'
    - '2013-06-25 06:13:43.430924'
    - ! 'Equivalent to $_.sub(args), except that

      $_ will be updated if substitution occurs. Available only when

      -p/-n command line option specified.'
    - 
  - - 1241
    - Kernel#syscall(num [, args...]) =>integer
    - 56
    - '2013-06-23 00:13:45.391216'
    - '2013-06-25 06:13:43.753717'
    - ! 'syscall is essentially unsafe and unportable. Feel free to

      shoot your foot. DL (Fiddle) library is preferred for safer and a bit more

      portable programming.'
    - 
  - - 1242
    - Kernel#system([env,] command... [,options]) =>true, false or nil
    - 56
    - '2013-06-23 00:13:45.706237'
    - '2013-06-25 06:13:44.055787'
    - ! 'Executes command… in a subshell. command… is one of

      following forms.'
    - 
  - - 1243
    - Kernel#test(cmd, file1 [, file2] ) =>obj
    - 56
    - '2013-06-23 00:13:46.211034'
    - '2013-06-25 06:13:44.356614'
    - ! 'Uses the integer cmd to perform various tests on

      file1 (first table below) or on file1 and

      file2 (second table).'
    - 
  - - 1244
    - Kernel#throw(tag [, obj])
    - 56
    - '2013-06-23 00:13:46.822534'
    - '2013-06-25 04:00:58.516277'
    - ! 'Transfers control to the end of the active catch block waiting

      for tag. Raises ArgumentError if there is no

      catch block for the tag. The optional second

      parameter supplies a return value for the catch block, which

      otherwise defaults to nil. For examples, see

      Kernel::catch.'
    - 
  - - 1245
    - Kernel#trace_var(symbol, cmd ) =>nil
    - 56
    - '2013-06-23 00:13:47.458482'
    - '2013-06-25 06:13:44.505063'
    - 
    - 
  - - 1246
    - Kernel#trace_var(symbol) {|val| block } =>nil
    - 56
    - '2013-06-23 00:13:47.918162'
    - '2013-06-25 06:13:44.805375'
    - ! 'Controls tracing of assignments to global variables. The parameter +symbol_

      identifies the variable (as either a string name or a symbol identifier).

      cmd (which may be a string or a Proc object) or block

      is executed whenever the variable is assigned. The block or

      Proc object receives the variable’s new value as a parameter.

      Also see Kernel::untrace_var.'
    - 
  - - 1247
    - Kernel#trap( signal, command ) =>obj
    - 56
    - '2013-06-23 00:13:48.532422'
    - '2013-06-25 06:13:45.095648'
    - 
    - 
  - - 1248
    - Kernel#trap( signal ) {| | block } =>obj
    - 56
    - '2013-06-23 00:13:49.168230'
    - '2013-06-25 06:13:45.386522'
    - ! 'Specifies the handling of signals. The first parameter is a signal name (a

      string such as “SIGALRM”, “SIGUSR1”, and so on) or a signal number. The

      characters “SIG” may be omitted from the signal name. The command or block

      specifies code to be run when the signal is raised. If the command is the

      string “IGNORE” or “SIG_IGN”, the signal will be ignored. If the command is

      “DEFAULT” or “SIG_DFL”, the Ruby’s default handler will be invoked. If the

      command is “EXIT”, the script will be terminated by the signal. If the

      command is “SYSTEM_DEFAULT”, the operating system’s default handler will be

      invoked. Otherwise, the given command or block will be run. The special

      signal name “EXIT” or signal number zero will be invoked just prior to

      program termination. trap returns the previous handler for the given

      signal.'
    - 
  - - 1249
    - Kernel#untrace_var(symbol [, cmd] ) =>array or nil
    - 56
    - '2013-06-23 00:13:49.837331'
    - '2013-06-25 06:13:45.665579'
    - ! 'Removes tracing for the specified command on the given global variable and

      returns nil. If no command is specified, removes all tracing

      for that variable and returns an array containing the commands actually

      removed.'
    - 
  - - 1250
    - Kernel#warn(msg, ...) =>nil
    - 56
    - '2013-06-23 00:13:50.284474'
    - '2013-06-25 06:13:45.978682'
    - ! 'Displays each of the given messages followed by a record separator on

      STDERR unless warnings have been disabled (for example with the

      -W0 flag).'
    - 
  - - 1251
    - LocalJumpError#exit_value =>obj
    - 59
    - '2013-06-23 00:15:15.276621'
    - '2013-06-25 06:13:46.256991'
    - Returns the exit value associated with this LocalJumpError.
    - 
  - - 1252
    - LocalJumpError#reason =>symbol
    - 59
    - '2013-06-23 00:15:15.631075'
    - '2013-06-25 06:13:46.413729'
    - ! 'The reason this block was terminated: :break, :redo, :retry, :next,

      :return, or :noreason.'
    - 
  - - 1253
    - MatchData#mtch[i] =>str or nil
    - 61
    - '2013-06-23 00:15:18.994218'
    - '2013-06-25 06:13:46.683602'
    - 
    - 
  - - 1254
    - MatchData#mtch[start, length] =>array
    - 61
    - '2013-06-23 00:15:19.293819'
    - '2013-06-25 06:13:47.019216'
    - 
    - 
  - - 1255
    - MatchData#mtch[range] =>array
    - 61
    - '2013-06-23 00:15:19.642582'
    - '2013-06-25 06:13:47.320168'
    - 
    - 
  - - 1256
    - MatchData#mtch[name] =>str or nil
    - 61
    - '2013-06-23 00:15:19.978701'
    - '2013-06-25 06:13:47.643317'
    - ! 'Match Reference – MatchData acts as an array, and may be

      accessed using the normal array indexing techniques.  mtch[0]

      is equivalent to the special variable $&, and returns the

      entire matched string.  mtch[1], mtch[2], and so

      on return the values of the matched backreferences (portions of the pattern

      between parentheses).'
    - 
  - - 1257
    - MatchData#begin(n) =>integer
    - 61
    - '2013-06-23 00:15:20.269703'
    - '2013-06-25 06:13:47.955419'
    - ! 'Returns the offset of the start of the nth element of the match

      array in the string. n can be a string or symbol to reference a

      named capture.'
    - 
  - - 1258
    - MatchData#captures =>array
    - 61
    - '2013-06-23 00:15:20.572627'
    - '2013-06-25 06:13:48.279205'
    - Returns the array of captures; equivalent to mtch.to_a[1..-1].
    - 
  - - 1259
    - MatchData#end(n) =>integer
    - 61
    - '2013-06-23 00:15:20.910093'
    - '2013-06-25 06:13:48.447265'
    - ! 'Returns the offset of the character immediately following the end of the

      nth element of the match array in the string. n can be a

      string or symbol to reference a named capture.'
    - 
  - - 1260
    - MatchData#eql?(mtch2) =>true or false
    - 61
    - '2013-06-23 00:15:21.245697'
    - '2013-06-25 06:13:48.737988'
    - ! 'Equality—Two matchdata are equal if their target strings, patterns, and

      matched positions are identical.'
    - 
  - - 1261
    - MatchData#hash =>integer
    - 61
    - '2013-06-23 00:15:21.526527'
    - '2013-06-25 06:13:49.027261'
    - ! 'Produce a hash based on the target string, regexp and matched positions of

      this matchdata.'
    - 
  - - 1262
    - MatchData#inspect =>str
    - 61
    - '2013-06-23 00:15:21.839745'
    - '2013-06-25 06:13:49.320254'
    - Returns a printable version of mtch.
    - 
  - - 1263
    - MatchData#length =>integer
    - 61
    - '2013-06-23 00:15:22.188393'
    - '2013-06-25 06:13:49.631721'
    - Returns the number of elements in the match array.
    - 
  - - 1264
    - MatchData#names =>[name1, name2, ...]
    - 61
    - '2013-06-23 00:15:22.491419'
    - '2013-06-25 06:13:49.800548'
    - ! 'Returns a list of names of captures as an array of strings. It is same as

      mtch.regexp.names.'
    - 
  - - 1265
    - MatchData#offset(n) =>array
    - 61
    - '2013-06-23 00:15:22.771604'
    - '2013-06-25 06:13:50.111842'
    - ! 'Returns a two-element array containing the beginning and ending offsets of

      the nth match. n can be a string or symbol to reference a

      named capture.'
    - 
  - - 1266
    - MatchData#post_match =>str
    - 61
    - '2013-06-23 00:15:23.084709'
    - '2013-06-25 06:13:50.424965'
    - ! 'Returns the portion of the original string after the current match.

      Equivalent to the special variable $''.'
    - 
  - - 1267
    - MatchData#pre_match =>str
    - 61
    - '2013-06-23 00:15:23.431843'
    - '2013-06-25 06:13:50.725657'
    - ! 'Returns the portion of the original string before the current match.

      Equivalent to the special variable $`.'
    - 
  - - 1268
    - MatchData#regexp =>regexp
    - 61
    - '2013-06-23 00:15:23.780900'
    - '2013-06-25 06:13:51.004919'
    - Returns the regexp.
    - 
  - - 1269
    - MatchData#size =>integer
    - 61
    - '2013-06-23 00:15:24.072417'
    - '2013-06-25 06:13:51.161280'
    - Returns the number of elements in the match array.
    - 
  - - 1270
    - MatchData#string =>str
    - 61
    - '2013-06-23 00:15:24.407714'
    - '2013-06-25 06:13:51.441328'
    - Returns a frozen copy of the string passed in to match.
    - 
  - - 1271
    - MatchData#to_a =>anArray
    - 61
    - '2013-06-23 00:15:24.755302'
    - '2013-06-25 06:13:51.621317'
    - Returns the array of matches.
    - 
  - - 1272
    - MatchData#to_s =>str
    - 61
    - '2013-06-23 00:15:25.081938'
    - '2013-06-25 06:13:51.911291'
    - Returns the entire matched string.
    - 
  - - 1273
    - MatchData#values_at([index]*) =>array
    - 61
    - '2013-06-23 00:15:25.406137'
    - '2013-06-25 06:13:52.056646'
    - ! 'Uses each index to access the matching values, returning an array

      of the corresponding matches.'
    - 
  - - 1274
    - Method#meth[args, ...] =>obj
    - 64
    - '2013-06-23 00:15:55.632544'
    - '2013-06-25 06:13:52.359534'
    - ! 'Invokes the meth with the specified arguments, returning the

      method’s return value.'
    - 
  - - 1275
    - Method#arity =>fixnum
    - 64
    - '2013-06-23 00:15:55.979593'
    - '2013-06-25 06:13:52.547957'
    - ! 'Returns an indication of the number of arguments accepted by a method.

      Returns a nonnegative integer for methods that take a fixed number of

      arguments. For Ruby methods that take a variable number of arguments,

      returns -n-1, where n is the number of required arguments. For methods

      written in C, returns -1 if the call takes a variable number of arguments.'
    - 
  - - 1276
    - Method#call(args, ...) =>obj
    - 64
    - '2013-06-23 00:15:56.300633'
    - '2013-06-25 06:13:52.827158'
    - ! 'Invokes the meth with the specified arguments, returning the

      method’s return value.'
    - 
  - - 1277
    - Method#clone =>new_method
    - 64
    - '2013-06-23 00:15:56.614444'
    - '2013-06-25 06:13:53.128379'
    - Returns a clone of this method.
    - 
  - - 1278
    - Method#eql?(other_meth) =>true or false
    - 64
    - '2013-06-23 00:15:56.939446'
    - '2013-06-25 06:13:53.286239'
    - ! 'Two method objects are equal if they are bound to the same object and refer

      to the same method definition and their owners are the same class or

      module.'
    - 
  - - 1279
    - Method#hash =>integer
    - 64
    - '2013-06-23 00:15:57.276669'
    - '2013-06-25 06:13:53.598616'
    - Returns a hash value corresponding to the method object.
    - 
  - - 1280
    - Method#inspect =>string
    - 64
    - '2013-06-23 00:15:57.601564'
    - '2013-06-25 06:13:53.901678'
    - Returns the name of the underlying method.
    - 
  - - 1281
    - Method#name =>symbol
    - 64
    - '2013-06-23 00:15:57.892589'
    - '2013-06-25 06:13:54.191832'
    - Returns the name of the method.
    - 
  - - 1282
    - Method#original_name =>symbol
    - 64
    - '2013-06-23 00:15:58.195255'
    - '2013-06-25 06:13:54.481349'
    - Returns the original name of the method.
    - 
  - - 1283
    - Method#owner =>class_or_module
    - 64
    - '2013-06-23 00:15:58.530988'
    - '2013-06-25 06:13:54.637482'
    - Returns the class or module that defines the method.
    - 
  - - 1284
    - Method#parameters =>array
    - 64
    - '2013-06-23 00:15:58.836227'
    - '2013-06-25 06:13:54.827841'
    - Returns the parameter information of this method.
    - 
  - - 1285
    - Method#receiver =>object
    - 64
    - '2013-06-23 00:15:59.137031'
    - '2013-06-25 06:13:55.006705'
    - Returns the bound receiver of the method object.
    - 
  - - 1286
    - Method#source_location =>[String, Fixnum]
    - 64
    - '2013-06-23 00:15:59.439787'
    - '2013-06-25 06:13:55.163688'
    - ! 'Returns the Ruby source filename and line number containing this method or

      nil if this method was not defined in Ruby (i.e. native)'
    - 
  - - 1287
    - Method#to_proc =>prc
    - 64
    - '2013-06-23 00:15:59.786327'
    - '2013-06-25 06:13:55.331108'
    - Returns a Proc object corresponding to this method.
    - 
  - - 1288
    - Method#to_s =>string
    - 64
    - '2013-06-23 00:16:00.122209'
    - '2013-06-25 06:13:55.487874'
    - Returns the name of the underlying method.
    - 
  - - 1289
    - Method#unbind =>unbound_method
    - 64
    - '2013-06-23 00:16:00.437778'
    - '2013-06-25 06:13:55.656912'
    - ! 'Dissociates meth from its current receiver. The resulting

      UnboundMethod can subsequently be bound to a new object of the

      same class (see UnboundMethod).'
    - 
  - - 1290
    - Module#constants =>array
    - 65
    - '2013-06-23 00:16:05.750873'
    - '2013-06-25 06:13:55.814974'
    - 
    - 
  - - 1291
    - Module#constants(inherited) =>array
    - 65
    - '2013-06-23 00:16:06.146786'
    - '2013-06-25 06:13:56.105147'
    - ! 'In the first form, returns an array of the names of all constants

      accessible from the point of call. This list includes the names of all

      modules and classes defined in the global scope.'
    - 
  - - 1292
    - Module#nesting =>array
    - 65
    - '2013-06-23 00:16:06.458066'
    - '2013-06-25 06:13:56.261839'
    - Returns the list of Modules nested at the point of call.
    - 
  - - 1293
    - Module#new =>mod
    - 65
    - '2013-06-23 00:16:06.785802'
    - '2013-06-25 06:13:56.419253'
    - 
    - 
  - - 1294
    - Module#new {|mod| block } =>mod
    - 65
    - '2013-06-23 00:16:07.085512'
    - '2013-06-25 06:13:56.586408'
    - ! 'Creates a new anonymous module. If a block is given, it is passed the

      module object, and the block is evaluated in the context of this module

      using module_eval.'
    - 
  - - 1295
    - ! 'Module#mod click to toggle source '
    - 65
    - '2013-06-23 00:16:07.421301'
    - '2013-06-25 04:12:45.287163'
    - ! 'Returns true if mod is a subclass of other or is the same

      as other. Returns nil if there’s no relationship

      between the two. (Think of the relationship in terms of the class

      definition: “class A<B” implies “A<B”).'
    - 
  - - 1296
    - ! 'Module#mod click to toggle source '
    - 65
    - '2013-06-23 00:16:07.792294'
    - '2013-06-23 06:53:29.148634'
    - 
    - 
  - - 1297
    - Module#module other_module =>-1, 0, +1, or nil
    - 65
    - '2013-06-23 00:16:08.094850'
    - '2013-06-25 06:13:56.754266'
    - ! 'Comparison—Returns -1, 0, +1 or nil depending on whether

      module includes other_module, they are the same,

      or if module is included by other_module. This is

      the basis for the tests in Comparable.'
    - 
  - - 1298
    - Module#obj == other =>true or false
    - 65
    - '2013-06-23 00:16:08.430649'
    - '2013-06-25 06:13:56.899837'
    - 
    - 
  - - 1299
    - Module#equal?(other) =>true or false
    - 65
    - '2013-06-23 00:16:08.777458'
    - '2013-06-25 06:13:57.045968'
    - 
    - 
  - - 1300
    - Module#eql?(other) =>true or false
    - 65
    - '2013-06-23 00:16:09.104142'
    - '2013-06-25 06:13:57.347793'
    - ! 'Equality — At the Object level, == returns

      true only if obj and other are the

      same object. Typically, this method is overridden in descendant classes to

      provide class-specific meaning.'
    - 
  - - 1301
    - Module#mod === obj =>true or false
    - 65
    - '2013-06-23 00:16:09.394921'
    - '2013-06-25 06:13:57.505575'
    - ! 'Case Equality—Returns true if anObject is an instance

      of mod or one of mod’s descendants. Of limited use for

      modules, but can be used in case statements to classify

      objects by class.'
    - 
  - - 1302
    - Module#mod > other =>true, false, or nil
    - 65
    - '2013-06-23 00:16:09.708556'
    - '2013-06-25 06:13:57.662011'
    - ! 'Returns true if mod is an ancestor of other. Returns

      nil if there’s no relationship between the two. (Think of the

      relationship in terms of the class definition: “class A<B” implies

      “B>A”).'
    - 
  - - 1303
    - Module#mod >= other =>true, false, or nil
    - 65
    - '2013-06-23 00:16:10.055424'
    - '2013-06-25 06:13:57.818933'
    - ! 'Returns true if mod is an ancestor of other, or the two

      modules are the same. Returns nil if there’s no relationship

      between the two. (Think of the relationship in terms of the class

      definition: “class A<B” implies “B>A”).'
    - 
  - - 1304
    - Module#ancestors =>array
    - 65
    - '2013-06-23 00:16:10.424795'
    - '2013-06-25 06:13:57.987049'
    - ! 'Returns a list of modules included in mod (including mod

      itself).'
    - 
  - - 1305
    - Module#autoload(module, filename) =>nil
    - 65
    - '2013-06-23 00:16:10.740209'
    - '2013-06-25 06:13:58.154745'
    - ! 'Registers filename to be loaded (using

      Kernel::require) the first time that module (which

      may be a String or a symbol) is accessed in the namespace of

      mod.'
    - 
  - - 1306
    - Module#autoload?(name) =>String or nil
    - 65
    - '2013-06-23 00:16:11.106634'
    - '2013-06-25 06:13:58.456422'
    - ! 'Returns filename to be loaded if name is registered as

      autoload in the namespace of mod.'
    - 
  - - 1307
    - Module#class_eval(string [, filename [, lineno]]) =>obj
    - 65
    - '2013-06-23 00:16:11.512435'
    - '2013-06-25 06:13:58.601957'
    - ! 'Evaluates the string or block in the context of mod, except that

      when a block is given, constant/class variable lookup is not affected. This

      can be used to add methods to a class. module_eval returns the

      result of evaluating its argument. The optional filename and

      lineno parameters set the text for error messages.'
    - 
  - - 1308
    - Module#class_exec(arg...) {|var...| block } =>obj
    - 65
    - '2013-06-23 00:16:11.848587'
    - '2013-06-25 06:13:58.747318'
    - ! 'Evaluates the given block in the context of the class/module. The method

      defined in the block will belong to the receiver. Any arguments passed to

      the method will be passed to the block. This can be used if the block needs

      to access instance variables.'
    - 
  - - 1309
    - Module#class_variable_defined?(symbol) =>true or false
    - 65
    - '2013-06-23 00:16:12.141342'
    - '2013-06-25 06:13:58.882454'
    - 
    - 
  - - 1310
    - Module#class_variable_defined?(string) =>true or false
    - 65
    - '2013-06-23 00:16:12.488115'
    - '2013-06-25 06:13:59.040666'
    - ! 'Returns true if the given class variable is defined in

      obj. String arguments are converted to

      symbols.'
    - 
  - - 1311
    - Module#class_variable_get(symbol) =>obj
    - 65
    - '2013-06-23 00:16:12.835363'
    - '2013-06-25 06:13:59.198995'
    - 
    - 
  - - 1312
    - Module#class_variable_get(string) =>obj
    - 65
    - '2013-06-23 00:16:13.137768'
    - '2013-06-25 06:13:59.509557'
    - ! 'Returns the value of the given class variable (or throws a

      NameError exception). The @@ part of the variable

      name should be included for regular class variables String arguments are converted
      to symbols.'
    - 
  - - 1313
    - Module#class_variable_set(symbol, obj) =>obj
    - 65
    - '2013-06-23 00:16:13.418331'
    - '2013-06-25 06:13:59.667187'
    - 
    - 
  - - 1314
    - Module#class_variable_set(string, obj) =>obj
    - 65
    - '2013-06-23 00:16:13.744860'
    - '2013-06-25 06:13:59.812799'
    - ! 'Sets the class variable names by symbol to object. If the

      class variable name is passed as a string, that string is converted to a

      symbol.'
    - 
  - - 1315
    - Module#class_variables(inherit=true) =>array
    - 65
    - '2013-06-23 00:16:14.092200'
    - '2013-06-25 06:13:59.958593'
    - ! 'Returns an array of the names of class variables in mod. This

      includes the names of class variables in any included modules, unless the

      inherit parameter is set to false.'
    - 
  - - 1316
    - Module#const_defined?(sym, inherit=true) =>true or false
    - 65
    - '2013-06-23 00:16:14.394285'
    - '2013-06-25 06:14:00.103337'
    - ! 'Checks for a constant with the given name in mod If

      inherit is set, the lookup will also search the ancestors (and

      Object if mod is a Module.)'
    - 
  - - 1317
    - Module#const_get(sym, inherit=true) =>obj
    - 65
    - '2013-06-23 00:16:14.674840'
    - '2013-06-25 06:14:00.249292'
    - 
    - 
  - - 1318
    - Module#const_get(str, inherit=true) =>obj
    - 65
    - '2013-06-23 00:16:15.001418'
    - '2013-06-25 06:14:00.406001'
    - ! 'Checks for a constant with the given name in mod If

      inherit is set, the lookup will also search the ancestors (and

      Object if mod is a Module.)'
    - 
  - - 1319
    - Module#const_missing(sym) =>obj
    - 65
    - '2013-06-23 00:16:15.326551'
    - '2013-06-25 06:14:00.708919'
    - ! 'Invoked when a reference is made to an undefined constant in mod.

      It is passed a symbol for the undefined constant, and returns a value to be

      used for that constant. The following code is an example of the same:'
    - 
  - - 1320
    - Module#const_set(sym, obj) =>obj
    - 65
    - '2013-06-23 00:16:15.617196'
    - '2013-06-25 06:14:00.877515'
    - ! 'Sets the named constant to the given object, returning that object. Creates

      a new constant if no constant with the given name previously existed.'
    - 
  - - 1321
    - Module#constants(inherit=true) =>array
    - 65
    - '2013-06-23 00:16:15.930815'
    - '2013-06-25 06:14:01.044705'
    - ! 'Returns an array of the names of the constants accessible in mod.

      This includes the names of constants in any included modules (example at

      start of section), unless the inherit parameter is set to

      false.'
    - 
  - - 1322
    - Module#freeze =>mod
    - 65
    - '2013-06-23 00:16:16.277575'
    - '2013-06-25 06:14:01.212262'
    - Prevents further modifications to mod.
    - 
  - - 1323
    - Module#include?(module) =>true or false
    - 65
    - '2013-06-23 00:16:16.604188'
    - '2013-06-25 06:14:01.358838'
    - ! 'Returns true if module is included in mod or

      one of mod’s ancestors.'
    - 
  - - 1324
    - Module#included_modules =>array
    - 65
    - '2013-06-23 00:16:16.884174'
    - '2013-06-25 06:14:01.503862'
    - Returns the list of modules included in mod.
    - 
  - - 1325
    - Module#instance_method(symbol) =>unbound_method
    - 65
    - '2013-06-23 00:16:17.232139'
    - '2013-06-25 06:14:01.836373'
    - ! 'Returns an UnboundMethod representing the given instance

      method in mod.'
    - 
  - - 1326
    - Module#instance_methods(include_super=true) =>array
    - 65
    - '2013-06-23 00:16:17.567524'
    - '2013-06-25 06:14:01.984250'
    - ! 'Returns an array containing the names of the public and protected instance

      methods in the receiver. For a module, these are the public and protected

      methods; for a class, they are the instance (not singleton) methods. With

      no argument, or with an argument that is false, the instance

      methods in mod are returned, otherwise the methods in mod

      and mod’s superclasses are returned.'
    - 
  - - 1327
    - Module#method_defined?(symbol) =>true or false
    - 65
    - '2013-06-23 00:16:17.872436'
    - '2013-06-25 06:14:02.141114'
    - 
    - 
  - - 1328
    - Module#method_defined?(string) =>true or false
    - 65
    - '2013-06-23 00:16:18.163384'
    - '2013-06-25 06:14:02.297443'
    - ! 'Returns true if the named method is defined by mod

      (or its included modules and, if mod is a class, its ancestors).

      Public and protected methods are matched. String

      arguments are converted to symbols.'
    - 
  - - 1329
    - Module#module_eval {|| block } =>obj
    - 65
    - '2013-06-23 00:16:18.488607'
    - '2013-06-25 06:14:02.456350'
    - ! 'Evaluates the string or block in the context of mod, except that

      when a block is given, constant/class variable lookup is not affected. This

      can be used to add methods to a class. module_eval returns the

      result of evaluating its argument. The optional filename and

      lineno parameters set the text for error messages.'
    - 
  - - 1330
    - Module#module_exec(arg...) {|var...| block } =>obj
    - 65
    - '2013-06-23 00:16:18.823944'
    - '2013-06-25 06:14:02.602249'
    - ! 'Evaluates the given block in the context of the class/module. The method

      defined in the block will belong to the receiver. Any arguments passed to

      the method will be passed to the block. This can be used if the block needs

      to access instance variables.'
    - 
  - - 1331
    - Module#name =>string
    - 65
    - '2013-06-23 00:16:19.139601'
    - '2013-06-25 06:14:02.748376'
    - ! 'Returns the name of the module mod.  Returns nil for anonymous

      modules.'
    - 
  - - 1332
    - Module#private_class_method(symbol, ...) =>mod
    - 65
    - '2013-06-23 00:16:19.419611'
    - '2013-06-25 06:14:03.037616'
    - 
    - 
  - - 1333
    - Module#private_class_method(string, ...) =>mod
    - 65
    - '2013-06-23 00:16:19.721657'
    - '2013-06-25 06:14:03.183955'
    - ! 'Makes existing class methods private. Often used to hide the default

      constructor new.'
    - 
  - - 1334
    - Module#private_constant(symbol, ...) => mod
    - 65
    - '2013-06-23 00:16:20.069524'
    - '2013-06-25 04:12:50.737134'
    - Makes a list of existing constants private.
    - 
  - - 1335
    - Module#private_instance_methods(include_super=true) =>array
    - 65
    - '2013-06-23 00:16:20.404423'
    - '2013-06-25 06:14:03.340329'
    - ! 'Returns a list of the private instance methods defined in mod. If

      the optional parameter is not false, the methods of any

      ancestors are included.'
    - 
  - - 1336
    - Module#private_method_defined?(symbol) =>true or false
    - 65
    - '2013-06-23 00:16:20.710050'
    - '2013-06-25 06:14:03.496933'
    - 
    - 
  - - 1337
    - Module#private_method_defined?(string) =>true or false
    - 65
    - '2013-06-23 00:16:21.059080'
    - '2013-06-25 06:14:03.664889'
    - ! 'Returns true if the named private method is defined by _ mod_

      (or its included modules and, if mod is a class, its ancestors).

      String arguments are converted to symbols.'
    - 
  - - 1338
    - Module#protected_instance_methods(include_super=true) =>array
    - 65
    - '2013-06-23 00:16:21.547856'
    - '2013-06-25 06:14:03.833692'
    - ! 'Returns a list of the protected instance methods defined in mod.

      If the optional parameter is not false, the methods of any

      ancestors are included.'
    - 
  - - 1339
    - Module#protected_method_defined?(symbol) =>true or false
    - 65
    - '2013-06-23 00:16:21.872082'
    - '2013-06-25 06:14:04.137035'
    - 
    - 
  - - 1340
    - Module#protected_method_defined?(string) =>true or false
    - 65
    - '2013-06-23 00:16:22.151910'
    - '2013-06-25 06:14:04.293152'
    - ! 'Returns true if the named protected method is defined by

      mod (or its included modules and, if mod is a class, its

      ancestors). String arguments are converted to

      symbols.'
    - 
  - - 1341
    - Module#public_class_method(symbol, ...) =>mod
    - 65
    - '2013-06-23 00:16:22.623363'
    - '2013-06-25 06:14:04.438324'
    - 
    - 
  - - 1342
    - Module#public_class_method(string, ...) =>mod
    - 65
    - '2013-06-23 00:16:22.970087'
    - '2013-06-25 06:14:04.595605'
    - Makes a list of existing class methods public.
    - 
  - - 1343
    - Module#public_constant(symbol, ...) => mod
    - 65
    - '2013-06-23 00:16:23.294655'
    - '2013-06-25 04:12:51.970460'
    - Makes a list of existing constants public.
    - 
  - - 1344
    - Module#public_instance_method(symbol) =>unbound_method
    - 65
    - '2013-06-23 00:16:23.574984'
    - '2013-06-25 06:14:04.752016'
    - Similar to instance_method, searches public method only.
    - 
  - - 1345
    - Module#public_instance_methods(include_super=true) =>array
    - 65
    - '2013-06-23 00:16:24.034709'
    - '2013-06-25 06:14:04.909045'
    - ! 'Returns a list of the public instance methods defined in mod. If

      the optional parameter is not false, the methods of any

      ancestors are included.'
    - 
  - - 1346
    - Module#public_method_defined?(symbol) =>true or false
    - 65
    - '2013-06-23 00:16:24.381866'
    - '2013-06-25 06:14:05.232207'
    - 
    - 
  - - 1347
    - Module#public_method_defined?(string) =>true or false
    - 65
    - '2013-06-23 00:16:24.684970'
    - '2013-06-25 06:14:05.400136'
    - ! 'Returns true if the named public method is defined by

      mod (or its included modules and, if mod is a class, its

      ancestors). String arguments are converted to

      symbols.'
    - 
  - - 1348
    - Module#remove_class_variable(sym) =>obj
    - 65
    - '2013-06-23 00:16:25.120458'
    - '2013-06-25 06:14:05.556963'
    - ! 'Removes the definition of the sym, returning that constant’s

      value.'
    - 
  - - 1349
    - Module#to_s =>string
    - 65
    - '2013-06-23 00:16:25.423258'
    - '2013-06-25 06:14:05.704546'
    - ! 'Return a string representing this module or class. For basic classes and

      modules, this is the name. For singletons, we show information on the thing

      we’re attached to as well.'
    - 
  - - 1350
    - Module#alias_method(new_name, old_name) =>self
    - 65
    - '2013-06-23 00:16:25.760683'
    - '2013-06-25 06:14:05.861505'
    - ! 'Makes new_name a new copy of the method old_name. This

      can be used to retain access to methods that are overridden.'
    - 
  - - 1351
    - Module#append_features(mod) =>mod
    - 65
    - '2013-06-23 00:16:26.218930'
    - '2013-06-25 06:14:06.028826'
    - ! 'When this module is included in another, Ruby calls

      append_features in this module, passing it the receiving

      module in mod. Ruby’s default implementation is to add the

      constants, methods, and module variables of this module to mod if

      this module has not already been added to mod or one of its

      ancestors. See also Module#include.'
    - 
  - - 1352
    - Module#attr_accessor(symbol, ...) =>nil
    - 65
    - '2013-06-23 00:16:26.543694'
    - '2013-06-25 06:14:06.186885'
    - 
    - 
  - - 1353
    - Module#attr_accessor(string, ...) =>nil
    - 65
    - '2013-06-23 00:16:26.857405'
    - '2013-06-25 06:14:06.498089'
    - ! 'Defines a named attribute for this module, where the name is

      symbol.id2name, creating an instance variable

      (@name) and a corresponding access method to read it. Also

      creates a method called name= to set the attribute. String arguments are converted
      to symbols.'
    - 
  - - 1354
    - Module#attr_reader(symbol, ...) =>nil
    - 65
    - '2013-06-23 00:16:27.327917'
    - '2013-06-25 06:14:06.666312'
    - 
    - 
  - - 1355
    - Module#attr(symbol, ...) =>nil
    - 65
    - '2013-06-23 00:16:27.619580'
    - '2013-06-25 06:14:06.967388'
    - 
    - 
  - - 1356
    - Module#attr_reader(string, ...) =>nil
    - 65
    - '2013-06-23 00:16:27.922282'
    - '2013-06-25 06:14:07.135680'
    - 
    - 
  - - 1357
    - Module#attr(string, ...) =>nil
    - 65
    - '2013-06-23 00:16:28.413451'
    - '2013-06-25 06:14:07.280859'
    - ! 'Creates instance variables and corresponding methods that return the value

      of each instance variable. Equivalent to calling

      “attr:name” on each name in turn. String arguments are converted to symbols.'
    - 
  - - 1358
    - Module#attr_writer(symbol, ...) =>nil
    - 65
    - '2013-06-23 00:16:28.749386'
    - '2013-06-25 06:14:07.562830'
    - 
    - 
  - - 1359
    - Module#attr_writer(string, ...) =>nil
    - 65
    - '2013-06-23 00:16:29.064255'
    - '2013-06-25 06:14:07.718831'
    - ! 'Creates an accessor method to allow assignment to the attribute

      symbol.id2name. String

      arguments are converted to symbols.'
    - 
  - - 1360
    - Module#define_method(symbol, method) =>new_method
    - 65
    - '2013-06-23 00:16:29.523003'
    - '2013-06-25 06:14:07.876235'
    - 
    - 
  - - 1361
    - Module#define_method(symbol) { block } =>proc
    - 65
    - '2013-06-23 00:16:29.858432'
    - '2013-06-25 06:14:08.043264'
    - ! 'Defines an instance method in the receiver. The method parameter

      can be a Proc, a Method or an

      UnboundMethod object. If a block is specified, it is used as

      the method body. This block is evaluated using instance_eval,

      a point that is tricky to demonstrate because define_method is

      private. (This is why we resort to the send hack in this

      example.)'
    - 
  - - 1362
    - Module#extend_object(obj) =>obj
    - 65
    - '2013-06-23 00:16:30.193935'
    - '2013-06-25 06:14:08.211863'
    - ! 'Extends the specified object by adding this module’s constants and methods

      (which are added as singleton methods). This is the callback method used by

      Object#extend.'
    - 
  - - 1363
    - Module#include(module, ...) =>self
    - 65
    - '2013-06-23 00:16:30.653902'
    - '2013-06-25 06:14:08.379000'
    - ! 'Invokes Module.append_features on each parameter in reverse

      order.'
    - 
  - - 1364
    - Module#included( othermod )
    - 65
    - '2013-06-23 00:16:30.956504'
    - '2013-06-25 04:12:54.148793'
    - ! 'Callback invoked whenever the receiver is included in another module or

      class. This should be used in preference to

      Module.append_features if your code wants to perform some

      action when a module is included in another.'
    - 
  - - 1365
    - Module#method_added(method_name)
    - 65
    - '2013-06-23 00:16:31.404068'
    - '2013-06-25 04:12:54.306507'
    - Invoked as a callback whenever an instance method is added to the receiver.
    - 
  - - 1366
    - Module#method_removed(method_name)
    - 65
    - '2013-06-23 00:16:31.917908'
    - '2013-06-25 04:12:54.473395'
    - ! 'Invoked as a callback whenever an instance method is removed from the

      receiver.'
    - 
  - - 1367
    - Module#module_function(symbol, ...) =>self
    - 65
    - '2013-06-23 00:16:32.397406'
    - '2013-06-25 06:14:08.691342'
    - 
    - 
  - - 1368
    - Module#module_function(string, ...) =>self
    - 65
    - '2013-06-23 00:16:33.001725'
    - '2013-06-25 06:14:08.836877'
    - ! 'Creates module functions for the named methods. These functions may be

      called with the module as a receiver, and also become available as instance

      methods to classes that mix in the module. Module

      functions are copies of the original, and so may be changed independently.

      The instance-method versions are made private. If used with no arguments,

      subsequently defined methods become module functions. String arguments are converted
      to symbols.'
    - 
  - - 1369
    - Module#prepend(module, ...) =>self
    - 65
    - '2013-06-23 00:16:33.637624'
    - '2013-06-25 06:14:08.983261'
    - ! 'Invokes Module.prepend_features on each parameter in reverse

      order.'
    - 
  - - 1370
    - Module#prepend_features(mod) =>mod
    - 65
    - '2013-06-23 00:16:34.106301'
    - '2013-06-25 06:14:09.130155'
    - ! 'When this module is prepended in another, Ruby calls

      prepend_features in this module, passing it the receiving

      module in mod. Ruby’s default implementation is to overlay the

      constants, methods, and module variables of this module to mod if

      this module has not already been added to mod or one of its

      ancestors. See also Module#prepend.'
    - 
  - - 1371
    - Module#prepended( othermod )
    - 65
    - '2013-06-23 00:16:34.709290'
    - '2013-06-25 04:12:55.126118'
    - The equivalent of included, but for prepended modules.
    - 
  - - 1372
    - Module#private =>self
    - 65
    - '2013-06-23 00:16:35.313579'
    - '2013-06-25 06:14:09.287816'
    - 
    - 
  - - 1373
    - Module#private(symbol, ...) =>self
    - 65
    - '2013-06-23 00:16:35.804564'
    - '2013-06-25 06:14:09.454699'
    - 
    - 
  - - 1374
    - Module#private(string, ...) =>self
    - 65
    - '2013-06-23 00:16:36.429950'
    - '2013-06-25 06:14:09.623503'
    - ! 'With no arguments, sets the default visibility for subsequently defined

      methods to private. With arguments, sets the named methods to have private

      visibility. String arguments are converted to

      symbols.'
    - 
  - - 1375
    - Module#protected =>self
    - 65
    - '2013-06-23 00:16:36.942870'
    - '2013-06-25 06:14:09.935975'
    - 
    - 
  - - 1376
    - Module#protected(symbol, ...) =>self
    - 65
    - '2013-06-23 00:16:37.445581'
    - '2013-06-25 06:14:10.092790'
    - 
    - 
  - - 1377
    - Module#protected(string, ...) =>self
    - 65
    - '2013-06-23 00:16:38.374589'
    - '2013-06-25 06:14:10.248497'
    - ! 'With no arguments, sets the default visibility for subsequently defined

      methods to protected. With arguments, sets the named methods to have

      protected visibility. String arguments are

      converted to symbols.'
    - 
  - - 1378
    - Module#public =>self
    - 65
    - '2013-06-23 00:16:38.836206'
    - '2013-06-25 06:14:10.383912'
    - 
    - 
  - - 1379
    - Module#public(symbol, ...) =>self
    - 65
    - '2013-06-23 00:16:39.434858'
    - '2013-06-25 06:14:10.529075'
    - 
    - 
  - - 1380
    - Module#public(string, ...) =>self
    - 65
    - '2013-06-23 00:16:40.026343'
    - '2013-06-25 06:14:10.674260'
    - ! 'With no arguments, sets the default visibility for subsequently defined

      methods to public. With arguments, sets the named methods to have public

      visibility. String arguments are converted to

      symbols.'
    - 
  - - 1381
    - Module#refine(klass) { block } =>module
    - 65
    - '2013-06-23 00:16:40.497153'
    - '2013-06-25 06:14:10.977578'
    - Refine klass in the receiver.
    - 
  - - 1382
    - Module#remove_const(sym) =>obj
    - 65
    - '2013-06-23 00:16:41.088466'
    - '2013-06-25 06:14:11.145717'
    - ! 'Removes the definition of the given constant, returning that constant’s

      previous value.  If that constant referred to a module, this will not

      change that module’s name and can lead to confusion.'
    - 
  - - 1383
    - Module#remove_method(symbol) =>self
    - 65
    - '2013-06-23 00:16:41.535288'
    - '2013-06-25 06:14:11.313388'
    - 
    - 
  - - 1384
    - Module#remove_method(string) =>self
    - 65
    - '2013-06-23 00:16:41.893439'
    - '2013-06-25 06:14:11.592386'
    - ! 'Removes the method identified by symbol from the current class.

      For an example, see Module.undef_method. String arguments are converted to symbols.'
    - 
  - - 1385
    - Module#undef_method(symbol) =>self
    - 65
    - '2013-06-23 00:16:42.230917'
    - '2013-06-25 06:14:11.772243'
    - 
    - 
  - - 1386
    - Module#undef_method(string) =>self
    - 65
    - '2013-06-23 00:16:42.533637'
    - '2013-06-25 06:14:12.062343'
    - ! 'Prevents the current class from responding to calls to the named method.

      Contrast this with remove_method, which deletes the method

      from the particular class; Ruby will still search superclasses and mixed-in

      modules for a possible receiver. String arguments

      are converted to symbols.'
    - 
  - - 1387
    - Module#using(module) =>self
    - 65
    - '2013-06-23 00:16:42.980236'
    - '2013-06-25 06:14:12.207272'
    - ! 'Import class refinements from module into the current class or

      module definition.'
    - 
  - - 1388
    - Mutex#new =>mutex
    - 66
    - '2013-06-23 00:17:32.514765'
    - '2013-06-25 06:14:12.486879'
    - Creates a new Mutex
    - 
  - - 1389
    - Mutex#lock =>self
    - 66
    - '2013-06-23 00:17:32.964760'
    - '2013-06-25 06:14:12.787529'
    - ! 'Attempts to grab the lock and waits if it isn’t available. Raises

      ThreadError if mutex was locked by the current

      thread.'
    - 
  - - 1390
    - Mutex#locked? =>true or false
    - 66
    - '2013-06-23 00:17:33.289383'
    - '2013-06-25 06:14:13.114342'
    - Returns true if this lock is currently held by some thread.
    - 
  - - 1391
    - Mutex#owned? =>true or false
    - 66
    - '2013-06-23 00:17:33.804902'
    - '2013-06-25 06:14:13.424834'
    - ! 'Returns true if this lock is currently held by current thread.

      This API is experimental, and subject to change.'
    - 
  - - 1392
    - Mutex#sleep(timeout = nil) =>number
    - 66
    - '2013-06-23 00:17:34.118234'
    - '2013-06-25 06:14:13.737424'
    - ! 'Releases the lock and sleeps timeout seconds if it is given

      and non-nil or forever.  Raises ThreadError if

      mutex wasn’t locked by the current thread.'
    - 
  - - 1393
    - Mutex#synchronize { ... } =>result of the block
    - 66
    - '2013-06-23 00:17:34.420314'
    - '2013-06-25 06:14:14.016642'
    - ! 'Obtains a lock, runs the block, and releases the lock when the block

      completes.  See the example under Mutex.'
    - 
  - - 1394
    - Mutex#try_lock =>true or false
    - 66
    - '2013-06-23 00:17:34.734058'
    - '2013-06-25 06:14:14.296158'
    - ! 'Attempts to obtain the lock and returns immediately. Returns

      true if the lock was granted.'
    - 
  - - 1395
    - Mutex#unlock =>self
    - 66
    - '2013-06-23 00:17:35.192015'
    - '2013-06-25 06:14:14.598653'
    - ! 'Releases the lock. Raises ThreadError if mutex

      wasn’t locked by the current thread.'
    - 
  - - 1396
    - NameError#new(msg [, name]) =>name_error
    - 67
    - '2013-06-23 00:17:38.830042'
    - '2013-06-25 06:14:14.897853'
    - ! 'Construct a new NameError exception. If given

      the name parameter may subsequently be examined using the

      NameError.name method.'
    - 
  - - 1397
    - NameError#name =>string or nil
    - 67
    - '2013-06-23 00:17:39.310961'
    - '2013-06-25 06:14:15.210549'
    - ! 'Return the name associated with this NameError

      exception.'
    - 
  - - 1398
    - NameError#to_s =>string
    - 67
    - '2013-06-23 00:17:39.635453'
    - '2013-06-25 06:14:15.511976'
    - Produce a nicely-formatted string representing the NameError.
    - 
  - - 1399
    - NoMethodError#new(msg, name [, args]) =>no_method_error
    - 70
    - '2013-06-23 00:17:48.468179'
    - '2013-06-25 06:14:15.826765'
    - ! 'Construct a NoMethodError exception for a

      method of the given name called with the given arguments. The name may be

      accessed using the #name method on the resulting object, and

      the arguments using the #args method.'
    - 
  - - 1400
    - NoMethodError#args =>obj
    - 70
    - '2013-06-23 00:17:48.923766'
    - '2013-06-25 06:14:16.115688'
    - Return the arguments passed in as the third parameter to the constructor.
    - 
  - - 1401
    - Numeric#+num =>num
    - 72
    - '2013-06-23 00:17:53.550829'
    - '2013-06-25 06:14:16.395761'
    - Unary Plus—Returns the receiver’s value.
    - 
  - - 1402
    - Numeric#-num =>numeric
    - 72
    - '2013-06-23 00:17:53.911184'
    - '2013-06-25 06:14:16.685191'
    - Unary Minus—Returns the receiver’s value, negated.
    - 
  - - 1403
    - Numeric#number other =>0 or nil
    - 72
    - '2013-06-23 00:17:54.224516'
    - '2013-06-25 06:14:16.864950'
    - ! 'Returns zero if number equals other, otherwise

      nil is returned if the two values are incomparable.'
    - 
  - - 1404
    - Numeric#abs =>numeric
    - 72
    - '2013-06-23 00:17:54.604508'
    - '2013-06-25 06:14:17.165173'
    - Returns the absolute value of num.
    - 
  - - 1405
    - Numeric#abs2 =>real
    - 72
    - '2013-06-23 00:17:54.930011'
    - '2013-06-25 06:14:17.333296'
    - Returns square of self.
    - 
  - - 1406
    - Numeric#angle =>0 or float
    - 72
    - '2013-06-23 00:17:55.360208'
    - '2013-06-25 06:14:17.646830'
    - Returns 0 if the value is positive, pi otherwise.
    - 
  - - 1407
    - Numeric#arg =>0 or float
    - 72
    - '2013-06-23 00:17:55.924910'
    - '2013-06-25 06:14:17.957587'
    - Returns 0 if the value is positive, pi otherwise.
    - 
  - - 1408
    - Numeric#ceil =>integer
    - 72
    - '2013-06-23 00:17:56.579328'
    - '2013-06-25 06:14:18.261171'
    - ! 'Returns the smallest Integer greater than or equal to

      num. Class Numeric achieves

      this by converting itself to a Float then invoking

      Float#ceil.'
    - 
  - - 1409
    - Numeric#coerce(numeric) =>array
    - 72
    - '2013-06-23 00:17:57.212232'
    - '2013-06-25 06:14:18.529623'
    - ! 'If aNumeric is the same type as num, returns an array

      containing aNumeric and num. Otherwise, returns an array

      with both aNumeric and num represented as

      Float objects. This coercion mechanism is used by Ruby to

      handle mixed-type numeric operations: it is intended to find a compatible

      common type between the two operands of the operator.'
    - 
  - - 1410
    - Numeric#conj =>self
    - 72
    - '2013-06-23 00:17:57.590894'
    - '2013-06-25 06:14:18.685672'
    - 
    - 
  - - 1411
    - Numeric#conjugate =>self
    - 72
    - '2013-06-23 00:17:57.926399'
    - '2013-06-25 06:14:18.965249'
    - Returns self.
    - 
  - - 1412
    - Numeric#conjugate =>self
    - 72
    - '2013-06-23 00:17:58.264232'
    - '2013-06-25 06:14:19.265623'
    - 
    - 
  - - 1413
    - Numeric#denominator =>integer
    - 72
    - '2013-06-23 00:17:58.556474'
    - '2013-06-25 06:14:19.577867'
    - Returns the denominator (always positive).
    - 
  - - 1414
    - Numeric#div(numeric) =>integer
    - 72
    - '2013-06-23 00:17:58.857900'
    - '2013-06-25 06:14:19.890324'
    - ! 'Uses / to perform division, then converts the result to an

      integer. numeric does not define the / operator;

      this is left to subclasses.'
    - 
  - - 1415
    - Numeric#divmod(numeric) =>array
    - 72
    - '2013-06-23 00:17:59.238699'
    - '2013-06-25 06:14:20.192460'
    - ! 'Returns an array containing the quotient and modulus obtained by dividing

      num by numeric. If q, r = x.divmod(y), then'
    - 
  - - 1416
    - Numeric#eql?(numeric) =>true or false
    - 72
    - '2013-06-23 00:17:59.562935'
    - '2013-06-25 06:14:20.503868'
    - ! 'Returns true if num and numeric are the same

      type and have equal values.'
    - 
  - - 1417
    - Numeric#fdiv(numeric) =>float
    - 72
    - '2013-06-23 00:17:59.891604'
    - '2013-06-25 06:14:20.795956'
    - Returns float division.
    - 
  - - 1418
    - Numeric#floor =>integer
    - 72
    - '2013-06-23 00:18:00.283335'
    - '2013-06-25 06:14:20.930208'
    - ! 'Returns the largest integer less than or equal to num.

      Numeric implements this by converting anInteger to a

      Float and invoking Float#floor.'
    - 
  - - 1419
    - Numeric#i =>Complex(0,num)
    - 72
    - '2013-06-23 00:18:00.630059'
    - '2013-06-25 06:14:21.242887'
    - ! 'Returns the corresponding imaginary number. Not available for complex

      numbers.'
    - 
  - - 1420
    - Numeric#imag =>0
    - 72
    - '2013-06-23 00:18:00.967970'
    - '2013-06-25 06:14:21.566859'
    - 
    - 
  - - 1421
    - Numeric#imaginary =>0
    - 72
    - '2013-06-23 00:18:01.303757'
    - '2013-06-25 06:14:21.868081'
    - Returns zero.
    - 
  - - 1422
    - Numeric#imaginary =>0
    - 72
    - '2013-06-23 00:18:01.717699'
    - '2013-06-25 06:14:22.058411'
    - 
    - 
  - - 1423
    - Numeric#integer? =>true or false
    - 72
    - '2013-06-23 00:18:02.064515'
    - '2013-06-25 06:14:22.371535'
    - ! 'Returns true if num is an Integer (including Fixnum

      and Bignum).'
    - 
  - - 1424
    - Numeric#magnitude =>numeric
    - 72
    - '2013-06-23 00:18:02.369103'
    - '2013-06-25 06:14:22.683026'
    - Returns the absolute value of num.
    - 
  - - 1425
    - Numeric#modulo(numeric) =>real
    - 72
    - '2013-06-23 00:18:02.716082'
    - '2013-06-25 06:14:22.840602'
    - Equivalent to num.divmod(aNumeric).
    - 
  - - 1426
    - Numeric#nonzero? =>self or nil
    - 72
    - '2013-06-23 00:18:03.062949'
    - '2013-06-25 06:14:23.121206'
    - ! 'Returns self if num is not zero, nil

      otherwise. This behavior is useful when chaining comparisons:'
    - 
  - - 1427
    - Numeric#numerator =>integer
    - 72
    - '2013-06-23 00:18:03.410222'
    - '2013-06-25 06:14:23.422179'
    - Returns the numerator.
    - 
  - - 1428
    - Numeric#phase =>0 or float
    - 72
    - '2013-06-23 00:18:03.723490'
    - '2013-06-25 06:14:23.745641'
    - Returns 0 if the value is positive, pi otherwise.
    - 
  - - 1429
    - Numeric#polar =>array
    - 72
    - '2013-06-23 00:18:04.050465'
    - '2013-06-25 06:14:24.058031'
    - Returns an array; [num.abs, num.arg].
    - 
  - - 1430
    - Numeric#quo(int_or_rat) =>rat
    - 72
    - '2013-06-23 00:18:04.374985'
    - '2013-06-25 06:14:24.381732'
    - 
    - 
  - - 1431
    - Numeric#quo(flo) =>flo
    - 72
    - '2013-06-23 00:18:04.733660'
    - '2013-06-25 06:14:24.737918'
    - Returns most exact division (rational for integers, float for floats).
    - 
  - - 1432
    - Numeric#real =>self
    - 72
    - '2013-06-23 00:18:05.014489'
    - '2013-06-25 06:14:24.895264'
    - Returns self.
    - 
  - - 1433
    - Numeric#real? =>true or false
    - 72
    - '2013-06-23 00:18:05.352014'
    - '2013-06-25 06:14:25.163392'
    - ! 'Returns true if num is a Real (i.e. non

      Complex).'
    - 
  - - 1434
    - Numeric#rect =>array
    - 72
    - '2013-06-23 00:18:05.698674'
    - '2013-06-25 06:14:25.442251'
    - 
    - 
  - - 1435
    - Numeric#rectangular =>array
    - 72
    - '2013-06-23 00:18:06.034993'
    - '2013-06-25 06:14:25.745569'
    - Returns an array; [num, 0].
    - 
  - - 1436
    - Numeric#rectangular =>array
    - 72
    - '2013-06-23 00:18:06.370803'
    - '2013-06-25 06:14:26.057580'
    - 
    - 
  - - 1437
    - Numeric#remainder(numeric) =>real
    - 72
    - '2013-06-23 00:18:06.708969'
    - '2013-06-25 06:14:26.225258'
    - See Numeric#divmod.
    - 
  - - 1438
    - Numeric#round([ndigits]) =>integer or float
    - 72
    - '2013-06-23 00:18:07.033567'
    - '2013-06-25 06:14:26.538118'
    - ! 'Rounds num to a given precision in decimal digits (default 0

      digits). Precision may be negative.  Returns a floating point number when

      ndigits is more than zero.  Numeric implements this

      by converting itself to a Float and invoking

      Float#round.'
    - 
  - - 1439
    - Numeric#step(limit[, step]) {|i| block } =>self
    - 72
    - '2013-06-23 00:18:07.313723'
    - '2013-06-25 06:14:26.861007'
    - 
    - 
  - - 1440
    - Numeric#step(limit[, step]) =>an_enumerator
    - 72
    - '2013-06-23 00:18:07.661054'
    - '2013-06-25 06:14:27.173860'
    - ! 'Invokes block with the sequence of numbers starting at

      num, incremented by step (default 1) on each call. The

      loop finishes when the value to be passed to the block is greater than

      limit (if step is positive) or less than limit

      (if step is negative). If all the arguments are integers, the loop

      operates using an integer counter. If any of the arguments are floating

      point numbers, all are converted to floats, and the loop is executed

      floor(n + n*epsilon)+ 1 times, where n = (limit -

      num)/step. Otherwise, the loop starts at num, uses either the

      < or > operator to compare the counter

      against limit, and increments itself using the +

      operator.'
    - 
  - - 1441
    - Numeric#to_c =>complex
    - 72
    - '2013-06-23 00:18:08.007792'
    - '2013-06-25 06:14:27.463726'
    - Returns the value as a complex.
    - 
  - - 1442
    - Numeric#to_int =>integer
    - 72
    - '2013-06-23 00:18:08.323775'
    - '2013-06-25 06:14:27.631973'
    - ! 'Invokes the child class’s to_i method to convert

      num to an integer.'
    - 
  - - 1443
    - Numeric#truncate =>integer
    - 72
    - '2013-06-23 00:18:08.636925'
    - '2013-06-25 06:14:27.777406'
    - ! 'Returns num truncated to an integer. Numeric

      implements this by converting its value to a float and invoking

      Float#truncate.'
    - 
  - - 1444
    - Numeric#zero? =>true or false
    - 72
    - '2013-06-23 00:18:08.983905'
    - '2013-06-25 06:14:28.091758'
    - Returns true if num has a zero value.
    - 
  - - 1445
    - Object#obj !~ other =>true or false
    - 73
    - '2013-06-23 00:18:16.208895'
    - '2013-06-25 06:14:28.403936'
    - ! 'Returns true if two objects do not match (using the =~ method),

      otherwise false.'
    - 
  - - 1446
    - Object#obj other =>0 or nil
    - 73
    - '2013-06-23 00:18:16.526013'
    - '2013-06-25 06:14:28.727256'
    - Returns 0 if obj === other, otherwise nil.
    - 
  - - 1447
    - Object#obj === other =>true or false
    - 73
    - '2013-06-23 00:18:16.873623'
    - '2013-06-25 06:14:29.006935'
    - ! 'Case Equality – For class Object, effectively the

      same as calling #==, but typically overridden by descendants

      to provide meaningful semantics in case statements.'
    - 
  - - 1448
    - Object#obj =~ other =>nil
    - 73
    - '2013-06-23 00:18:17.220404'
    - '2013-06-25 06:14:29.163235'
    - ! 'Pattern Match—Overridden by descendants (notably Regexp and

      String) to provide meaningful pattern-match semantics.'
    - 
  - - 1449
    - Object#class =>class
    - 73
    - '2013-06-23 00:18:17.555755'
    - '2013-06-25 06:14:29.453797'
    - ! 'Returns the class of obj. This method must always be called with

      an explicit receiver, as class is also a reserved word in

      Ruby.'
    - 
  - - 1450
    - Object#clone =>an_object
    - 73
    - '2013-06-23 00:18:17.893976'
    - '2013-06-25 06:14:29.733267'
    - ! 'Produces a shallow copy of obj—the instance variables of

      obj are copied, but not the objects they reference. Copies the

      frozen and tainted state of obj. See also the discussion under

      Object#dup.'
    - 
  - - 1451
    - Object#define_singleton_method(symbol, method) =>new_method
    - 73
    - '2013-06-23 00:18:18.240650'
    - '2013-06-25 06:14:30.034534'
    - 
    - 
  - - 1452
    - Object#define_singleton_method(symbol) { block } =>proc
    - 73
    - '2013-06-23 00:18:18.588165'
    - '2013-06-25 06:14:30.348827'
    - ! 'Defines a singleton method in the receiver. The method parameter

      can be a Proc, a Method or an

      UnboundMethod object. If a block is specified, it is used as

      the method body.'
    - 
  - - 1453
    - Object#display(port=$>) =>nil
    - 73
    - '2013-06-23 00:18:18.923944'
    - '2013-06-25 06:14:30.516432'
    - ! 'Prints obj on the given port (default $>).

      Equivalent to:'
    - 
  - - 1454
    - Object#dup =>an_object
    - 73
    - '2013-06-23 00:18:19.217069'
    - '2013-06-25 06:14:30.829306'
    - ! 'Produces a shallow copy of obj—the instance variables of

      obj are copied, but not the objects they reference.

      dup copies the tainted state of obj. See also the

      discussion under Object#clone. In general, clone

      and dup may have different semantics in descendant classes.

      While clone is used to duplicate an object, including its

      internal state, dup typically uses the class of the descendant

      object to create the new instance.'
    - 
  - - 1455
    - Object#enum_for(method = :each, *args) =>enum
    - 73
    - '2013-06-23 00:18:19.541787'
    - '2013-06-25 06:14:31.108290'
    - 
    - 
  - - 1456
    - Object#enum_for(method = :each, *args){|*args| block} =>enum
    - 73
    - '2013-06-23 00:18:19.912047'
    - '2013-06-25 06:14:31.398105'
    - ! 'Creates a new Enumerator which will enumerate

      by calling method on obj, passing

      args if any.'
    - 
  - - 1457
    - Object#obj == other =>true or false
    - 73
    - '2013-06-23 00:18:20.203892'
    - '2013-06-25 06:14:31.533234'
    - 
    - 
  - - 1458
    - Object#equal?(other) =>true or false
    - 73
    - '2013-06-23 00:18:20.519314'
    - '2013-06-25 06:14:31.824635'
    - 
    - 
  - - 1459
    - Object#eql?(other) =>true or false
    - 73
    - '2013-06-23 00:18:20.866062'
    - '2013-06-25 06:14:32.135889'
    - ! 'Equality — At the Object level, == returns

      true only if obj and other are the

      same object. Typically, this method is overridden in descendant classes to

      provide class-specific meaning.'
    - 
  - - 1460
    - Object#extend(module, ...) =>obj
    - 73
    - '2013-06-23 00:18:21.190978'
    - '2013-06-25 06:14:32.448150'
    - ! 'Adds to obj the instance methods from each module given as a

      parameter.'
    - 
  - - 1461
    - Object#freeze =>obj
    - 73
    - '2013-06-23 00:18:21.504680'
    - '2013-06-25 06:14:32.729106'
    - ! 'Prevents further modifications to obj. A RuntimeError

      will be raised if modification is attempted. There is no way to unfreeze a

      frozen object. See also Object#frozen?.'
    - 
  - - 1462
    - Object#frozen? =>true or false
    - 73
    - '2013-06-23 00:18:21.856831'
    - '2013-06-25 06:14:32.886584'
    - Returns the freeze status of obj.
    - 
  - - 1463
    - Object#inspect =>string
    - 73
    - '2013-06-23 00:18:22.179071'
    - '2013-06-25 06:14:33.198777'
    - ! 'Returns a string containing a human-readable representation of

      obj. By default, show the class name and the list of the instance

      variables and their values (by calling inspect on each of them). User

      defined classes should override this method to make better representation

      of obj.  When overriding this method, it should return a string

      whose encoding is compatible with the default external encoding.'
    - 
  - - 1464
    - Object#instance_of?(class) =>true or false
    - 73
    - '2013-06-23 00:18:22.492359'
    - '2013-06-25 06:14:33.477601'
    - ! 'Returns true if obj is an instance of the given

      class. See also Object#kind_of?.'
    - 
  - - 1465
    - Object#instance_variable_defined?(symbol) =>true or false
    - 73
    - '2013-06-23 00:18:22.839158'
    - '2013-06-25 06:14:33.668189'
    - 
    - 
  - - 1466
    - Object#instance_variable_defined?(string) =>true or false
    - 73
    - '2013-06-23 00:18:23.175650'
    - '2013-06-25 06:14:33.991053'
    - ! 'Returns true if the given instance variable is defined in

      obj. String arguments are converted to

      symbols.'
    - 
  - - 1467
    - Object#instance_variable_get(symbol) =>obj
    - 73
    - '2013-06-23 00:18:23.502076'
    - '2013-06-25 06:14:34.136978'
    - 
    - 
  - - 1468
    - Object#instance_variable_get(string) =>obj
    - 73
    - '2013-06-23 00:18:23.782702'
    - '2013-06-25 06:14:34.437676'
    - ! 'Returns the value of the given instance variable, or nil if the instance

      variable is not set. The @ part of the variable name should be

      included for regular instance variables. Throws a NameError

      exception if the supplied symbol is not valid as an instance variable name.

      String arguments are converted to symbols.'
    - 
  - - 1469
    - Object#instance_variable_set(symbol, obj) =>obj
    - 73
    - '2013-06-23 00:18:24.118353'
    - '2013-06-25 06:14:34.739356'
    - 
    - 
  - - 1470
    - Object#instance_variable_set(string, obj) =>obj
    - 73
    - '2013-06-23 00:18:24.443209'
    - '2013-06-25 06:14:35.053622'
    - ! 'Sets the instance variable names by symbol to object,

      thereby frustrating the efforts of the class’s author to attempt to provide

      proper encapsulation. The variable did not have to exist prior to this

      call. If the instance variable name is passed as a string, that string is

      converted to a symbol.'
    - 
  - - 1471
    - Object#instance_variables =>array
    - 73
    - '2013-06-23 00:18:24.769829'
    - '2013-06-25 06:14:35.355124'
    - ! 'Returns an array of instance variable names for the receiver. Note that

      simply defining an accessor does not create the corresponding instance

      variable.'
    - 
  - - 1472
    - Object#is_a?(class) =>true or false
    - 73
    - '2013-06-23 00:18:25.062423'
    - '2013-06-25 06:14:35.645166'
    - ! 'Returns true if class is the class of obj,

      or if class is one of the superclasses of obj or modules

      included in obj.'
    - 
  - - 1473
    - Object#kind_of?(class) =>true or false
    - 73
    - '2013-06-23 00:18:25.397050'
    - '2013-06-25 06:14:35.957177'
    - ! 'Returns true if class is the class of obj,

      or if class is one of the superclasses of obj or modules

      included in obj.'
    - 
  - - 1474
    - Object#method(sym) =>method
    - 73
    - '2013-06-23 00:18:25.722099'
    - '2013-06-25 06:14:36.269756'
    - ! 'Looks up the named method as a receiver in obj, returning a

      Method object (or raising NameError). The

      Method object acts as a closure in obj’s object

      instance, so instance variables and the value of self remain

      available.'
    - 
  - - 1475
    - Object#methods(regular=true) =>array
    - 73
    - '2013-06-23 00:18:26.060435'
    - '2013-06-25 06:14:36.415472'
    - ! 'Returns a list of the names of public and protected methods of

      obj. This will include all the methods accessible in

      obj’s ancestors. If the regular parameter is set to

      false, Returns an array of obj’s public and protected

      singleton methods, the array will not include methods in modules included

      in obj.'
    - 
  - - 1476
    - Object#nil? =>true
    - 73
    - '2013-06-23 00:18:26.385202'
    - '2013-06-25 06:14:36.705577'
    - 
    - 
  - - 1477
    - Object#.nil? =>false
    - 73
    - '2013-06-23 00:18:26.709732'
    - '2013-06-25 06:14:37.052568'
    - ! 'Only the object nil responds true to

      nil?.'
    - 
  - - 1478
    - Object#__id__ =>integer
    - 73
    - '2013-06-23 00:18:27.023535'
    - '2013-06-25 06:14:37.358332'
    - 
    - 
  - - 1479
    - Object#object_id =>integer
    - 73
    - '2013-06-23 00:18:27.326101'
    - '2013-06-25 06:14:37.660025'
    - Returns an integer identifier for obj.
    - 
  - - 1480
    - Object#private_methods(all=true) =>array
    - 73
    - '2013-06-23 00:18:27.653069'
    - '2013-06-25 06:14:37.961041'
    - ! 'Returns the list of private methods accessible to obj. If the

      all parameter is set to false, only those methods in

      the receiver will be listed.'
    - 
  - - 1481
    - Object#protected_methods(all=true) =>array
    - 73
    - '2013-06-23 00:18:27.977439'
    - '2013-06-25 06:14:38.273398'
    - ! 'Returns the list of protected methods accessible to obj. If the

      all parameter is set to false, only those methods in

      the receiver will be listed.'
    - 
  - - 1482
    - Object#public_method(sym) =>method
    - 73
    - '2013-06-23 00:18:28.291089'
    - '2013-06-25 06:14:38.586448'
    - Similar to method, searches public method only.
    - 
  - - 1483
    - Object#public_methods(all=true) =>array
    - 73
    - '2013-06-23 00:18:28.593646'
    - '2013-06-25 06:14:38.787019'
    - ! 'Returns the list of public methods accessible to obj. If the

      all parameter is set to false, only those methods in

      the receiver will be listed.'
    - 
  - - 1484
    - Object#public_send(symbol [, args...]) =>obj
    - 73
    - '2013-06-23 00:18:28.909158'
    - '2013-06-25 06:14:38.943541'
    - 
    - 
  - - 1485
    - Object#public_send(string [, args...]) =>obj
    - 73
    - '2013-06-23 00:18:29.258011'
    - '2013-06-25 06:14:39.099861'
    - ! 'Invokes the method identified by symbol, passing it any arguments

      specified. Unlike send, #public_send calls public

      methods only. When the method is identified by a string, the string is

      converted to a symbol.'
    - 
  - - 1486
    - Object#remove_instance_variable(symbol) =>obj
    - 73
    - '2013-06-23 00:18:29.580746'
    - '2013-06-25 06:14:39.267789'
    - ! 'Removes the named instance variable from obj, returning that

      variable’s value.'
    - 
  - - 1487
    - Object#respond_to?(symbol, include_all=false) =>true or false
    - 73
    - '2013-06-23 00:18:30.061527'
    - '2013-06-25 06:14:39.435693'
    - 
    - 
  - - 1488
    - Object#respond_to?(string, include_all=false) =>true or false
    - 73
    - '2013-06-23 00:18:30.354886'
    - '2013-06-25 06:14:39.605844'
    - ! "Returns true if obj responds to the given method. \nPrivate and protected
      methods are included in the search only if the\noptional second parameter evaluates
      to true."
    - 
  - - 1489
    - Object#respond_to_missing?(symbol, include_all) =>true or false
    - 73
    - '2013-06-23 00:18:30.668509'
    - '2013-06-25 06:14:39.907274'
    - 
    - 
  - - 1490
    - Object#respond_to_missing?(string, include_all) =>true or false
    - 73
    - '2013-06-23 00:18:31.126353'
    - '2013-06-25 06:14:40.053170'
    - DO NOT USE THIS DIRECTLY.
    - 
  - - 1491
    - Object#send(symbol [, args...]) =>obj
    - 73
    - '2013-06-23 00:18:31.462349'
    - '2013-06-25 06:14:40.210005'
    - 
    - 
  - - 1492
    - Object#__send__(symbol [, args...]) =>obj
    - 73
    - '2013-06-23 00:18:31.764479'
    - '2013-06-25 06:14:40.355558'
    - 
    - 
  - - 1493
    - Object#send(string [, args...]) =>obj
    - 73
    - '2013-06-23 00:18:32.213768'
    - '2013-06-25 06:14:40.523625'
    - 
    - 
  - - 1494
    - Object#__send__(string [, args...]) =>obj
    - 73
    - '2013-06-23 00:18:32.539116'
    - '2013-06-25 06:14:40.691064'
    - ! 'Invokes the method identified by symbol, passing it any arguments

      specified. You can use __send__ if the name send

      clashes with an existing method in obj. When the method is

      identified by a string, the string is converted to a symbol.'
    - 
  - - 1495
    - Object#singleton_class =>class
    - 73
    - '2013-06-23 00:18:32.875647'
    - '2013-06-25 06:14:41.014746'
    - ! 'Returns the singleton class of obj.  This method creates a new

      singleton class if obj does not have it.'
    - 
  - - 1496
    - Object#singleton_method(sym) =>method
    - 73
    - '2013-06-23 00:18:33.332621'
    - '2013-06-25 06:14:41.162214'
    - Similar to method, searches singleton method only.
    - 
  - - 1497
    - Object#singleton_methods(all=true) =>array
    - 73
    - '2013-06-23 00:18:33.670462'
    - '2013-06-25 06:14:41.308801'
    - ! 'Returns an array of the names of singleton methods for obj. If the

      optional all parameter is true, the list will include methods in

      modules included in obj. Only public and protected singleton

      methods are returned.'
    - 
  - - 1498
    - Object#taint =>obj
    - 73
    - '2013-06-23 00:18:34.006117'
    - '2013-06-25 06:14:41.465629'
    - Mark the object as tainted.
    - 
  - - 1499
    - Object#tainted? =>true or false
    - 73
    - '2013-06-23 00:18:34.453060'
    - '2013-06-25 06:14:41.622348'
    - Returns true if the object is tainted.
    - 
  - - 1500
    - Object#tap{|x|...} =>obj
    - 73
    - '2013-06-23 00:18:34.766159'
    - '2013-06-25 06:14:42.111895'
    - ! 'Yields x to the block, and then returns x. The

      primary purpose of this method is to “tap into” a method chain, in order to

      perform operations on intermediate results within the chain.'
    - 
  - - 1501
    - Object#to_enum(method = :each, *args) =>enum
    - 73
    - '2013-06-23 00:18:35.058001'
    - '2013-06-25 06:14:42.279929'
    - 
    - 
  - - 1502
    - Object#to_enum(method = :each, *args) {|*args| block} =>enum
    - 73
    - '2013-06-23 00:18:35.540198'
    - '2013-06-25 06:14:42.447396'
    - ! 'Creates a new Enumerator which will enumerate

      by calling method on obj, passing

      args if any.'
    - 
  - - 1503
    - Object#to_s =>string
    - 73
    - '2013-06-23 00:18:35.876140'
    - '2013-06-25 06:14:42.615239'
    - ! 'Returns a string representing obj. The default to_s

      prints the object’s class and an encoding of the object id. As a special

      case, the top-level object that is the initial execution context of Ruby

      programs returns “main.”'
    - 
  - - 1504
    - Object#trust =>obj
    - 73
    - '2013-06-23 00:18:36.189811'
    - '2013-06-25 06:14:42.783219'
    - Deprecated method that is equivalent to untaint.
    - 
  - - 1505
    - Object#untaint =>obj
    - 73
    - '2013-06-23 00:18:36.659051'
    - '2013-06-25 06:14:42.929263'
    - Removes the tainted mark from the object.
    - 
  - - 1506
    - Object#untrust =>obj
    - 73
    - '2013-06-23 00:18:36.986177'
    - '2013-06-25 06:14:43.232140'
    - Deprecated method that is equivalent to taint.
    - 
  - - 1507
    - Object#untrusted? =>true or false
    - 73
    - '2013-06-23 00:18:37.288254'
    - '2013-06-25 06:14:43.389774'
    - Deprecated method that is equivalent to tainted?.
    - 
  - - 1508
    - ObjectSpace#_id2ref(object_id) =>an_object
    - 74
    - '2013-06-23 00:18:41.699071'
    - '2013-06-25 06:14:43.557555'
    - ! 'Converts an object id to a reference to the object. May not be called on
      an

      object id passed as a parameter to a finalizer.'
    - 
  - - 1509
    - ObjectSpace#count_objects([result_hash]) =>hash
    - 74
    - '2013-06-23 00:18:42.205105'
    - '2013-06-25 06:14:43.725560'
    - Counts objects for each type.
    - 
  - - 1510
    - ObjectSpace#define_finalizer(obj, aProc=proc())
    - 74
    - '2013-06-23 00:18:42.551905'
    - '2013-06-25 04:15:12.466195'
    - ! 'Adds aProc as a finalizer, to be called after obj was

      destroyed.'
    - 
  - - 1511
    - ObjectSpace#each_object([module]) {|obj| ... } =>fixnum
    - 74
    - '2013-06-23 00:18:42.856269'
    - '2013-06-25 06:14:43.892786'
    - 
    - 
  - - 1512
    - ObjectSpace#each_object([module]) =>an_enumerator
    - 74
    - '2013-06-23 00:18:43.325621'
    - '2013-06-25 06:14:44.082664'
    - ! 'Calls the block once for each living, nonimmediate object in this Ruby

      process. If module is specified, calls the block for only those

      classes or modules that match (or are a subclass of) module.

      Returns the number of objects found. Immediate objects

      (Fixnums, Symbols true,

      false, and nil) are never returned. In the

      example below, each_object returns both the numbers we defined

      and several constants defined in the Math module.'
    - 
  - - 1513
    - ObjectSpace#start =>nil
    - 74
    - '2013-06-23 00:18:43.639205'
    - '2013-06-25 06:14:44.373075'
    - 
    - 
  - - 1514
    - ObjectSpace#garbage_collect =>nil
    - 74
    - '2013-06-23 00:18:43.986412'
    - '2013-06-25 06:14:44.530446'
    - Initiates garbage collection, unless manually disabled.
    - 
  - - 1515
    - ObjectSpace#garbage_collect =>nil
    - 74
    - '2013-06-23 00:18:44.324995'
    - '2013-06-25 06:14:44.675045'
    - 
    - 
  - - 1516
    - ObjectSpace#undefine_finalizer(obj)
    - 74
    - '2013-06-23 00:18:44.615382'
    - '2013-06-25 04:15:12.929776'
    - Removes all finalizers for obj.
    - 
  - - 1517
    - Proc#new {|...| block } =>a_proc
    - 76
    - '2013-06-23 00:18:51.781456'
    - '2013-06-25 06:14:44.834457'
    - 
    - 
  - - 1518
    - Proc#new =>a_proc
    - 76
    - '2013-06-23 00:18:52.300323'
    - '2013-06-25 06:14:45.001408'
    - ! 'Creates a new Proc object, bound to the current context.

      Proc::new may be called without a block only within a method

      with an attached block, in which case that block is converted to the

      Proc object.'
    - 
  - - 1519
    - Proc#prc[params,...] =>obj
    - 76
    - '2013-06-23 00:18:52.594072'
    - '2013-06-25 06:14:45.169693'
    - ! "Invokes the block, setting the block’s parameters to the values in\nparams
      using something close to method calling semantics.\nGenerates a warning if multiple
      values are passed to a proc that expects\njust one (previously this silently
      converted the parameters to an array). \nNote that prc.() invokes prc.call()
      with the parameters given.  It’s a\nsyntax sugar to hide “call”."
    - 
  - - 1520
    - Proc#arity =>fixnum
    - 76
    - '2013-06-23 00:18:52.929584'
    - '2013-06-25 06:14:45.337406'
    - ! 'Returns the number of arguments that would not be ignored. If the block is

      declared to take no arguments, returns 0. If the block is known to take

      exactly n arguments, returns n. If the block has optional arguments, return

      -n-1, where n is the number of mandatory arguments. A proc

      with no argument declarations is the same a block declaring ||

      as its arguments.'
    - 
  - - 1521
    - Proc#binding =>binding
    - 76
    - '2013-06-23 00:18:53.409988'
    - '2013-06-25 06:14:45.638053'
    - ! 'Returns the binding associated with prc. Note that

      Kernel#eval accepts either a Proc or a

      Binding object as its second parameter.'
    - 
  - - 1522
    - Proc#call(params,...) =>obj
    - 76
    - '2013-06-23 00:18:53.712481'
    - '2013-06-25 06:14:45.806758'
    - ! "Invokes the block, setting the block’s parameters to the values in\nparams
      using something close to method calling semantics.\nGenerates a warning if multiple
      values are passed to a proc that expects\njust one (previously this silently
      converted the parameters to an array). \nNote that prc.() invokes prc.call()
      with the parameters given.  It’s a\nsyntax sugar to hide “call”."
    - 
  - - 1523
    - Proc#curry =>a_proc
    - 76
    - '2013-06-23 00:18:54.038854'
    - '2013-06-25 06:14:45.964202'
    - 
    - 
  - - 1524
    - Proc#curry(arity) =>a_proc
    - 76
    - '2013-06-23 00:18:54.507920'
    - '2013-06-25 06:14:46.109454'
    - ! 'Returns a curried proc. If the optional arity argument is given,

      it determines the number of arguments. A curried proc receives some

      arguments. If a sufficient number of arguments are supplied, it passes the

      supplied arguments to the original proc and returns the result. Otherwise,

      returns another curried proc that takes the rest of arguments.'
    - 
  - - 1525
    - Proc#hash =>integer
    - 76
    - '2013-06-23 00:18:54.844121'
    - '2013-06-25 06:14:46.265677'
    - Returns a hash value corresponding to proc body.
    - 
  - - 1526
    - Proc#lambda? =>true or false
    - 76
    - '2013-06-23 00:18:55.135951'
    - '2013-06-25 06:14:46.435052'
    - ! 'Returns true for a Proc object for

      which argument handling is rigid. Such procs are typically generated by

      lambda.'
    - 
  - - 1527
    - Proc#parameters =>array
    - 76
    - '2013-06-23 00:18:55.595676'
    - '2013-06-25 06:14:46.747762'
    - Returns the parameter information of this proc.
    - 
  - - 1528
    - Proc#source_location =>[String, Fixnum]
    - 76
    - '2013-06-23 00:18:55.942630'
    - '2013-06-25 06:14:46.916114'
    - ! 'Returns the Ruby source filename and line number containing this proc or

      nil if this proc was not defined in Ruby (i.e. native)'
    - 
  - - 1529
    - Proc#to_proc =>prc
    - 76
    - '2013-06-23 00:18:56.256172'
    - '2013-06-25 06:14:47.071829'
    - ! 'Part of the protocol for converting objects to Proc objects.

      Instances of class Proc simply return themselves.'
    - 
  - - 1530
    - Proc#to_s =>string
    - 76
    - '2013-06-23 00:18:56.580578'
    - '2013-06-25 06:14:47.217601'
    - ! 'Returns the unique identifier for this proc, along with an indication of

      where the proc was defined.'
    - 
  - - 1531
    - Process#abort
    - 77
    - '2013-06-23 00:19:01.263723'
    - '2013-06-23 06:54:23.250915'
    - 
    - 
  - - 1532
    - Process#Kernel::abort([msg])
    - 77
    - '2013-06-23 00:19:01.690069'
    - '2013-06-23 06:54:23.551013'
    - 
    - 
  - - 1533
    - Process#Process::abort([msg])
    - 77
    - '2013-06-23 00:19:01.992637'
    - '2013-06-25 04:15:27.337700'
    - ! 'Terminate execution immediately, effectively by calling

      Kernel.exit(false). If msg is given, it is written to

      STDERR prior to terminating.'
    - 
  - - 1534
    - Process#daemon() =>0
    - 77
    - '2013-06-23 00:19:02.317391'
    - '2013-06-25 06:14:47.363264'
    - 
    - 
  - - 1535
    - Process#daemon(nochdir=nil,noclose=nil) =>0
    - 77
    - '2013-06-23 00:19:02.666237'
    - '2013-06-25 06:14:47.521375'
    - ! 'Detach the process from controlling terminal and run in the background as

      system daemon.  Unless the argument nochdir is true (i.e. non false), it

      changes the current working directory to the root (“/”). Unless the

      argument noclose is true, daemon() will redirect standard input, standard

      output and standard error to /dev/null. Return zero on success, or raise

      one of Errno::*.'
    - 
  - - 1536
    - Process#detach(pid) =>thread
    - 77
    - '2013-06-23 00:19:02.980230'
    - '2013-06-25 06:14:47.833088'
    - ! 'Some operating systems retain the status of terminated child processes

      until the parent collects that status (normally using some variant of

      wait(). If the parent never collects this status, the child

      stays around as a zombie process. Process::detach

      prevents this by setting up a separate Ruby thread whose sole job is to

      reap the status of the process pid when it terminates. Use

      detach only when you do not intent to explicitly wait for the

      child to terminate.'
    - 
  - - 1537
    - Process#egid =>fixnum
    - 77
    - '2013-06-23 00:19:03.282859'
    - '2013-06-25 06:14:47.989222'
    - 
    - 
  - - 1538
    - Process#Process::GID.eid =>fixnum
    - 77
    - '2013-06-23 00:19:03.607511'
    - '2013-06-25 06:14:48.156666'
    - 
    - 
  - - 1539
    - Process#Process::Sys.geteid =>fixnum
    - 77
    - '2013-06-23 00:19:03.954529'
    - '2013-06-25 06:14:48.326953'
    - ! 'Returns the effective group ID for this process. Not available on all

      platforms.'
    - 
  - - 1540
    - Process#egid = fixnum =>fixnum
    - 77
    - '2013-06-23 00:19:04.259211'
    - '2013-06-25 06:14:48.483526'
    - ! 'Sets the effective group ID for this process. Not available on all

      platforms.'
    - 
  - - 1541
    - Process#euid =>fixnum
    - 77
    - '2013-06-23 00:19:04.572852'
    - '2013-06-25 06:14:48.629251'
    - 
    - 
  - - 1542
    - Process#Process::UID.eid =>fixnum
    - 77
    - '2013-06-23 00:19:04.919924'
    - '2013-06-25 06:14:48.908165'
    - 
    - 
  - - 1543
    - Process#Process::Sys.geteuid =>fixnum
    - 77
    - '2013-06-23 00:19:05.267253'
    - '2013-06-25 06:14:49.042753'
    - Returns the effective user ID for this process.
    - 
  - - 1544
    - Process#euid= user
    - 77
    - '2013-06-23 00:19:05.571411'
    - '2013-06-25 04:15:28.387946'
    - ! 'Sets the effective user ID for this process. Not available on all

      platforms.'
    - 
  - - 1545
    - Process#exec([env,] command... [,options])
    - 77
    - '2013-06-23 00:19:05.874135'
    - '2013-06-25 04:15:28.556091'
    - ! 'Replaces the current process by running the given external

      command, which can take one of the following forms:'
    - 
  - - 1546
    - Process#exit(status=true)
    - 77
    - '2013-06-23 00:19:06.240412'
    - '2013-06-23 06:54:27.637815'
    - 
    - 
  - - 1547
    - Process#Kernel::exit(status=true)
    - 77
    - '2013-06-23 00:19:06.601915'
    - '2013-06-23 06:54:27.786165'
    - 
    - 
  - - 1548
    - Process#Process::exit(status=true)
    - 77
    - '2013-06-23 00:19:06.895477'
    - '2013-06-25 04:15:28.713907'
    - ! 'Initiates the termination of the Ruby script by raising the

      SystemExit exception. This exception may be caught. The

      optional parameter is used to return a status code to the invoking

      environment. true and FALSE of status

      means success and failure respectively.  The interpretation of other

      integer values are system dependent.'
    - 
  - - 1549
    - Process#exit!(status=false)
    - 77
    - '2013-06-23 00:19:07.309895'
    - '2013-06-25 04:15:28.884290'
    - ! 'Exits the process immediately. No exit handlers are run. status is

      returned to the underlying system as the exit status.'
    - 
  - - 1550
    - Process#fork [{ block }] =>fixnum or nil
    - 77
    - '2013-06-23 00:19:07.790594'
    - '2013-06-25 06:14:49.177509'
    - ! 'Creates a subprocess. If a block is specified, that block is run in the

      subprocess, and the subprocess terminates with a status of zero. Otherwise,

      the fork call returns twice, once in the parent, returning the

      process ID of the child, and once in the child, returning nil. The

      child process can exit using Kernel.exit! to avoid running any

      at_exit functions. The parent process should use

      Process.wait to collect the termination statuses of its

      children or use Process.detach to register disinterest in

      their status; otherwise, the operating system may accumulate zombie

      processes.'
    - 
  - - 1551
    - Process#fork [{ block }] =>fixnum or nil
    - 77
    - '2013-06-23 00:19:08.081749'
    - '2013-06-25 06:14:49.323132'
    - 
    - 
  - - 1552
    - Process#getpgid(pid) =>integer
    - 77
    - '2013-06-23 00:19:08.385908'
    - '2013-06-25 06:14:49.491627'
    - ! 'Returns the process group ID for the given process id. Not available on all

      platforms.'
    - 
  - - 1553
    - Process#getpgrp =>integer
    - 77
    - '2013-06-23 00:19:08.732790'
    - '2013-06-25 06:14:49.658676'
    - ! 'Returns the process group ID for this process. Not available on all

      platforms.'
    - 
  - - 1554
    - Process#getpriority(kind, integer) =>fixnum
    - 77
    - '2013-06-23 00:19:09.090993'
    - '2013-06-25 06:14:49.828109'
    - ! 'Gets the scheduling priority for specified process, process group, or user.

      kind indicates the kind of entity to find: one of

      Process::PRIO_PGRP, Process::PRIO_USER, or

      Process::PRIO_PROCESS. integer is an id indicating

      the particular process, process group, or user (an id of 0 means

      current). Lower priorities are more favorable for scheduling. Not

      available on all platforms.'
    - 
  - - 1555
    - Process#getrlimit(resource) =>[cur_limit, max_limit]
    - 77
    - '2013-06-23 00:19:09.393193'
    - '2013-06-25 06:14:50.141051'
    - ! 'Gets the resource limit of the process. cur_limit means current

      (soft) limit and max_limit means maximum (hard) limit.'
    - 
  - - 1556
    - Process#getsid() =>integer
    - 77
    - '2013-06-23 00:19:09.684875'
    - '2013-06-25 06:14:50.286640'
    - 
    - 
  - - 1557
    - Process#getsid(pid) =>integer
    - 77
    - '2013-06-23 00:19:10.220127'
    - '2013-06-25 06:14:50.433491'
    - ! 'Returns the session ID for for the given process id. If not give, return

      current process sid. Not available on all platforms.'
    - 
  - - 1558
    - Process#gid =>fixnum
    - 77
    - '2013-06-23 00:19:10.581006'
    - '2013-06-25 06:14:50.580148'
    - 
    - 
  - - 1559
    - Process#Process::GID.rid =>fixnum
    - 77
    - '2013-06-23 00:19:10.872484'
    - '2013-06-25 06:14:50.735324'
    - 
    - 
  - - 1560
    - Process#Process::Sys.getgid =>fixnum
    - 77
    - '2013-06-23 00:19:11.353100'
    - '2013-06-25 06:14:50.904132'
    - Returns the (real) group ID for this process.
    - 
  - - 1561
    - Process#gid= fixnum =>fixnum
    - 77
    - '2013-06-23 00:19:11.702279'
    - '2013-06-25 06:14:51.237332'
    - Sets the group ID for this process.
    - 
  - - 1562
    - Process#groups =>array
    - 77
    - '2013-06-23 00:19:12.004790'
    - '2013-06-25 06:14:51.406022'
    - ! 'Get an Array of the gids of groups in the supplemental group

      access list for this process.'
    - 
  - - 1563
    - Process#groups= array =>array
    - 77
    - '2013-06-23 00:19:12.451634'
    - '2013-06-25 06:14:51.553373'
    - ! 'Set the supplemental group access list to the given Array of

      group IDs.'
    - 
  - - 1564
    - Process#initgroups(username, gid) =>array
    - 77
    - '2013-06-23 00:19:12.798336'
    - '2013-06-25 06:14:51.687303'
    - ! 'Initializes the supplemental group access list by reading the system group

      database and using all groups of which the given user is a member. The

      group with the specified gid is also added to the list. Returns

      the resulting Array of the gids of all the groups in the

      supplementary group access list. Not available on all platforms.'
    - 
  - - 1565
    - Process#kill(signal, pid, ...) =>fixnum
    - 77
    - '2013-06-23 00:19:13.147204'
    - '2013-06-25 06:14:51.822077'
    - ! 'Sends the given signal to the specified process id(s) if pid is

      positive. If pid is zero signal is sent to all processes

      whose group ID is equal to the group ID of the process. signal may

      be an integer signal number or a POSIX signal name (either with or without

      a SIG prefix). If signal is negative (or starts with

      a minus sign), kills process groups instead of processes. Not all signals

      are available on all platforms.'
    - 
  - - 1566
    - Process#maxgroups =>fixnum
    - 77
    - '2013-06-23 00:19:13.594454'
    - '2013-06-25 06:14:51.968312'
    - ! 'Returns the maximum number of gids allowed in the supplemental group access

      list.'
    - 
  - - 1567
    - Process#maxgroups= fixnum =>fixnum
    - 77
    - '2013-06-23 00:19:13.907739'
    - '2013-06-25 06:14:52.135411'
    - ! 'Sets the maximum number of gids allowed in the supplemental group access

      list.'
    - 
  - - 1568
    - Process#pid =>fixnum
    - 77
    - '2013-06-23 00:19:14.254535'
    - '2013-06-25 06:14:52.436459'
    - Returns the process id of this process. Not available on all platforms.
    - 
  - - 1569
    - Process#ppid =>fixnum
    - 77
    - '2013-06-23 00:19:14.746352'
    - '2013-06-25 06:14:52.604510'
    - ! 'Returns the process id of the parent of this process. Returns untrustworthy

      value on Win32/64. Not available on all platforms.'
    - 
  - - 1570
    - Process#setpgid(pid, integer) =>0
    - 77
    - '2013-06-23 00:19:15.039479'
    - '2013-06-25 06:14:52.772789'
    - ! 'Sets the process group ID of pid (0 indicates this process) to

      integer. Not available on all platforms.'
    - 
  - - 1571
    - Process#setpgrp =>0
    - 77
    - '2013-06-23 00:19:15.364114'
    - '2013-06-25 06:14:52.941102'
    - Equivalent to setpgid(0,0). Not available on all platforms.
    - 
  - - 1572
    - Process#setpriority(kind, integer, priority) =>0
    - 77
    - '2013-06-23 00:19:15.977549'
    - '2013-06-25 06:14:53.098958'
    - See Process#getpriority.
    - 
  - - 1573
    - Process#setrlimit(resource, cur_limit, max_limit) =>nil
    - 77
    - '2013-06-23 00:19:16.401967'
    - '2013-06-25 06:14:53.233502'
    - 
    - 
  - - 1574
    - Process#setrlimit(resource, cur_limit) =>nil
    - 77
    - '2013-06-23 00:19:17.508706'
    - '2013-06-25 06:14:53.523805'
    - ! 'Sets the resource limit of the process. cur_limit means current

      (soft) limit and max_limit means maximum (hard) limit.'
    - 
  - - 1575
    - Process#setsid =>fixnum
    - 77
    - '2013-06-23 00:19:18.099965'
    - '2013-06-25 06:14:53.847134'
    - ! 'Establishes this process as a new session and process group leader, with
      no

      controlling tty. Returns the session id. Not available on all platforms.'
    - 
  - - 1576
    - Process#spawn([env,] command... [,options]) =>pid
    - 77
    - '2013-06-23 00:19:18.588068'
    - '2013-06-25 06:14:54.015289'
    - spawn executes specified command and return its pid.
    - 
  - - 1577
    - Process#spawn([env,] command... [,options]) =>pid
    - 77
    - '2013-06-23 00:19:19.145096'
    - '2013-06-25 06:14:54.305301'
    - 
    - 
  - - 1578
    - Process#times =>aStructTms
    - 77
    - '2013-06-23 00:19:19.691375'
    - '2013-06-25 06:14:54.495278'
    - ! 'Returns a Tms structure (see Struct::Tms) that

      contains user and system CPU times for this process, and also for children

      processes.'
    - 
  - - 1579
    - Process#uid =>fixnum
    - 77
    - '2013-06-23 00:19:20.426718'
    - '2013-06-25 06:14:54.807672'
    - 
    - 
  - - 1580
    - Process#Process::UID.rid =>fixnum
    - 77
    - '2013-06-23 00:19:20.851997'
    - '2013-06-25 06:14:55.097761'
    - 
    - 
  - - 1581
    - Process#Process::Sys.getuid =>fixnum
    - 77
    - '2013-06-23 00:19:21.465866'
    - '2013-06-25 06:14:55.367501'
    - Returns the (real) user ID of this process.
    - 
  - - 1582
    - Process#uid= user =>numeric
    - 77
    - '2013-06-23 00:19:21.890552'
    - '2013-06-25 06:14:55.702164'
    - Sets the (user) user ID for this process. Not available on all platforms.
    - 
  - - 1583
    - Process#wait() =>fixnum
    - 77
    - '2013-06-23 00:19:22.347818'
    - '2013-06-25 06:14:56.014637'
    - 
    - 
  - - 1584
    - Process#wait(pid=-1, flags=0) =>fixnum
    - 77
    - '2013-06-23 00:19:22.938369'
    - '2013-06-25 06:14:56.326761'
    - 
    - 
  - - 1585
    - Process#waitpid(pid=-1, flags=0) =>fixnum
    - 77
    - '2013-06-23 00:19:23.444424'
    - '2013-06-25 06:14:56.639258'
    - ! 'Waits for a child process to exit, returns its process id, and sets

      $? to a Process::Status object containing

      information on that process. Which child it waits on depends on the value

      of pid:'
    - 
  - - 1586
    - Process#wait2(pid=-1, flags=0) =>[pid, status]
    - 77
    - '2013-06-23 00:19:24.134238'
    - '2013-06-25 06:14:56.963494'
    - ! 'Waits for a child process to exit (see ::waitpid for exact semantics) and

      returns an array containing the process id and the exit status (a

      Process::Status object) of that child. Raises a SystemCallError if there are
      no child

      processes.'
    - 
  - - 1587
    - Process#waitall =>[ [pid1,status1], ...]
    - 77
    - '2013-06-23 00:19:24.970280'
    - '2013-06-25 06:14:57.286965'
    - ! 'Waits for all children, returning an array of pid/status

      pairs (where status is a Process::Status object).'
    - 
  - - 1588
    - Process#waitpid(pid=-1, flags=0) =>fixnum
    - 77
    - '2013-06-23 00:19:25.654012'
    - '2013-06-25 06:14:57.609987'
    - 
    - 
  - - 1589
    - Process#waitpid2(pid=-1, flags=0) =>[pid, status]
    - 77
    - '2013-06-23 00:19:26.394922'
    - '2013-06-25 06:14:58.100178'
    - ! 'Waits for a child process to exit (see ::waitpid for exact semantics) and

      returns an array containing the process id and the exit status (a

      Process::Status object) of that child. Raises a SystemCallError if there are
      no child

      processes.'
    - 
  - - 1590
    - Random#new(seed = Random.new_seed) =>prng
    - 82
    - '2013-06-23 00:19:30.744110'
    - '2013-06-25 06:14:58.392386'
    - ! 'Creates a new PRNG using seed to set the initial state. If

      seed is omitted, the generator is initialized with ::new_seed.'
    - 
  - - 1591
    - Random#new_seed =>integer
    - 82
    - '2013-06-23 00:19:31.235573'
    - '2013-06-25 06:14:58.716598'
    - ! 'Returns an arbitrary seed value. This is used by ::new when no seed value
      is specified

      as an argument.'
    - 
  - - 1592
    - Random#rand =>float
    - 82
    - '2013-06-23 00:19:31.571306'
    - '2013-06-25 06:14:59.016976'
    - 
    - 
  - - 1593
    - Random#rand(max) =>number
    - 82
    - '2013-06-23 00:19:31.863310'
    - '2013-06-25 06:14:59.329657'
    - ! 'When max is an Integer,

      rand returns a random integer greater than or equal to zero

      and less than max. Unlike Kernel#rand, when max is

      a negative integer or zero, rand raises an ArgumentError.'
    - 
  - - 1594
    - Random#srand(number = Random.new_seed) =>old_seed
    - 82
    - '2013-06-23 00:19:32.309698'
    - '2013-06-25 06:14:59.530571'
    - ! 'Seeds the system pseudo-random number generator, Random::DEFAULT, with

      number.  The previous seed value is returned.'
    - 
  - - 1595
    - Random#prng1 == prng2 =>true or false
    - 82
    - '2013-06-23 00:19:32.656839'
    - '2013-06-25 06:14:59.832549'
    - ! 'Returns true if the two generators have the same internal state, otherwise

      false.  Equivalent generators will return the same sequence of

      pseudo-random numbers.  Two generators will generally have the same state

      only if they were initialized with the same seed'
    - 
  - - 1596
    - Random#bytes(size) =>a_string
    - 82
    - '2013-06-23 00:19:32.994323'
    - '2013-06-25 06:15:00.122672'
    - Returns a random binary string containing size bytes.
    - 
  - - 1597
    - Random#rand =>float
    - 82
    - '2013-06-23 00:19:33.419000'
    - '2013-06-25 06:15:00.412264'
    - 
    - 
  - - 1598
    - Random#rand(max) =>number
    - 82
    - '2013-06-23 00:19:33.710880'
    - '2013-06-25 06:15:00.557312'
    - 
    - 
  - - 1599
    - Random#seed =>integer
    - 82
    - '2013-06-23 00:19:34.035352'
    - '2013-06-25 06:15:00.871733'
    - ! 'Returns the seed value used to initialize the generator. This may be used

      to initialize another generator with the same state at a later time,

      causing it to produce the same sequence of numbers.'
    - 
  - - 1600
    - Range#new(begin, end, exclude_end=false) =>rng
    - 83
    - '2013-06-23 00:19:37.246692'
    - '2013-06-25 06:15:01.184108'
    - ! 'Constructs a range using the given begin and end.

      If the exclude_end parameter is omitted or is

      false, the rng will include the end object;

      otherwise, it will be excluded.'
    - 
  - - 1601
    - Range#rng == obj =>true or false
    - 83
    - '2013-06-23 00:19:37.756043'
    - '2013-06-25 06:15:01.497843'
    - ! 'Returns true only if obj is a Range, has equivalent begin and end items (by

      comparing them with ==), and has the same exclude_end? setting as the

      range.'
    - 
  - - 1602
    - Range#rng === obj =>true or false
    - 83
    - '2013-06-23 00:19:38.090609'
    - '2013-06-25 06:15:01.820460'
    - ! 'Returns true if obj is an element of the range,

      false otherwise.  Conveniently, === is the

      comparison operator used by case statements.'
    - 
  - - 1603
    - Range#begin =>obj
    - 83
    - '2013-06-23 00:19:38.459876'
    - '2013-06-25 06:15:02.121552'
    - Returns the object that defines the beginning of the range.
    - 
  - - 1604
    - Range#bsearch {|obj| block } =>value
    - 83
    - '2013-06-23 00:19:38.786879'
    - '2013-06-25 06:15:02.411762'
    - ! 'By using binary search, finds a value in range which meets the given

      condition in O(log n) where n is the size of the range.'
    - 
  - - 1605
    - Range#cover?(obj) =>true or false
    - 83
    - '2013-06-23 00:19:39.100693'
    - '2013-06-25 06:15:02.546234'
    - ! 'Returns true if obj is between the begin and end

      of the range.'
    - 
  - - 1606
    - Range#each {| i | block } =>rng
    - 83
    - '2013-06-23 00:19:39.436155'
    - '2013-06-25 06:15:02.836667'
    - 
    - 
  - - 1607
    - Range#each =>an_enumerator
    - 83
    - '2013-06-23 00:19:39.772138'
    - '2013-06-25 06:15:03.138396'
    - Iterates over the elements of range, passing each in turn to the block.
    - 
  - - 1608
    - Range#end =>obj
    - 83
    - '2013-06-23 00:19:40.075081'
    - '2013-06-25 06:15:03.441328'
    - Returns the object that defines the end of the range.
    - 
  - - 1609
    - Range#eql?(obj) =>true or false
    - 83
    - '2013-06-23 00:19:40.389995'
    - '2013-06-25 06:15:03.753536'
    - ! 'Returns true only if obj is a Range, has equivalent begin and end items (by

      comparing them with eql?), and has the same exclude_end? setting as the

      range.'
    - 
  - - 1610
    - Range#exclude_end? =>true or false
    - 83
    - '2013-06-23 00:19:40.726467'
    - '2013-06-25 06:15:03.921051'
    - Returns true if the range excludes its end value.
    - 
  - - 1611
    - Range#first =>obj
    - 83
    - '2013-06-23 00:19:41.061995'
    - '2013-06-25 06:15:04.222836'
    - 
    - 
  - - 1612
    - Range#first(n) =>an_array
    - 83
    - '2013-06-23 00:19:41.364395'
    - '2013-06-25 06:15:04.513008'
    - ! 'Returns the first object in the range, or an array of the first

      n elements.'
    - 
  - - 1613
    - Range#hash =>fixnum
    - 83
    - '2013-06-23 00:19:41.669249'
    - '2013-06-25 06:15:04.780504'
    - ! 'Compute a hash-code for this range. Two ranges with equal begin and end

      points (using eql?), and the same exclude_end? value will

      generate the same hash-code.'
    - 
  - - 1614
    - Range#include?(obj) =>true or false
    - 83
    - '2013-06-23 00:19:42.016378'
    - '2013-06-25 06:15:04.960189'
    - ! 'Returns true if obj is an element of the range,

      false otherwise.  If begin and end are numeric, comparison is

      done according to the magnitude of the values.'
    - 
  - - 1615
    - Range#inspect =>string
    - 83
    - '2013-06-23 00:19:42.351765'
    - '2013-06-25 06:15:05.116455'
    - ! 'Convert this range object to a printable form (using inspect

      to convert the begin and end objects).'
    - 
  - - 1616
    - Range#last =>obj
    - 83
    - '2013-06-23 00:19:42.654240'
    - '2013-06-25 06:15:05.318905'
    - 
    - 
  - - 1617
    - Range#last(n) =>an_array
    - 83
    - '2013-06-23 00:19:42.956458'
    - '2013-06-25 06:15:05.642555'
    - ! 'Returns the last object in the range, or an array of the last

      n elements.'
    - 
  - - 1618
    - Range#max =>obj
    - 83
    - '2013-06-23 00:19:43.295359'
    - '2013-06-25 06:15:05.944824'
    - 
    - 
  - - 1619
    - Range#max {| a,b | block } =>obj
    - 83
    - '2013-06-23 00:19:43.619430'
    - '2013-06-25 06:15:06.234522'
    - ! 'Returns the maximum value in the range. Returns nil if the

      begin value of the range larger than the end value.'
    - 
  - - 1620
    - Range#member?(obj) =>true or false
    - 83
    - '2013-06-23 00:19:43.910610'
    - '2013-06-25 06:15:06.524153'
    - ! 'Returns true if obj is an element of the range,

      false otherwise.  If begin and end are numeric, comparison is

      done according to the magnitude of the values.'
    - 
  - - 1621
    - Range#min =>obj
    - 83
    - '2013-06-23 00:19:44.224348'
    - '2013-06-25 06:15:06.669692'
    - 
    - 
  - - 1622
    - Range#min {| a,b | block } =>obj
    - 83
    - '2013-06-23 00:19:44.550826'
    - '2013-06-25 06:15:06.960372'
    - ! 'Returns the minimum value in the range. Returns nil if the

      begin value of the range is larger than the end value.'
    - 
  - - 1623
    - Range#size =>num
    - 83
    - '2013-06-23 00:19:44.887056'
    - '2013-06-25 06:15:07.139114'
    - Returns the number of elements in the range.
    - 
  - - 1624
    - Range#step(n=1) {| obj | block } =>rng
    - 83
    - '2013-06-23 00:19:45.189677'
    - '2013-06-25 06:15:07.441172'
    - 
    - 
  - - 1625
    - Range#step(n=1) =>an_enumerator
    - 83
    - '2013-06-23 00:19:45.514189'
    - '2013-06-25 06:15:07.752904'
    - ! 'Iterates over the range, passing each nth element to the

      block. If begin and end are numeric, n is added for each

      iteration. Otherwise step invokes succ to iterate

      through range elements.'
    - 
  - - 1626
    - Range#to_s =>string
    - 83
    - '2013-06-23 00:19:45.985059'
    - '2013-06-25 06:15:07.922742'
    - ! 'Convert this range object to a printable form (using to_s to convert the
      begin and end

      objects).'
    - 
  - - 1627
    - Rational#rat * numeric =>numeric
    - 85
    - '2013-06-23 00:19:51.576534'
    - '2013-06-25 06:15:08.234867'
    - Performs multiplication.
    - 
  - - 1628
    - Rational#rat ** numeric =>numeric
    - 85
    - '2013-06-23 00:19:52.071512'
    - '2013-06-25 06:15:08.524820'
    - Performs exponentiation.
    - 
  - - 1629
    - Rational#rat + numeric =>numeric
    - 85
    - '2013-06-23 00:19:52.405913'
    - '2013-06-25 06:15:08.826426'
    - Performs addition.
    - 
  - - 1630
    - Rational#rat - numeric =>numeric
    - 85
    - '2013-06-23 00:19:52.732682'
    - '2013-06-25 06:15:09.116292'
    - Performs subtraction.
    - 
  - - 1631
    - Rational#rational numeric =>-1, 0, +1 or nil
    - 85
    - '2013-06-23 00:19:53.180190'
    - '2013-06-25 06:15:09.273106'
    - Performs comparison and returns -1, 0, or +1.
    - 
  - - 1632
    - Rational#rat == object =>true or false
    - 85
    - '2013-06-23 00:19:53.515889'
    - '2013-06-25 06:15:09.585126'
    - Returns true if rat equals object numerically.
    - 
  - - 1633
    - Rational#ceil =>integer
    - 85
    - '2013-06-23 00:19:53.851805'
    - '2013-06-25 06:15:09.909355'
    - 
    - 
  - - 1634
    - Rational#ceil(precision=0) =>rational
    - 85
    - '2013-06-23 00:19:54.311855'
    - '2013-06-25 06:15:10.232265'
    - Returns the truncated value (toward positive infinity).
    - 
  - - 1635
    - Rational#denominator =>integer
    - 85
    - '2013-06-23 00:19:54.625393'
    - '2013-06-25 06:15:10.524256'
    - Returns the denominator (always positive).
    - 
  - - 1636
    - Rational#fdiv(numeric) =>float
    - 85
    - '2013-06-23 00:19:54.972956'
    - '2013-06-25 06:15:10.814175'
    - Performs division and returns the value as a float.
    - 
  - - 1637
    - Rational#floor =>integer
    - 85
    - '2013-06-23 00:19:55.430958'
    - '2013-06-25 06:15:10.959947'
    - 
    - 
  - - 1638
    - Rational#floor(precision=0) =>rational
    - 85
    - '2013-06-23 00:19:55.744191'
    - '2013-06-25 06:15:11.261421'
    - Returns the truncated value (toward negative infinity).
    - 
  - - 1639
    - Rational#inspect =>string
    - 85
    - '2013-06-23 00:19:56.048641'
    - '2013-06-25 06:15:11.562552'
    - Returns the value as a string for inspection.
    - 
  - - 1640
    - Rational#numerator =>integer
    - 85
    - '2013-06-23 00:19:56.540312'
    - '2013-06-25 06:15:11.875078'
    - Returns the numerator.
    - 
  - - 1641
    - Rational#quo(numeric) =>numeric
    - 85
    - '2013-06-23 00:19:56.877044'
    - '2013-06-25 06:15:12.186898'
    - Performs division.
    - 
  - - 1642
    - Rational#rationalize =>self
    - 85
    - '2013-06-23 00:19:57.190945'
    - '2013-06-25 06:15:12.487788'
    - 
    - 
  - - 1643
    - Rational#rationalize(eps) =>rational
    - 85
    - '2013-06-23 00:19:57.651044'
    - '2013-06-25 06:15:12.633572'
    - ! 'Returns a simpler approximation of the value if the optional argument eps

      is given (rat-|eps| <= result <= rat+|eps|), self otherwise.'
    - 
  - - 1644
    - Rational#round =>integer
    - 85
    - '2013-06-23 00:19:57.975344'
    - '2013-06-25 06:15:12.812763'
    - 
    - 
  - - 1645
    - Rational#round(precision=0) =>rational
    - 85
    - '2013-06-23 00:19:58.300205'
    - '2013-06-25 06:15:12.971844'
    - ! 'Returns the truncated value (toward the nearest integer; 0.5 => 1; -0.5

      => -1).'
    - 
  - - 1646
    - Rational#to_f =>float
    - 85
    - '2013-06-23 00:19:58.746990'
    - '2013-06-25 06:15:13.128548'
    - Return the value as a float.
    - 
  - - 1647
    - Rational#to_i =>integer
    - 85
    - '2013-06-23 00:19:59.062492'
    - '2013-06-25 06:15:13.284913'
    - Returns the truncated value as an integer.
    - 
  - - 1648
    - Rational#to_r =>self
    - 85
    - '2013-06-23 00:19:59.386826'
    - '2013-06-25 06:15:13.452317'
    - Returns self.
    - 
  - - 1649
    - Rational#to_s =>string
    - 85
    - '2013-06-23 00:19:59.833950'
    - '2013-06-25 06:15:13.619849'
    - Returns the value as a string.
    - 
  - - 1650
    - Rational#truncate =>integer
    - 85
    - '2013-06-23 00:20:00.147945'
    - '2013-06-25 06:15:13.932388'
    - 
    - 
  - - 1651
    - Rational#truncate(precision=0) =>rational
    - 85
    - '2013-06-23 00:20:00.486535'
    - '2013-06-25 06:15:14.089532'
    - Returns the truncated value (toward zero).
    - 
  - - 1652
    - Regexp#escape(str) =>string
    - 87
    - '2013-06-23 00:20:03.856182'
    - '2013-06-25 06:15:14.235303'
    - ! 'Escapes any characters that would have special meaning in a regular

      expression. Returns a new escaped string, or self if no characters are

      escaped.  For any string,

      Regexp.new(Regexp.escape(str))=~str will be

      true.'
    - 
  - - 1653
    - Regexp#last_match =>matchdata
    - 87
    - '2013-06-23 00:20:04.892925'
    - '2013-06-25 06:15:14.403876'
    - 
    - 
  - - 1654
    - Regexp#last_match(n) =>str
    - 87
    - '2013-06-23 00:20:05.513625'
    - '2013-06-25 06:15:14.550297'
    - ! 'The first form returns the MatchData object

      generated by the last successful pattern match.  Equivalent to reading the

      special global variable $~ (see Special global variables in Regexp for details).'
    - 
  - - 1655
    - Regexp#new(string, [options [, kcode]]) =>regexp
    - 87
    - '2013-06-23 00:20:05.855648'
    - '2013-06-25 06:15:14.706808'
    - 
    - 
  - - 1656
    - Regexp#new(regexp) =>regexp
    - 87
    - '2013-06-23 00:20:06.202253'
    - '2013-06-25 06:15:15.019591'
    - 
    - 
  - - 1657
    - Regexp#compile(string, [options [, kcode]]) =>regexp
    - 87
    - '2013-06-23 00:20:06.505255'
    - '2013-06-25 06:15:15.187193'
    - 
    - 
  - - 1658
    - Regexp#compile(regexp) =>regexp
    - 87
    - '2013-06-23 00:20:07.008261'
    - '2013-06-25 06:15:15.333390'
    - ! 'Constructs a new regular expression from pattern, which can be

      either a String or a Regexp (in which case that regexp’s options are

      propagated), and new options may not be specified (a change as of Ruby

      1.8).'
    - 
  - - 1659
    - Regexp#quote(str) =>string
    - 87
    - '2013-06-23 00:20:07.334969'
    - '2013-06-25 06:15:15.489979'
    - ! 'Escapes any characters that would have special meaning in a regular

      expression. Returns a new escaped string, or self if no characters are

      escaped.  For any string,

      Regexp.new(Regexp.escape(str))=~str will be

      true.'
    - 
  - - 1660
    - Regexp#try_convert(obj) =>re or nil
    - 87
    - '2013-06-23 00:20:07.660047'
    - '2013-06-25 06:15:15.646737'
    - ! 'Try to convert obj into a Regexp, using

      to_regexp method. Returns converted regexp or nil if obj cannot be

      converted for any reason.'
    - 
  - - 1661
    - Regexp#union(pat1, pat2, ...) =>new_regexp
    - 87
    - '2013-06-23 00:20:08.106799'
    - '2013-06-25 06:15:15.814079'
    - 
    - 
  - - 1662
    - Regexp#union(pats_ary) =>new_regexp
    - 87
    - '2013-06-23 00:20:08.420506'
    - '2013-06-25 06:15:15.971752'
    - ! 'Return a Regexp object that is the union of the given

      patterns, i.e., will match any of its parts. The patterns

      can be Regexp objects, in which case their

      options will be preserved, or Strings. If no patterns are given, returns

      /(?!)/. The behavior is unspecified if any given

      pattern contains capture.'
    - 
  - - 1663
    - Regexp#rxp === str =>true or false
    - 87
    - '2013-06-23 00:20:08.745147'
    - '2013-06-25 06:15:16.262070'
    - Case Equality—Used in case statements.
    - 
  - - 1664
    - Regexp#rxp =~ str =>integer or nil
    - 87
    - '2013-06-23 00:20:09.205055'
    - '2013-06-25 06:15:16.430799'
    - Match—Matches rxp against str.
    - 
  - - 1665
    - Regexp#casefold? =>true or false
    - 87
    - '2013-06-23 00:20:09.529772'
    - '2013-06-25 06:15:16.598417'
    - Returns the value of the case-insensitive flag.
    - 
  - - 1666
    - Regexp#encoding =>encoding
    - 87
    - '2013-06-23 00:20:09.854644'
    - '2013-06-25 06:15:16.896277'
    - ! 'Returns the Encoding object that represents the

      encoding of obj.'
    - 
  - - 1667
    - Regexp#eql?(other_rxp) =>true or false
    - 87
    - '2013-06-23 00:20:10.390935'
    - '2013-06-25 06:15:17.056663'
    - ! 'Equality—Two regexps are equal if their patterns are identical, they have

      the same character set code, and their casefold? values are

      the same.'
    - 
  - - 1668
    - Regexp#fixed_encoding? =>true or false
    - 87
    - '2013-06-23 00:20:10.728660'
    - '2013-06-25 06:15:17.368890'
    - ! 'Returns false if rxp is applicable to a string with any ASCII compatible

      encoding. Returns true otherwise.'
    - 
  - - 1669
    - Regexp#hash =>fixnum
    - 87
    - '2013-06-23 00:20:11.042056'
    - '2013-06-25 06:15:17.536596'
    - Produce a hash based on the text and options of this regular expression.
    - 
  - - 1670
    - Regexp#inspect =>string
    - 87
    - '2013-06-23 00:20:11.567372'
    - '2013-06-25 06:15:17.693735'
    - ! 'Produce a nicely formatted string-version of rxp. Perhaps

      surprisingly, #inspect actually produces the more natural

      version of the string than #to_s.'
    - 
  - - 1671
    - Regexp#match(str) =>matchdata or nil
    - 87
    - '2013-06-23 00:20:12.047851'
    - '2013-06-25 06:15:17.838816'
    - 
    - 
  - - 1672
    - Regexp#match(str,pos) =>matchdata or nil
    - 87
    - '2013-06-23 00:20:12.508056'
    - '2013-06-25 06:15:18.007191'
    - ! 'Returns a MatchData object describing the match, or

      nil if there was no match. This is equivalent to retrieving

      the value of the special variable $~ following a normal match.

      If the second parameter is present, it specifies the position in the string

      to begin the search.'
    - 
  - - 1673
    - Regexp#named_captures =>hash
    - 87
    - '2013-06-23 00:20:12.966045'
    - '2013-06-25 06:15:18.163599'
    - ! 'Returns a hash representing information about named captures of

      rxp.'
    - 
  - - 1674
    - Regexp#names =>[name1, name2, ...]
    - 87
    - '2013-06-23 00:20:13.613156'
    - '2013-06-25 06:15:18.466803'
    - Returns a list of names of captures as an array of strings.
    - 
  - - 1675
    - Regexp#options =>fixnum
    - 87
    - '2013-06-23 00:20:14.237542'
    - '2013-06-25 06:15:18.634638'
    - ! 'Returns the set of bits corresponding to the options used when creating

      this Regexp (see Regexp::new for

      details. Note that additional bits may be set in the returned options:

      these are used internally by the regular expression code. These extra bits

      are ignored if the options are passed to Regexp::new.'
    - 
  - - 1676
    - Regexp#source =>str
    - 87
    - '2013-06-23 00:20:14.585012'
    - '2013-06-25 06:15:18.791326'
    - Returns the original string of the pattern.
    - 
  - - 1677
    - Regexp#to_s =>str
    - 87
    - '2013-06-23 00:20:14.911698'
    - '2013-06-25 06:15:18.960027'
    - ! 'Returns a string containing the regular expression and its options (using

      the (?opts:source) notation. This string can be fed back in to

      Regexp::new to a regular expression with the same semantics as

      the original. (However, Regexp#== may not return true when

      comparing the two, as the source of the regular expression itself may

      differ, as the example shows).  Regexp#inspect produces a

      generally more readable version of rxp.'
    - 
  - - 1678
    - Regexp#~ rxp =>integer or nil
    - 87
    - '2013-06-23 00:20:15.258606'
    - '2013-06-25 06:15:19.115611'
    - ! 'Match—Matches rxp against the contents of $_.

      Equivalent to rxp =~ $_.'
    - 
  - - 1679
    - Signal#list =>a_hash
    - 95
    - '2013-06-23 00:20:28.883273'
    - '2013-06-25 06:15:19.261523'
    - ! 'Returns a list of signal names mapped to the corresponding underlying

      signal numbers.'
    - 
  - - 1680
    - Signal#signame(signo) =>string
    - 95
    - '2013-06-23 00:20:29.421061'
    - '2013-06-25 06:15:19.406773'
    - convert signal number to signal name
    - 
  - - 1681
    - Signal#trap( signal, command ) =>obj
    - 95
    - '2013-06-23 00:20:29.745852'
    - '2013-06-25 06:15:19.708114'
    - 
    - 
  - - 1682
    - Signal#trap( signal ) {| | block } =>obj
    - 95
    - '2013-06-23 00:20:30.072673'
    - '2013-06-25 06:15:19.876191'
    - ! 'Specifies the handling of signals. The first parameter is a signal name (a

      string such as “SIGALRM”, “SIGUSR1”, and so on) or a signal number. The

      characters “SIG” may be omitted from the signal name. The command or block

      specifies code to be run when the signal is raised. If the command is the

      string “IGNORE” or “SIG_IGN”, the signal will be ignored. If the command is

      “DEFAULT” or “SIG_DFL”, the Ruby’s default handler will be invoked. If the

      command is “EXIT”, the script will be terminated by the signal. If the

      command is “SYSTEM_DEFAULT”, the operating system’s default handler will be

      invoked. Otherwise, the given command or block will be run. The special

      signal name “EXIT” or signal number zero will be invoked just prior to

      program termination. trap returns the previous handler for the given

      signal.'
    - 
  - - 1683
    - SignalException#new(sig_name) =>signal_exception
    - 96
    - '2013-06-23 00:20:32.631576'
    - '2013-06-25 06:15:20.035514'
    - 
    - 
  - - 1684
    - SignalException#new(sig_number [, name]) =>signal_exception
    - 96
    - '2013-06-23 00:20:33.100968'
    - '2013-06-25 06:15:20.191352'
    - ! "Construct a new SignalException object. \nsig_name should be a known signal
      name."
    - 
  - - 1685
    - SignalException#signo =>num
    - 96
    - '2013-06-23 00:20:33.436421'
    - '2013-06-25 06:15:20.359133'
    - Returns a signal number.
    - 
  - - 1686
    - StopIteration#result =>value
    - 98
    - '2013-06-23 00:20:40.675432'
    - '2013-06-25 06:15:20.527717'
    - Returns the return value of the iterator.
    - 
  - - 1687
    - String#new(str="") =>new_str
    - 99
    - '2013-06-23 00:20:45.798118'
    - '2013-06-25 06:15:20.827866'
    - Returns a new string object containing a copy of str.
    - 
  - - 1688
    - String#try_convert(obj) =>string or nil
    - 99
    - '2013-06-23 00:20:46.286174'
    - '2013-06-25 06:15:20.996221'
    - ! 'Try to convert obj into a String, using

      #to_str method. Returns converted

      string or nil if obj cannot be converted for any reason.'
    - 
  - - 1689
    - String#str % arg =>new_str
    - 99
    - '2013-06-23 00:20:46.577305'
    - '2013-06-25 06:15:21.153077'
    - ! 'Format—Uses str as a format specification, and returns the result

      of applying it to arg. If the format specification contains more

      than one substitution, then arg must be an Array or

      Hash containing the values to be substituted. See

      Kernel::sprintf for details of the format string.'
    - 
  - - 1690
    - String#str * integer =>new_str
    - 99
    - '2013-06-23 00:20:46.890977'
    - '2013-06-25 06:15:21.309457'
    - ! 'Copy — Returns a new String containing

      integer copies of the receiver. integer must be

      greater than or equal to 0.'
    - 
  - - 1691
    - String#str + other_str =>new_str
    - 99
    - '2013-06-23 00:20:47.360542'
    - '2013-06-25 06:15:21.477763'
    - ! 'Concatenation—Returns a new String containing

      other_str concatenated to str.'
    - 
  - - 1692
    - String#string other_string =>-1, 0, +1 or nil
    - 99
    - '2013-06-23 00:20:47.707008'
    - '2013-06-25 06:15:21.612071'
    - ! 'Comparison—Returns -1, 0, +1 or nil depending on whether

      string is less than, equal to, or greater than

      other_string.'
    - 
  - - 1693
    - String#str =~ obj =>fixnum or nil
    - 99
    - '2013-06-23 00:20:48.033643'
    - '2013-06-25 06:15:21.926385'
    - ! 'Match—If obj is a Regexp, use it as a pattern to

      match against str,and returns the position the match starts, or

      nil if there is no match. Otherwise, invokes obj.=~,

      passing str as an argument. The default =~ in

      Object returns nil.'
    - 
  - - 1694
    - String#str[index] =>new_str or nil
    - 99
    - '2013-06-23 00:20:48.502805'
    - '2013-06-25 06:15:22.083830'
    - 
    - 
  - - 1695
    - String#str[start, length] =>new_str or nil
    - 99
    - '2013-06-23 00:20:48.838811'
    - '2013-06-25 06:15:22.239948'
    - 
    - 
  - - 1696
    - String#str[range] =>new_str or nil
    - 99
    - '2013-06-23 00:20:49.141507'
    - '2013-06-25 06:15:22.385172'
    - 
    - 
  - - 1697
    - String#str[regexp] =>new_str or nil
    - 99
    - '2013-06-23 00:20:49.579347'
    - '2013-06-25 06:15:22.530832'
    - 
    - 
  - - 1698
    - String#str[regexp, capture] =>new_str or nil
    - 99
    - '2013-06-23 00:20:49.926198'
    - '2013-06-25 06:15:22.687461'
    - 
    - 
  - - 1699
    - String#str[match_str] =>new_str or nil
    - 99
    - '2013-06-23 00:20:50.229301'
    - '2013-06-25 06:15:22.844563'
    - ! 'Element Reference — If passed a single index, returns a

      substring of one character at that index. If passed a start

      index and a length, returns a substring containing

      length characters starting at the index. If

      passed a range, its beginning and end are interpreted as

      offsets delimiting the substring to be returned.'
    - 
  - - 1700
    - String#str[fixnum] = new_str
    - 99
    - '2013-06-23 00:20:50.687325'
    - '2013-06-23 06:55:00.482458'
    - 
    - 
  - - 1701
    - String#str[fixnum, fixnum] = new_str
    - 99
    - '2013-06-23 00:20:50.967386'
    - '2013-06-23 06:55:00.772208'
    - 
    - 
  - - 1702
    - String#str[range] = aString
    - 99
    - '2013-06-23 00:20:51.316020'
    - '2013-06-23 06:55:00.920394'
    - 
    - 
  - - 1703
    - String#str[regexp] = new_str
    - 99
    - '2013-06-23 00:20:51.830824'
    - '2013-06-23 06:55:01.089665'
    - 
    - 
  - - 1704
    - String#str[regexp, fixnum] = new_str
    - 99
    - '2013-06-23 00:20:52.122222'
    - '2013-06-23 06:55:01.245007'
    - 
    - 
  - - 1705
    - String#str[regexp, name] = new_str
    - 99
    - '2013-06-23 00:20:52.415001'
    - '2013-06-23 06:55:01.413674'
    - 
    - 
  - - 1706
    - String#str[other_str] = new_str
    - 99
    - '2013-06-23 00:20:52.906908'
    - '2013-06-25 05:03:02.245267'
    - ! 'Element Assignment—Replaces some or all of the content of str. The

      portion of the string affected is determined using the same criteria as

      String#[]. If the replacement string is not the same length as

      the text it is replacing, the string will be adjusted accordingly. If the

      regular expression or string is used as the index doesn’t match a position

      in the string, IndexError is raised. If the regular expression

      form is used, the optional second Fixnum allows you to specify

      which portion of the match to replace (effectively using the

      MatchData indexing rules. The forms that take a

      Fixnum will raise an IndexError if the value is

      out of range; the Range form will raise a

      RangeError, and the Regexp and

      String will raise an IndexError on negative

      match.'
    - 
  - - 1707
    - String#ascii_only? =>true or false
    - 99
    - '2013-06-23 00:20:53.243215'
    - '2013-06-25 06:15:23.146579'
    - Returns true for a string which has only ASCII characters.
    - 
  - - 1708
    - String#b =>str
    - 99
    - '2013-06-23 00:20:53.534035'
    - '2013-06-25 06:15:23.305689'
    - Returns a copied string whose encoding is ASCII-8BIT.
    - 
  - - 1709
    - String#bytes =>an_array
    - 99
    - '2013-06-23 00:20:53.992791'
    - '2013-06-25 06:15:23.460886'
    - ! 'Returns an array of bytes in str.  This is a shorthand for

      str.each_byte.to_a.'
    - 
  - - 1710
    - String#bytesize =>integer
    - 99
    - '2013-06-23 00:20:54.341722'
    - '2013-06-25 06:15:23.628755'
    - Returns the length of str in bytes.
    - 
  - - 1711
    - String#byteslice(fixnum) =>new_str or nil
    - 99
    - '2013-06-23 00:20:54.676887'
    - '2013-06-25 06:15:23.774536'
    - 
    - 
  - - 1712
    - String#byteslice(fixnum, fixnum) =>new_str or nil
    - 99
    - '2013-06-23 00:20:55.001957'
    - '2013-06-25 06:15:23.931992'
    - 
    - 
  - - 1713
    - String#byteslice(range) =>new_str or nil
    - 99
    - '2013-06-23 00:20:55.326352'
    - '2013-06-25 06:15:24.243680'
    - ! 'Byte Reference—If passed a single Fixnum, returns a substring

      of one byte at that position. If passed two Fixnum objects,

      returns a substring starting at the offset given by the first, and a length

      given by the second. If given a Range, a substring containing

      bytes at offsets given by the range is returned. In all three cases, if an

      offset is negative, it is counted from the end of str. Returns

      nil if the initial offset falls outside the string, the length

      is negative, or the beginning of the range is greater than the end. The

      encoding of the resulted string keeps original encoding.'
    - 
  - - 1714
    - String#capitalize =>new_str
    - 99
    - '2013-06-23 00:20:55.651420'
    - '2013-06-25 06:15:24.400145'
    - ! 'Returns a copy of str with the first character converted to

      uppercase and the remainder to lowercase. Note: case conversion is

      effective only in ASCII region.'
    - 
  - - 1715
    - String#capitalize! =>str or nil
    - 99
    - '2013-06-23 00:20:55.966611'
    - '2013-06-25 06:15:24.535318'
    - ! 'Modifies str by converting the first character to uppercase and

      the remainder to lowercase. Returns nil if no changes are

      made. Note: case conversion is effective only in ASCII region.'
    - 
  - - 1716
    - String#casecmp(other_str) =>-1, 0, +1 or nil
    - 99
    - '2013-06-23 00:20:56.291268'
    - '2013-06-25 06:15:24.692320'
    - Case-insensitive version of String#<=>.
    - 
  - - 1717
    - String#center(width, padstr=' ') =>new_str
    - 99
    - '2013-06-23 00:20:56.626941'
    - '2013-06-25 06:15:24.848437'
    - ! 'Centers str in width.  If width is

      greater than the length of str, returns a new String of length width with

      str centered and padded with padstr; otherwise,

      returns str.'
    - 
  - - 1718
    - String#chars =>an_array
    - 99
    - '2013-06-23 00:20:56.951738'
    - '2013-06-25 06:15:25.017737'
    - ! 'Returns an array of characters in str.  This is a shorthand for

      str.each_char.to_a.'
    - 
  - - 1719
    - String#chomp(separator=$/) =>new_str
    - 99
    - '2013-06-23 00:20:57.278214'
    - '2013-06-25 06:15:25.319357'
    - ! 'Returns a new String with the given record separator removed

      from the end of str (if present). If $/ has not been

      changed from the default Ruby record separator, then chomp

      also removes carriage return characters (that is it will remove

      \n, \r, and \r\n).'
    - 
  - - 1720
    - String#chomp!(separator=$/) =>str or nil
    - 99
    - '2013-06-23 00:20:57.558727'
    - '2013-06-25 06:15:25.464735'
    - ! 'Modifies str in place as described for String#chomp,

      returning str, or nil if no modifications were made.'
    - 
  - - 1721
    - String#chop =>new_str
    - 99
    - '2013-06-23 00:20:57.872296'
    - '2013-06-25 06:15:25.621593'
    - ! 'Returns a new String with the last character removed.  If the

      string ends with \r\n, both characters are removed. Applying

      chop to an empty string returns an empty string.

      String#chomp is often a safer alternative, as it leaves the

      string unchanged if it doesn’t end in a record separator.'
    - 
  - - 1722
    - String#chop! =>str or nil
    - 99
    - '2013-06-23 00:20:58.196645'
    - '2013-06-25 06:15:25.778175'
    - ! 'Processes str as for String#chop, returning

      str, or nil if str is the empty string.  See

      also String#chomp!.'
    - 
  - - 1723
    - String#chr =>string
    - 99
    - '2013-06-23 00:20:58.532499'
    - '2013-06-25 06:15:25.923898'
    - Returns a one-character string at the beginning of the string.
    - 
  - - 1724
    - String#clear =>string
    - 99
    - '2013-06-23 00:20:58.859456'
    - '2013-06-25 06:15:26.115535'
    - Makes string empty.
    - 
  - - 1725
    - String#codepoints =>an_array
    - 99
    - '2013-06-23 00:20:59.183931'
    - '2013-06-25 06:15:26.427058'
    - ! 'Returns an array of the Integer ordinals of the characters in

      str.  This is a shorthand for

      str.each_codepoint.to_a.'
    - 
  - - 1726
    - String#concat(integer) =>str
    - 99
    - '2013-06-23 00:20:59.497869'
    - '2013-06-25 06:15:26.595091'
    - 
    - 
  - - 1727
    - String#concat(obj) =>str
    - 99
    - '2013-06-23 00:20:59.833336'
    - '2013-06-25 06:15:26.743362'
    - ! 'Append—Concatenates the given object to str. If the object is a

      Integer, it is considered as a codepoint, and is converted to

      a character before concatenation.'
    - 
  - - 1728
    - String#count([other_str]+) =>fixnum
    - 99
    - '2013-06-23 00:21:00.143377'
    - '2013-06-25 06:15:26.899146'
    - ! 'Each other_str parameter defines a set of characters to count.

      The intersection of these sets defines the characters to count in

      str.  Any other_str that starts with a caret

      ^ is negated.  The sequence c1-c2 means all

      characters between c1 and c2.  The backslash character </code>

      can be used to escape <code>^ or - and is

      otherwise ignored unless it appears at the end of a sequence or the end of

      a other_str.'
    - 
  - - 1729
    - String#crypt(salt_str) =>new_str
    - 99
    - '2013-06-23 00:21:00.507325'
    - '2013-06-25 06:15:27.067850'
    - ! 'Applies a one-way cryptographic hash to str by invoking the

      standard library function crypt(3) with the given salt string.

      While the format and the result are system and implementation dependent,

      using a salt matching the regular expression

      \A[a-zA-Z0-9./]{2} should be valid and safe on any platform,

      in which only the first two characters are significant.'
    - 
  - - 1730
    - String#delete([other_str]+) =>new_str
    - 99
    - '2013-06-23 00:21:00.910113'
    - '2013-06-25 06:15:27.224696'
    - ! 'Returns a copy of str with all characters in the intersection of

      its arguments deleted. Uses the same rules for building the set of

      characters as String#count.'
    - 
  - - 1731
    - String#delete!([other_str]+) =>str or nil
    - 99
    - '2013-06-23 00:21:01.213412'
    - '2013-06-25 06:15:27.380889'
    - ! 'Performs a delete operation in place, returning str,

      or nil if str was not modified.'
    - 
  - - 1732
    - String#downcase =>new_str
    - 99
    - '2013-06-23 00:21:01.572554'
    - '2013-06-25 06:15:27.693175'
    - ! 'Returns a copy of str with all uppercase letters replaced with

      their lowercase counterparts. The operation is locale insensitive—only

      characters “A” to “Z” are affected. Note: case replacement is effective

      only in ASCII region.'
    - 
  - - 1733
    - String#downcase! =>str or nil
    - 99
    - '2013-06-23 00:21:01.919397'
    - '2013-06-25 06:15:27.861019'
    - ! 'Downcases the contents of str, returning nil if no

      changes were made. Note: case replacement is effective only in ASCII

      region.'
    - 
  - - 1734
    - String#dump =>new_str
    - 99
    - '2013-06-23 00:21:02.255138'
    - '2013-06-25 06:15:28.028295'
    - ! 'Produces a version of str with all non-printing characters

      replaced by \nnn notation and all special characters escaped.'
    - 
  - - 1735
    - String#each_byte {|fixnum| block } =>str
    - 99
    - '2013-06-23 00:21:02.557447'
    - '2013-06-25 06:15:28.186281'
    - 
    - 
  - - 1736
    - String#each_byte =>an_enumerator
    - 99
    - '2013-06-23 00:21:02.863612'
    - '2013-06-25 06:15:28.353277'
    - ! 'Passes each byte in str to the given block, or returns an

      enumerator if no block is given.'
    - 
  - - 1737
    - String#each_char {|cstr| block } =>str
    - 99
    - '2013-06-23 00:21:03.219887'
    - '2013-06-25 06:15:28.512173'
    - 
    - 
  - - 1738
    - String#each_char =>an_enumerator
    - 99
    - '2013-06-23 00:21:03.555542'
    - '2013-06-25 06:15:28.812898'
    - ! 'Passes each character in str to the given block, or returns an

      enumerator if no block is given.'
    - 
  - - 1739
    - String#each_codepoint {|integer| block } =>str
    - 99
    - '2013-06-23 00:21:03.891547'
    - '2013-06-25 06:15:28.970554'
    - 
    - 
  - - 1740
    - String#each_codepoint =>an_enumerator
    - 99
    - '2013-06-23 00:21:04.338428'
    - '2013-06-25 06:15:29.137376'
    - ! 'Passes the Integer ordinal of each character in str,

      also known as a codepoint when applied to Unicode strings to the

      given block.'
    - 
  - - 1741
    - String#each_line(separator=$/) {|substr| block } =>str
    - 99
    - '2013-06-23 00:21:04.673969'
    - '2013-06-25 06:15:29.294218'
    - 
    - 
  - - 1742
    - String#each_line(separator=$/) =>an_enumerator
    - 99
    - '2013-06-23 00:21:05.001056'
    - '2013-06-25 06:15:29.462356'
    - ! 'Splits str using the supplied parameter as the record separator

      ($/ by default), passing each substring in turn to the

      supplied block.  If a zero-length record separator is supplied, the string

      is split into paragraphs delimited by multiple successive newlines.'
    - 
  - - 1743
    - String#empty? =>true or false
    - 99
    - '2013-06-23 00:21:05.436463'
    - '2013-06-25 06:15:29.618868'
    - Returns true if str has a length of zero.
    - 
  - - 1744
    - String#encode(encoding [, options] ) =>str
    - 99
    - '2013-06-23 00:21:05.772390'
    - '2013-06-25 06:15:29.908934'
    - 
    - 
  - - 1745
    - String#encode(dst_encoding, src_encoding [, options] ) =>str
    - 99
    - '2013-06-23 00:21:06.119066'
    - '2013-06-25 06:15:30.054578'
    - 
    - 
  - - 1746
    - String#encode([options]) =>str
    - 99
    - '2013-06-23 00:21:06.623754'
    - '2013-06-25 06:15:30.214057'
    - ! 'The first form returns a copy of str transcoded to encoding

      encoding. The second form returns a copy of str

      transcoded from src_encoding to dst_encoding. The last form returns a copy

      of str transcoded to Encoding.default_internal.'
    - 
  - - 1747
    - String#encode!(encoding [, options] ) =>str
    - 99
    - '2013-06-23 00:21:06.960024'
    - '2013-06-25 06:15:30.371330'
    - 
    - 
  - - 1748
    - String#encode!(dst_encoding, src_encoding [, options] ) =>str
    - 99
    - '2013-06-23 00:21:07.295434'
    - '2013-06-25 06:15:30.538401'
    - ! 'The first form transcodes the contents of str from str.encoding to

      encoding. The second form transcodes the contents of

      str from src_encoding to dst_encoding. The options Hash gives details for conversion.
      See #encode for details. Returns the

      string even if no changes were made.'
    - 
  - - 1749
    - String#encoding =>encoding
    - 99
    - '2013-06-23 00:21:07.764930'
    - '2013-06-25 06:15:30.732460'
    - ! 'Returns the Encoding object that represents the

      encoding of obj.'
    - 
  - - 1750
    - String#end_with?([suffixes]+) =>true or false
    - 99
    - '2013-06-23 00:21:08.095166'
    - '2013-06-25 06:15:30.940301'
    - ! 'Returns true if str ends with one of the suffixes

      given.'
    - 
  - - 1751
    - String#eql?(other) =>true or false
    - 99
    - '2013-06-23 00:21:08.442544'
    - '2013-06-25 06:15:31.241343'
    - Two strings are equal if they have the same length and content.
    - 
  - - 1752
    - String#force_encoding(encoding) =>str
    - 99
    - '2013-06-23 00:21:08.934546'
    - '2013-06-25 06:15:31.386807'
    - Changes the encoding to encoding and returns self.
    - 
  - - 1753
    - String#getbyte(index) =>0 .. 255
    - 99
    - '2013-06-23 00:21:09.257850'
    - '2013-06-25 06:15:31.665956'
    - returns the indexth byte as an integer.
    - 
  - - 1754
    - String#gsub(pattern, replacement) =>new_str
    - 99
    - '2013-06-23 00:21:09.626713'
    - '2013-06-25 06:15:31.956987'
    - 
    - 
  - - 1755
    - String#gsub(pattern, hash) =>new_str
    - 99
    - '2013-06-23 00:21:10.108840'
    - '2013-06-25 06:15:32.257599'
    - 
    - 
  - - 1756
    - String#gsub(pattern) {|match| block } =>new_str
    - 99
    - '2013-06-23 00:21:10.511562'
    - '2013-06-25 06:15:32.560698'
    - 
    - 
  - - 1757
    - String#gsub(pattern) =>enumerator
    - 99
    - '2013-06-23 00:21:10.969734'
    - '2013-06-25 06:15:32.872969'
    - ! 'Returns a copy of str with the all occurrences of

      pattern substituted for the second argument. The pattern

      is typically a Regexp; if given as a String, any

      regular expression metacharacters it contains will be interpreted

      literally, e.g. ''\\d'' will match a backlash followed by ‘d’,

      instead of a digit.'
    - 
  - - 1758
    - String#gsub!(pattern, replacement) =>str or nil
    - 99
    - '2013-06-23 00:21:11.260619'
    - '2013-06-25 06:15:33.184843'
    - 
    - 
  - - 1759
    - String#gsub!(pattern) {|match| block } =>str or nil
    - 99
    - '2013-06-23 00:21:11.574114'
    - '2013-06-25 06:15:33.341464'
    - 
    - 
  - - 1760
    - String#gsub!(pattern) =>an_enumerator
    - 99
    - '2013-06-23 00:21:11.900360'
    - '2013-06-25 06:15:33.631704'
    - ! 'Performs the substitutions of String#gsub in place, returning

      str, or nil if no substitutions were performed. If no

      block and no replacement is given, an enumerator is returned

      instead.'
    - 
  - - 1761
    - String#hash =>fixnum
    - 99
    - '2013-06-23 00:21:12.380828'
    - '2013-06-25 06:15:33.933905'
    - Return a hash based on the string’s length and content.
    - 
  - - 1762
    - String#hex =>integer
    - 99
    - '2013-06-23 00:21:12.693866'
    - '2013-06-25 06:15:34.223003'
    - ! 'Treats leading characters from str as a string of hexadecimal

      digits (with an optional sign and an optional 0x) and returns

      the corresponding number. Zero is returned on error.'
    - 
  - - 1763
    - String#include? other_str =>true or false
    - 99
    - '2013-06-23 00:21:13.018856'
    - '2013-06-25 06:15:34.513491'
    - ! 'Returns true if str contains the given string or

      character.'
    - 
  - - 1764
    - String#index(substring [, offset]) =>fixnum or nil
    - 99
    - '2013-06-23 00:21:13.487996'
    - '2013-06-25 06:15:34.802940'
    - 
    - 
  - - 1765
    - String#index(regexp [, offset]) =>fixnum or nil
    - 99
    - '2013-06-23 00:21:13.803258'
    - '2013-06-25 06:15:35.106234'
    - ! 'Returns the index of the first occurrence of the given substring

      or pattern (regexp) in str. Returns nil if

      not found. If the second parameter is present, it specifies the position in

      the string to begin the search.'
    - 
  - - 1766
    - String#insert(index, other_str) =>str
    - 99
    - '2013-06-23 00:21:14.094156'
    - '2013-06-25 06:15:35.418417'
    - ! 'Inserts other_str before the character at the given

      index, modifying str. Negative indices count from the end

      of the string, and insert after the given character. The intent is

      insert aString so that it starts at the given index.'
    - 
  - - 1767
    - String#inspect =>string
    - 99
    - '2013-06-23 00:21:14.552332'
    - '2013-06-25 06:15:35.720540'
    - ! 'Returns a printable version of str, surrounded by quote marks,

      with special characters escaped.'
    - 
  - - 1768
    - String#intern =>symbol
    - 99
    - '2013-06-23 00:21:14.899247'
    - '2013-06-25 06:15:36.009601'
    - ! 'Returns the Symbol corresponding to str, creating the

      symbol if it did not previously exist. See Symbol#id2name.'
    - 
  - - 1769
    - String#length =>integer
    - 99
    - '2013-06-23 00:21:15.225749'
    - '2013-06-25 06:15:36.177294'
    - Returns the character length of str.
    - 
  - - 1770
    - String#lines(separator=$/) =>an_array
    - 99
    - '2013-06-23 00:21:15.695079'
    - '2013-06-25 06:15:36.489828'
    - ! 'Returns an array of lines in str split using the supplied record

      separator ($/ by default).  This is a shorthand for

      str.each_line(separator).to_a.'
    - 
  - - 1771
    - String#ljust(integer, padstr=' ') =>new_str
    - 99
    - '2013-06-23 00:21:16.019514'
    - '2013-06-25 06:15:36.779933'
    - ! 'If integer is greater than the length of str, returns a

      new String of length integer with str left

      justified and padded with padstr; otherwise, returns str.'
    - 
  - - 1772
    - String#lstrip =>new_str
    - 99
    - '2013-06-23 00:21:16.354932'
    - '2013-06-25 06:15:36.959106'
    - ! 'Returns a copy of str with leading whitespace removed. See also

      String#rstrip and String#strip.'
    - 
  - - 1773
    - String#lstrip! =>self or nil
    - 99
    - '2013-06-23 00:21:16.812915'
    - '2013-06-25 06:15:37.260096'
    - ! 'Removes leading whitespace from str, returning nil if

      no change was made. See also String#rstrip! and

      String#strip!.'
    - 
  - - 1774
    - String#match(pattern) =>matchdata or nil
    - 99
    - '2013-06-23 00:21:17.139785'
    - '2013-06-25 06:15:37.573639'
    - 
    - 
  - - 1775
    - String#match(pattern, pos) =>matchdata or nil
    - 99
    - '2013-06-23 00:21:17.452994'
    - '2013-06-25 06:15:37.886801'
    - ! 'Converts pattern to a Regexp (if it isn’t already

      one), then invokes its match method on str.  If the

      second parameter is present, it specifies the position in the string to

      begin the search.'
    - 
  - - 1776
    - String#next =>new_str
    - 99
    - '2013-06-23 00:21:17.922557'
    - '2013-06-25 06:15:38.187674'
    - ! 'Returns the successor to str. The successor is calculated by

      incrementing characters starting from the rightmost alphanumeric (or the

      rightmost character if there are no alphanumerics) in the string.

      Incrementing a digit always results in another digit, and incrementing a

      letter results in another letter of the same case. Incrementing

      nonalphanumerics uses the underlying character set’s collating sequence.'
    - 
  - - 1777
    - String#next! =>str
    - 99
    - '2013-06-23 00:21:18.246511'
    - '2013-06-25 06:15:38.477927'
    - Equivalent to String#succ, but modifies the receiver in place.
    - 
  - - 1778
    - String#oct =>integer
    - 99
    - '2013-06-23 00:21:18.560196'
    - '2013-06-25 06:15:38.623496'
    - ! 'Treats leading characters of str as a string of octal digits (with

      an optional sign) and returns the corresponding number.  Returns 0 if the

      conversion fails.'
    - 
  - - 1779
    - String#ord =>integer
    - 99
    - '2013-06-23 00:21:19.042478'
    - '2013-06-25 06:15:38.914760'
    - Return the Integer ordinal of a one-character string.
    - 
  - - 1780
    - String#partition(sep) =>[head, sep, tail]
    - 99
    - '2013-06-23 00:21:19.378211'
    - '2013-06-25 06:15:39.203835'
    - 
    - 
  - - 1781
    - String#partition(regexp) =>[head, match, tail]
    - 99
    - '2013-06-23 00:21:19.702351'
    - '2013-06-25 06:15:39.505087'
    - ! 'Searches sep or pattern (regexp) in the string and

      returns the part before it, the match, and the part after it. If it is not

      found, returns two empty strings and str.'
    - 
  - - 1782
    - String#prepend(other_str) =>str
    - 99
    - '2013-06-23 00:21:20.149634'
    - '2013-06-25 06:15:39.828593'
    - Prepend—Prepend the given string to str.
    - 
  - - 1783
    - String#replace(other_str) =>str
    - 99
    - '2013-06-23 00:21:20.642855'
    - '2013-06-25 06:15:40.118910'
    - ! 'Replaces the contents and taintedness of str with the

      corresponding values in other_str.'
    - 
  - - 1784
    - String#reverse =>new_str
    - 99
    - '2013-06-23 00:21:21.256094'
    - '2013-06-25 06:15:40.299321'
    - ! 'Returns a new string with the characters from str in reverse

      order.'
    - 
  - - 1785
    - String#reverse! =>str
    - 99
    - '2013-06-23 00:21:21.725151'
    - '2013-06-25 06:15:40.444855'
    - Reverses str in place.
    - 
  - - 1786
    - String#rindex(substring [, fixnum]) =>fixnum or nil
    - 99
    - '2013-06-23 00:21:22.327521'
    - '2013-06-25 06:15:40.734931'
    - 
    - 
  - - 1787
    - String#rindex(regexp [, fixnum]) =>fixnum or nil
    - 99
    - '2013-06-23 00:21:22.951920'
    - '2013-06-25 06:15:41.047108'
    - ! 'Returns the index of the last occurrence of the given substring or

      pattern (regexp) in str. Returns nil if not

      found. If the second parameter is present, it specifies the position in the

      string to end the search—characters beyond this point will not be

      considered.'
    - 
  - - 1788
    - String#rjust(integer, padstr=' ') =>new_str
    - 99
    - '2013-06-23 00:21:23.579462'
    - '2013-06-25 06:15:41.183367'
    - ! 'If integer is greater than the length of str, returns a

      new String of length integer with str right

      justified and padded with padstr; otherwise, returns str.'
    - 
  - - 1789
    - String#rpartition(sep) =>[head, sep, tail]
    - 99
    - '2013-06-23 00:21:24.181039'
    - '2013-06-25 06:15:41.483432'
    - 
    - 
  - - 1790
    - String#rpartition(regexp) =>[head, match, tail]
    - 99
    - '2013-06-23 00:21:24.916434'
    - '2013-06-25 06:15:41.829367'
    - ! 'Searches sep or pattern (regexp) in the string from the

      end of the string, and returns the part before it, the match, and the part

      after it. If it is not found, returns two empty strings and str.'
    - 
  - - 1791
    - String#rstrip =>new_str
    - 99
    - '2013-06-23 00:21:25.507575'
    - '2013-06-25 06:15:42.019207'
    - ! 'Returns a copy of str with trailing whitespace removed. See also

      String#lstrip and String#strip.'
    - 
  - - 1792
    - String#rstrip! =>self or nil
    - 99
    - '2013-06-23 00:21:25.976455'
    - '2013-06-25 06:15:42.320329'
    - ! 'Removes trailing whitespace from str, returning nil

      if no change was made. See also String#lstrip! and

      String#strip!.'
    - 
  - - 1793
    - String#scan(pattern) =>array
    - 99
    - '2013-06-23 00:21:26.424774'
    - '2013-06-25 06:15:42.623254'
    - 
    - 
  - - 1794
    - String#scan(pattern) {|match, ...| block } =>str
    - 99
    - '2013-06-23 00:21:27.061327'
    - '2013-06-25 06:15:42.924647'
    - ! 'Both forms iterate through str, matching the pattern (which may be

      a Regexp or a String). For each match, a result

      is generated and either added to the result array or passed to the block.

      If the pattern contains no groups, each individual result consists of the

      matched string, $&.  If the pattern contains groups, each

      individual result is itself an array containing one entry per group.'
    - 
  - - 1795
    - String#scrub =>new_str
    - 99
    - '2013-06-23 00:21:27.563255'
    - '2013-06-25 06:15:43.070150'
    - 
    - 
  - - 1796
    - String#scrub(repl) =>new_str
    - 99
    - '2013-06-23 00:21:28.021214'
    - '2013-06-25 06:15:43.238233'
    - 
    - 
  - - 1797
    - String#scrub{|bytes|} =>new_str
    - 99
    - '2013-06-23 00:21:28.635448'
    - '2013-06-25 06:15:43.562787'
    - ! 'If the string is invalid byte sequence then replace invalid bytes with

      given replacement character, else returns self. If block is given, replace

      invalid bytes with returned value of the block.'
    - 
  - - 1798
    - String#scrub! =>str
    - 99
    - '2013-06-23 00:21:29.239075'
    - '2013-06-25 06:15:43.862760'
    - 
    - 
  - - 1799
    - String#scrub!(repl) =>str
    - 99
    - '2013-06-23 00:21:29.574422'
    - '2013-06-25 06:15:44.185916'
    - 
    - 
  - - 1800
    - String#scrub!{|bytes|} =>str
    - 99
    - '2013-06-23 00:21:29.887903'
    - '2013-06-25 06:15:44.353956'
    - ! 'If the string is invalid byte sequence then replace invalid bytes with

      given replacement character, else returns self. If block is given, replace

      invalid bytes with returned value of the block.'
    - 
  - - 1801
    - String#setbyte(index, integer) =>integer
    - 99
    - '2013-06-23 00:21:30.223754'
    - '2013-06-25 06:15:44.645560'
    - modifies the indexth byte as integer.
    - 
  - - 1802
    - String#size =>integer
    - 99
    - '2013-06-23 00:21:30.692435'
    - '2013-06-25 06:15:44.934340'
    - Returns the character length of str.
    - 
  - - 1803
    - String#slice(index) =>new_str or nil
    - 99
    - '2013-06-23 00:21:31.030371'
    - '2013-06-25 06:15:45.215418'
    - 
    - 
  - - 1804
    - String#slice(start, length) =>new_str or nil
    - 99
    - '2013-06-23 00:21:31.332410'
    - '2013-06-25 06:15:45.384310'
    - 
    - 
  - - 1805
    - String#slice(range) =>new_str or nil
    - 99
    - '2013-06-23 00:21:31.812987'
    - '2013-06-25 06:15:45.818496'
    - 
    - 
  - - 1806
    - String#slice(regexp) =>new_str or nil
    - 99
    - '2013-06-23 00:21:32.137848'
    - '2013-06-25 06:15:46.119848'
    - 
    - 
  - - 1807
    - String#slice(regexp, capture) =>new_str or nil
    - 99
    - '2013-06-23 00:21:32.472940'
    - '2013-06-25 06:15:46.432179'
    - 
    - 
  - - 1808
    - String#slice(match_str) =>new_str or nil
    - 99
    - '2013-06-23 00:21:32.821905'
    - '2013-06-25 06:15:46.600410'
    - ! 'Element Reference — If passed a single index, returns a

      substring of one character at that index. If passed a start

      index and a length, returns a substring containing

      length characters starting at the index. If

      passed a range, its beginning and end are interpreted as

      offsets delimiting the substring to be returned.'
    - 
  - - 1809
    - String#slice!(fixnum) =>fixnum or nil
    - 99
    - '2013-06-23 00:21:33.268330'
    - '2013-06-25 06:15:46.889872'
    - 
    - 
  - - 1810
    - String#slice!(fixnum, fixnum) =>new_str or nil
    - 99
    - '2013-06-23 00:21:33.882005'
    - '2013-06-25 06:15:47.169028'
    - 
    - 
  - - 1811
    - String#slice!(range) =>new_str or nil
    - 99
    - '2013-06-23 00:21:34.517758'
    - '2013-06-25 06:15:47.471888'
    - 
    - 
  - - 1812
    - String#slice!(regexp) =>new_str or nil
    - 99
    - '2013-06-23 00:21:34.966303'
    - '2013-06-25 06:15:47.795639'
    - 
    - 
  - - 1813
    - String#slice!(other_str) =>new_str or nil
    - 99
    - '2013-06-23 00:21:35.568673'
    - '2013-06-25 06:15:47.964217'
    - ! 'Deletes the specified portion from str, and returns the portion

      deleted.'
    - 
  - - 1814
    - String#split(pattern=$;, [limit]) =>anArray
    - 99
    - '2013-06-23 00:21:36.193545'
    - '2013-06-25 06:15:48.264741'
    - ! 'Divides str into substrings based on a delimiter, returning an

      array of these substrings.'
    - 
  - - 1815
    - String#squeeze([other_str]*) =>new_str
    - 99
    - '2013-06-23 00:21:36.573525'
    - '2013-06-25 06:15:48.577765'
    - ! 'Builds a set of characters from the other_str parameter(s) using

      the procedure described for String#count. Returns a new string

      where runs of the same character that occur in this set are replaced by a

      single character. If no arguments are given, all runs of identical

      characters are replaced by a single character.'
    - 
  - - 1816
    - String#squeeze!([other_str]*) =>str or nil
    - 99
    - '2013-06-23 00:21:36.886716'
    - '2013-06-25 06:15:48.900448'
    - ! 'Squeezes str in place, returning either str, or

      nil if no changes were made.'
    - 
  - - 1817
    - String#start_with?([prefixes]+) =>true or false
    - 99
    - '2013-06-23 00:21:37.202166'
    - '2013-06-25 06:15:49.191056'
    - ! 'Returns true if str starts with one of the

      prefixes given.'
    - 
  - - 1818
    - String#strip =>new_str
    - 99
    - '2013-06-23 00:21:37.671420'
    - '2013-06-25 06:15:49.491868'
    - ! 'Returns a copy of str with leading and trailing whitespace

      removed.'
    - 
  - - 1819
    - String#strip! =>str or nil
    - 99
    - '2013-06-23 00:21:38.017919'
    - '2013-06-25 06:15:49.782118'
    - ! 'Removes leading and trailing whitespace from str. Returns

      nil if str was not altered.'
    - 
  - - 1820
    - String#sub(pattern, replacement) =>new_str
    - 99
    - '2013-06-23 00:21:38.331482'
    - '2013-06-25 06:15:50.096442'
    - 
    - 
  - - 1821
    - String#sub(pattern, hash) =>new_str
    - 99
    - '2013-06-23 00:21:38.789400'
    - '2013-06-25 06:15:50.408343'
    - 
    - 
  - - 1822
    - String#sub(pattern) {|match| block } =>new_str
    - 99
    - '2013-06-23 00:21:39.104935'
    - '2013-06-25 06:15:50.709408'
    - ! 'Returns a copy of str with the first occurrence of

      pattern replaced by the second argument. The

      pattern is typically a Regexp; if

      given as a String, any regular expression

      metacharacters it contains will be interpreted literally, e.g.

      ''\\d'' will match a backlash followed by ‘d’, instead of a

      digit.'
    - 
  - - 1823
    - String#sub!(pattern, replacement) =>str or nil
    - 99
    - '2013-06-23 00:21:39.451206'
    - '2013-06-25 06:15:50.899928'
    - 
    - 
  - - 1824
    - String#sub!(pattern) {|match| block } =>str or nil
    - 99
    - '2013-06-23 00:21:39.931953'
    - '2013-06-25 06:15:51.200779'
    - ! 'Performs the same substitution as #sub in-place.'
    - 
  - - 1825
    - String#succ =>new_str
    - 99
    - '2013-06-23 00:21:40.245378'
    - '2013-06-25 06:15:51.513532'
    - ! 'Returns the successor to str. The successor is calculated by

      incrementing characters starting from the rightmost alphanumeric (or the

      rightmost character if there are no alphanumerics) in the string.

      Incrementing a digit always results in another digit, and incrementing a

      letter results in another letter of the same case. Incrementing

      nonalphanumerics uses the underlying character set’s collating sequence.'
    - 
  - - 1826
    - String#succ! =>str
    - 99
    - '2013-06-23 00:21:40.536541'
    - '2013-06-25 06:15:51.648728'
    - Equivalent to String#succ, but modifies the receiver in place.
    - 
  - - 1827
    - String#sum(n=16) =>integer
    - 99
    - '2013-06-23 00:21:40.907359'
    - '2013-06-25 06:15:52.260807'
    - ! 'Returns a basic n-bit checksum of the characters in str,

      where n is the optional Fixnum parameter, defaulting

      to 16. The result is simply the sum of the binary value of each character

      in str modulo 2**n - 1. This is not a particularly

      good checksum.'
    - 
  - - 1828
    - String#swapcase =>new_str
    - 99
    - '2013-06-23 00:21:41.254578'
    - '2013-06-25 06:15:52.550840'
    - ! 'Returns a copy of str with uppercase alphabetic characters

      converted to lowercase and lowercase characters converted to uppercase.

      Note: case conversion is effective only in ASCII region.'
    - 
  - - 1829
    - String#swapcase! =>str or nil
    - 99
    - '2013-06-23 00:21:41.568137'
    - '2013-06-25 06:15:52.854268'
    - ! 'Equivalent to String#swapcase, but modifies the receiver in

      place, returning str, or nil if no changes were made.

      Note: case conversion is effective only in ASCII region.'
    - 
  - - 1830
    - String#to_c =>complex
    - 99
    - '2013-06-23 00:21:41.992289'
    - '2013-06-25 06:15:53.021685'
    - ! 'Returns a complex which denotes the string form.  The parser ignores

      leading whitespaces and trailing garbage.  Any digit sequences can be

      separated by an underscore.  Returns zero for null or garbage string.'
    - 
  - - 1831
    - String#to_f =>float
    - 99
    - '2013-06-23 00:21:42.307428'
    - '2013-06-25 06:15:53.334336'
    - ! 'Returns the result of interpreting leading characters in str as a

      floating point number. Extraneous characters past the end of a valid number

      are ignored. If there is not a valid number at the start of str,

      0.0 is returned. This method never raises an exception.'
    - 
  - - 1832
    - String#to_i(base=10) =>integer
    - 99
    - '2013-06-23 00:21:42.654170'
    - '2013-06-25 06:15:53.657435'
    - ! 'Returns the result of interpreting leading characters in str as an

      integer base base (between 2 and 36). Extraneous characters past

      the end of a valid number are ignored. If there is not a valid number at

      the start of str, 0 is returned. This method never

      raises an exception when base is valid.'
    - 
  - - 1833
    - String#to_r =>rational
    - 99
    - '2013-06-23 00:21:42.956529'
    - '2013-06-25 06:15:53.959804'
    - ! 'Returns a rational which denotes the string form.  The parser ignores

      leading whitespaces and trailing garbage.  Any digit sequences can be

      separated by an underscore.  Returns zero for null or garbage string.'
    - 
  - - 1834
    - String#to_s =>str
    - 99
    - '2013-06-23 00:21:43.381345'
    - '2013-06-25 06:15:54.237760'
    - 
    - 
  - - 1835
    - String#to_str =>str
    - 99
    - '2013-06-23 00:21:43.706059'
    - '2013-06-25 06:15:54.383739'
    - Returns the receiver.
    - 
  - - 1836
    - String#to_str =>str
    - 99
    - '2013-06-23 00:21:44.043679'
    - '2013-06-25 06:15:54.684745'
    - 
    - 
  - - 1837
    - String#to_sym =>symbol
    - 99
    - '2013-06-23 00:21:44.512855'
    - '2013-06-25 06:15:54.997640'
    - ! 'Returns the Symbol corresponding to str, creating the

      symbol if it did not previously exist. See Symbol#id2name.'
    - 
  - - 1838
    - String#tr(from_str, to_str) => new_str
    - 99
    - '2013-06-23 00:21:44.815287'
    - '2013-06-25 05:03:16.821276'
    - ! 'Returns a copy of str with the characters in

      from_str replaced by the corresponding characters in

      to_str.  If to_str is shorter than

      from_str, it is padded with its last character in order to

      maintain the correspondence.'
    - 
  - - 1839
    - String#tr!(from_str, to_str) =>str or nil
    - 99
    - '2013-06-23 00:21:45.139483'
    - '2013-06-25 06:15:55.300366'
    - ! 'Translates str in place, using the same rules as

      String#tr. Returns str, or nil if no

      changes were made.'
    - 
  - - 1840
    - String#tr_s(from_str, to_str) =>new_str
    - 99
    - '2013-06-23 00:21:45.631213'
    - '2013-06-25 06:15:55.590165'
    - ! 'Processes a copy of str as described under String#tr,

      then removes duplicate characters in regions that were affected by the

      translation.'
    - 
  - - 1841
    - String#tr_s!(from_str, to_str) =>str or nil
    - 99
    - '2013-06-23 00:21:45.946420'
    - '2013-06-25 06:15:55.902580'
    - ! 'Performs String#tr_s processing on str in place,

      returning str, or nil if no changes were made.'
    - 
  - - 1842
    - String#unpack(format) =>anArray
    - 99
    - '2013-06-23 00:21:46.248697'
    - '2013-06-25 06:15:56.069664'
    - ! 'Decodes str (which may contain binary data) according to the

      format string, returning an array of each value extracted. The format

      string consists of a sequence of single-character directives, summarized in

      the table at the end of this entry. Each directive may be followed by a

      number, indicating the number of times to repeat with this directive. An

      asterisk (“*”) will use up all remaining elements. The

      directives sSiIlL may each be followed by an underscore

      (“_”) or exclamation mark (“!”) to use the

      underlying platform’s native size for the specified type; otherwise, it

      uses a platform-independent consistent size. Spaces are ignored in the

      format string. See also Array#pack.'
    - 
  - - 1843
    - String#upcase =>new_str
    - 99
    - '2013-06-23 00:21:46.807010'
    - '2013-06-25 06:15:56.258894'
    - ! 'Returns a copy of str with all lowercase letters replaced with

      their uppercase counterparts. The operation is locale insensitive—only

      characters “a” to “z” are affected. Note: case replacement is effective

      only in ASCII region.'
    - 
  - - 1844
    - String#upcase! =>str or nil
    - 99
    - '2013-06-23 00:21:47.153709'
    - '2013-06-25 06:15:56.415389'
    - ! 'Upcases the contents of str, returning nil if no

      changes were made. Note: case replacement is effective only in ASCII

      region.'
    - 
  - - 1845
    - String#upto(other_str, exclusive=false) {|s| block } =>str
    - 99
    - '2013-06-23 00:21:47.480062'
    - '2013-06-25 06:15:56.705927'
    - 
    - 
  - - 1846
    - String#upto(other_str, exclusive=false) =>an_enumerator
    - 99
    - '2013-06-23 00:21:47.904812'
    - '2013-06-25 06:15:56.875893'
    - ! 'Iterates through successive values, starting at str and ending at

      other_str inclusive, passing each value in turn to the block. The

      String#succ method is used to generate each value.  If

      optional second argument exclusive is omitted or is false, the last value

      will be included; otherwise it will be excluded.'
    - 
  - - 1847
    - String#valid_encoding? =>true or false
    - 99
    - '2013-06-23 00:21:48.229363'
    - '2013-06-25 06:15:57.187381'
    - Returns true for a string which encoded correctly.
    - 
  - - 1848
    - Struct#new([class_name] [, member_name]+>) =>StructClass
    - 100
    - '2013-06-23 00:21:52.385421'
    - '2013-06-25 06:15:57.501289'
    - 
    - 
  - - 1849
    - Struct#new([class_name] [, member_name]+>) {|StructClass| block } =>StructClass
    - 100
    - '2013-06-23 00:21:52.924530'
    - '2013-06-25 06:15:57.812881'
    - 
    - 
  - - 1850
    - Struct#new(value, ...) =>obj
    - 100
    - '2013-06-23 00:21:53.216872'
    - '2013-06-25 06:15:58.103680'
    - 
    - 
  - - 1851
    - Struct#StructClass[value, ...] =>obj
    - 100
    - '2013-06-23 00:21:53.552459'
    - '2013-06-25 06:15:58.393039'
    - ! 'The first two forms are used to create a new Struct subclass class_name that
      can

      contain a value for each member_name.  This subclass can be

      used to create instances of the structure like any other Class.'
    - 
  - - 1852
    - Struct#struct == other =>true or false
    - 100
    - '2013-06-23 00:21:54.043940'
    - '2013-06-25 06:15:58.527023'
    - ! 'Equality—Returns true if other has the same

      struct subclass and has equal member values (according to Object#==).'
    - 
  - - 1853
    - Struct#struct[member] =>anObject
    - 100
    - '2013-06-23 00:21:54.423819'
    - '2013-06-25 06:15:58.817705'
    - 
    - 
  - - 1854
    - Struct#struct[index] =>anObject
    - 100
    - '2013-06-23 00:21:55.048810'
    - '2013-06-25 06:15:59.118785'
    - ! 'Attribute Reference—Returns the value of the given struct

      member or the member at the given index.   Raises

      NameError if the member does not

      exist and IndexError if the

      index is out of range.'
    - 
  - - 1855
    - Struct#struct[name] = obj =>obj
    - 100
    - '2013-06-23 00:21:55.408501'
    - '2013-06-25 06:15:59.423881'
    - 
    - 
  - - 1856
    - Struct#struct[index] = obj =>obj
    - 100
    - '2013-06-23 00:21:55.789066'
    - '2013-06-25 06:15:59.767506'
    - ! 'Attribute Assignment—Sets the value of the given struct member

      or the member at the given index.  Raises NameError if the name does not exist

      and IndexError if the index is

      out of range.'
    - 
  - - 1857
    - Struct#each {|obj| block } =>struct
    - 100
    - '2013-06-23 00:21:56.269124'
    - '2013-06-25 06:16:00.069054'
    - 
    - 
  - - 1858
    - Struct#each =>an_enumerator
    - 100
    - '2013-06-23 00:21:56.682508'
    - '2013-06-25 06:16:00.225744'
    - ! 'Yields the value of each struct member in order.  If no block is given an

      enumerator is returned.'
    - 
  - - 1859
    - Struct#each_pair {|sym, obj| block } =>struct
    - 100
    - '2013-06-23 00:21:57.308913'
    - '2013-06-25 06:16:00.515750'
    - 
    - 
  - - 1860
    - Struct#each_pair =>an_enumerator
    - 100
    - '2013-06-23 00:21:57.789581'
    - '2013-06-25 06:16:00.806202'
    - ! 'Yields the name and value of each struct member in order.  If no block is

      given an enumerator is returned.'
    - 
  - - 1861
    - Struct#eql?(other) =>true or false
    - 100
    - '2013-06-23 00:21:58.414108'
    - '2013-06-25 06:16:01.095969'
    - ! 'Hash equality---other and

      struct refer to the same hash key if they have the same struct

      subclass and have equal member values (according to Object#eql?).'
    - 
  - - 1862
    - Struct#hash =>fixnum
    - 100
    - '2013-06-23 00:21:58.871918'
    - '2013-06-25 06:16:01.253144'
    - Returns a hash value based on this struct’s contents (see Object#hash).
    - 
  - - 1863
    - Struct#to_s =>string
    - 100
    - '2013-06-23 00:21:59.207876'
    - '2013-06-25 06:16:01.565259'
    - 
    - 
  - - 1864
    - Struct#inspect =>string
    - 100
    - '2013-06-23 00:21:59.546399'
    - '2013-06-25 06:16:01.746404'
    - Describe the contents of this struct in a string.
    - 
  - - 1865
    - Struct#length =>fixnum
    - 100
    - '2013-06-23 00:21:59.892889'
    - '2013-06-25 06:16:02.047854'
    - Returns the number of struct members.
    - 
  - - 1866
    - Struct#members =>array
    - 100
    - '2013-06-23 00:22:00.239878'
    - '2013-06-25 06:16:02.348553'
    - ! 'Returns the struct members as an array of symbols:'
    - 
  - - 1867
    - Struct#select {|i| block } =>array
    - 100
    - '2013-06-23 00:22:00.687181'
    - '2013-06-25 06:16:02.494914'
    - 
    - 
  - - 1868
    - Struct#select =>an_enumerator
    - 100
    - '2013-06-23 00:22:01.047201'
    - '2013-06-25 06:16:02.785165'
    - ! 'Yields each member value from the struct to the block and returns an Array
      containing the member values from the

      struct for which the given block returns a true value

      (equivalent to Enumerable#select).'
    - 
  - - 1869
    - Struct#size =>fixnum
    - 100
    - '2013-06-23 00:22:01.343820'
    - '2013-06-25 06:16:03.086175'
    - Returns the number of struct members.
    - 
  - - 1870
    - Struct#to_a =>array
    - 100
    - '2013-06-23 00:22:01.685411'
    - '2013-06-25 06:16:03.375574'
    - Returns the values for this struct as an Array.
    - 
  - - 1871
    - Struct#to_h =>hash
    - 100
    - '2013-06-23 00:22:02.032071'
    - '2013-06-25 06:16:03.710483'
    - ! 'Returns a Hash containing the names and values for

      the struct’s members.'
    - 
  - - 1872
    - Struct#values =>array
    - 100
    - '2013-06-23 00:22:02.445839'
    - '2013-06-25 06:16:03.878143'
    - Returns the values for this struct as an Array.
    - 
  - - 1873
    - Struct#values_at(selector, ...) =>an_array
    - 100
    - '2013-06-23 00:22:02.738822'
    - '2013-06-25 06:16:04.181397'
    - ! 'Returns the struct member values for each selector as an Array.  A selector
      may be either an Integer offset or a Range

      of offsets (as in Array#values_at).'
    - 
  - - 1874
    - Symbol#all_symbols => array
    - 101
    - '2013-06-23 00:22:06.632210'
    - '2013-06-25 05:04:34.887701'
    - Returns an array of all the symbols currently in Ruby’s symbol table.
    - 
  - - 1875
    - Symbol#symbol other_symbol =>-1, 0, +1 or nil
    - 101
    - '2013-06-23 00:22:07.099975'
    - '2013-06-25 06:16:04.493708'
    - ! 'Compares symbol with other_symbol after calling

      to_s on each of the symbols.

      Returns -1, 0, +1 or nil depending on whether symbol is less

      than, equal to, or greater than other_symbol.'
    - 
  - - 1876
    - Symbol#sym[idx] =>char
    - 101
    - '2013-06-23 00:22:07.446892'
    - '2013-06-25 06:16:04.772623'
    - 
    - 
  - - 1877
    - Symbol#sym[b, n] =>string
    - 101
    - '2013-06-23 00:22:07.906461'
    - '2013-06-25 06:16:05.062767'
    - Returns sym.to_s[].
    - 
  - - 1878
    - Symbol#capitalize =>symbol
    - 101
    - '2013-06-23 00:22:08.219874'
    - '2013-06-25 06:16:05.219912'
    - Same as sym.to_s.capitalize.intern.
    - 
  - - 1879
    - Symbol#casecmp(other) =>-1, 0, +1 or nil
    - 101
    - '2013-06-23 00:22:08.566511'
    - '2013-06-25 06:16:05.543824'
    - Case-insensitive version of Symbol#<=>.
    - 
  - - 1880
    - Symbol#downcase =>symbol
    - 101
    - '2013-06-23 00:22:09.058146'
    - '2013-06-25 06:16:05.867240'
    - Same as sym.to_s.downcase.intern.
    - 
  - - 1881
    - Symbol#empty? =>true or false
    - 101
    - '2013-06-23 00:22:09.393753'
    - '2013-06-25 06:16:06.167732'
    - Returns that sym is :“” or not.
    - 
  - - 1882
    - Symbol#encoding =>encoding
    - 101
    - '2013-06-23 00:22:09.719971'
    - '2013-06-25 06:16:06.479875'
    - ! 'Returns the Encoding object that represents the

      encoding of sym.'
    - 
  - - 1883
    - Symbol#id2name =>string
    - 101
    - '2013-06-23 00:22:10.217135'
    - '2013-06-25 06:16:06.760888'
    - Returns the name or string corresponding to sym.
    - 
  - - 1884
    - Symbol#inspect =>string
    - 101
    - '2013-06-23 00:22:10.613848'
    - '2013-06-25 06:16:06.921681'
    - Returns the representation of sym as a symbol literal.
    - 
  - - 1885
    - Symbol#intern =>sym
    - 101
    - '2013-06-23 00:22:10.949568'
    - '2013-06-25 06:16:07.108214'
    - ! 'In general, to_sym returns the Symbol

      corresponding to an object. As sym is already a symbol,

      self is returned in this case.'
    - 
  - - 1886
    - Symbol#length =>integer
    - 101
    - '2013-06-23 00:22:11.374403'
    - '2013-06-25 06:16:07.420051'
    - Same as sym.to_s.length.
    - 
  - - 1887
    - Symbol#match(obj) =>fixnum or nil
    - 101
    - '2013-06-23 00:22:11.712017'
    - '2013-06-25 06:16:07.710262'
    - Returns sym.to_s =~ obj.
    - 
  - - 1888
    - Symbol#size =>integer
    - 101
    - '2013-06-23 00:22:12.058916'
    - '2013-06-25 06:16:08.022681'
    - Same as sym.to_s.length.
    - 
  - - 1889
    - Symbol#slice(idx) =>char
    - 101
    - '2013-06-23 00:22:12.560720'
    - '2013-06-25 06:16:08.190905'
    - 
    - 
  - - 1890
    - Symbol#slice(b, n) =>string
    - 101
    - '2013-06-23 00:22:12.841134'
    - '2013-06-25 06:16:08.493195'
    - Returns sym.to_s[].
    - 
  - - 1891
    - Symbol#succ
    - 101
    - '2013-06-23 00:22:13.189942'
    - '2013-06-25 05:04:37.626476'
    - Same as sym.to_s.succ.intern.
    - 
  - - 1892
    - Symbol#swapcase =>symbol
    - 101
    - '2013-06-23 00:22:13.726218'
    - '2013-06-25 06:16:08.793157'
    - Same as sym.to_s.swapcase.intern.
    - 
  - - 1893
    - Symbol#to_proc
    - 101
    - '2013-06-23 00:22:14.040057'
    - '2013-06-25 05:04:37.963898'
    - ! 'Returns a Proc object which respond to the given method by

      sym.'
    - 
  - - 1894
    - Symbol#to_s =>string
    - 101
    - '2013-06-23 00:22:14.342240'
    - '2013-06-25 06:16:09.074752'
    - Returns the name or string corresponding to sym.
    - 
  - - 1895
    - Symbol#to_sym =>sym
    - 101
    - '2013-06-23 00:22:14.811397'
    - '2013-06-25 06:16:09.352883'
    - ! 'In general, to_sym returns the Symbol

      corresponding to an object. As sym is already a symbol,

      self is returned in this case.'
    - 
  - - 1896
    - Symbol#upcase =>symbol
    - 101
    - '2013-06-23 00:22:15.137808'
    - '2013-06-25 06:16:09.509471'
    - Same as sym.to_s.upcase.intern.
    - 
  - - 1897
    - SystemCallError#system_call_error === other =>true or false
    - 103
    - '2013-06-23 00:22:20.976580'
    - '2013-06-25 06:16:09.699813'
    - ! 'Return true if the receiver is a generic

      SystemCallError, or if the error numbers self and

      other are the same.'
    - 
  - - 1898
    - SystemCallError#new(msg, errno) =>system_call_error_subclass
    - 103
    - '2013-06-23 00:22:21.511242'
    - '2013-06-25 06:16:10.011975'
    - ! 'If errno corresponds to a known system error code, constructs the

      appropriate Errno class for that error, otherwise constructs a

      generic SystemCallError object. The error number is

      subsequently available via the errno method.'
    - 
  - - 1899
    - SystemCallError#errno =>fixnum
    - 103
    - '2013-06-23 00:22:21.858072'
    - '2013-06-25 06:16:10.313716'
    - Return this SystemCallError’s error number.
    - 
  - - 1900
    - SystemExit#new =>system_exit
    - 104
    - '2013-06-23 00:22:23.842473'
    - '2013-06-25 06:16:10.614859'
    - 
    - 
  - - 1901
    - SystemExit#new(status) =>system_exit
    - 104
    - '2013-06-23 00:22:24.331497'
    - '2013-06-25 06:16:10.916118'
    - 
    - 
  - - 1902
    - SystemExit#new(status, msg) =>system_exit
    - 104
    - '2013-06-23 00:22:24.645023'
    - '2013-06-25 06:16:11.062539'
    - 
    - 
  - - 1903
    - SystemExit#new(msg) =>system_exit
    - 104
    - '2013-06-23 00:22:25.025084'
    - '2013-06-25 06:16:11.366120'
    - ! 'Create a new SystemExit exception with the given status and

      message. Status is true, false, or an integer. If status is not given, true

      is used.'
    - 
  - - 1904
    - SystemExit#status =>fixnum
    - 104
    - '2013-06-23 00:22:25.496302'
    - '2013-06-25 06:16:12.110815'
    - Return the status value associated with this system exit.
    - 
  - - 1905
    - SystemExit#success? =>true or false
    - 104
    - '2013-06-23 00:22:25.799231'
    - '2013-06-25 06:16:12.434458'
    - Returns true if exiting successful, false if not.
    - 
  - - 1906
    - Thread#DEBUG =>num
    - 106
    - '2013-06-23 00:22:32.912771'
    - '2013-06-25 06:16:12.602662'
    - ! 'Returns the thread debug level.  Available only if compiled with

      THREAD_DEBUG=-1.'
    - 
  - - 1907
    - Thread#DEBUG = num
    - 106
    - '2013-06-23 00:22:33.450891'
    - '2013-06-25 05:12:14.756299'
    - ! 'Sets the thread debug level.  Available only if compiled with

      THREAD_DEBUG=-1.'
    - 
  - - 1908
    - Thread#abort_on_exception =>true or false
    - 106
    - '2013-06-23 00:22:33.755209'
    - '2013-06-25 06:16:12.925920'
    - ! 'Returns the status of the thread-local “abort on exception” condition for

      this thr.'
    - 
  - - 1909
    - Thread#abort_on_exception= boolean =>true or false
    - 106
    - '2013-06-23 00:22:34.070186'
    - '2013-06-25 06:16:13.216042'
    - ! 'When set to true, all threads (including the main program)

      will abort if an exception is raised in this thr.'
    - 
  - - 1910
    - Thread#current =>thread
    - 106
    - '2013-06-23 00:22:34.571196'
    - '2013-06-25 06:16:13.517506'
    - Returns the currently executing thread.
    - 
  - - 1911
    - Thread#exclusive { block } => obj
    - 106
    - '2013-06-23 00:22:34.895685'
    - '2013-06-25 05:12:15.361693'
    - ! 'Wraps a block in Thread.critical, restoring the original value upon exit

      from the critical section, and returns the value of the block.'
    - 
  - - 1912
    - Thread#exit =>thread
    - 106
    - '2013-06-23 00:22:35.198253'
    - '2013-06-25 06:16:13.807587'
    - ! 'Terminates the currently running thread and schedules another thread to be

      run.'
    - 
  - - 1913
    - Thread#fork([args]*) {|args| block } =>thread
    - 106
    - '2013-06-23 00:22:35.669063'
    - '2013-06-25 06:16:13.953419'
    - ! 'Basically the same as ::new.

      However, if class Thread is subclassed, then

      calling start in that subclass will not invoke the subclass’s

      initialize method.'
    - 
  - - 1914
    - Thread#handle_interrupt(hash) { ... } =>result of the block
    - 106
    - '2013-06-23 00:22:36.015627'
    - '2013-06-25 06:16:14.245302'
    - Changes asynchronous interrupt timing.
    - 
  - - 1915
    - Thread#kill(thread) =>thread
    - 106
    - '2013-06-23 00:22:36.318176'
    - '2013-06-25 06:16:14.568334'
    - Causes the given thread to exit, see also ::exit.
    - 
  - - 1916
    - Thread#list =>array
    - 106
    - '2013-06-23 00:22:36.810054'
    - '2013-06-25 06:16:14.847264'
    - ! 'Returns an array of Thread objects for all

      threads that are either runnable or stopped.'
    - 
  - - 1917
    - Thread#main =>thread
    - 106
    - '2013-06-23 00:22:37.147745'
    - '2013-06-25 06:16:15.037865'
    - Returns the main thread.
    - 
  - - 1918
    - Thread#new { ... } =>thread
    - 106
    - '2013-06-23 00:22:37.483316'
    - '2013-06-25 06:16:15.195651'
    - 
    - 
  - - 1919
    - Thread#new(*args, &proc) =>thread
    - 106
    - '2013-06-23 00:22:37.930398'
    - '2013-06-25 06:16:15.517442'
    - 
    - 
  - - 1920
    - Thread#new(*args) { |args| ... } =>thread
    - 106
    - '2013-06-23 00:22:38.232134'
    - '2013-06-25 06:16:15.807515'
    - Creates a new thread executing the given block.
    - 
  - - 1921
    - Thread#pass =>nil
    - 106
    - '2013-06-23 00:22:38.568056'
    - '2013-06-25 06:16:16.098311'
    - ! 'Give the thread scheduler a hint to pass execution to another thread. A

      running thread may or may not switch, it depends on OS and processor.'
    - 
  - - 1922
    - Thread#pending_interrupt?(error = nil) =>true/false
    - 106
    - '2013-06-23 00:22:39.040061'
    - '2013-06-25 06:16:16.399262'
    - ! 'Returns whether or not the asynchronous queue is empty for the target

      thread.'
    - 
  - - 1923
    - Thread#start([args]*) {|args| block } =>thread
    - 106
    - '2013-06-23 00:22:39.372948'
    - '2013-06-25 06:16:16.558584'
    - ! 'Basically the same as ::new.

      However, if class Thread is subclassed, then

      calling start in that subclass will not invoke the subclass’s

      initialize method.'
    - 
  - - 1924
    - Thread#stop =>nil
    - 106
    - '2013-06-23 00:22:39.664089'
    - '2013-06-25 06:16:16.869913'
    - ! 'Stops execution of the current thread, putting it into a “sleep” state, and

      schedules execution of another thread.'
    - 
  - - 1925
    - Thread#thr[sym] =>obj or nil
    - 106
    - '2013-06-23 00:22:40.134967'
    - '2013-06-25 06:16:17.183171'
    - ! 'Attribute Reference—Returns the value of a fiber-local variable (current

      thread’s root fiber if not explicitly inside a Fiber), using either a symbol
      or a string name. If

      the specified variable does not exist, returns nil.'
    - 
  - - 1926
    - Thread#thr[sym] = obj =>obj
    - 106
    - '2013-06-23 00:22:40.482149'
    - '2013-06-25 06:16:17.484272'
    - ! 'Attribute Assignment—Sets or creates the value of a fiber-local variable,

      using either a symbol or a string.'
    - 
  - - 1927
    - Thread#abort_on_exception =>true or false
    - 106
    - '2013-06-23 00:22:40.817690'
    - '2013-06-25 06:16:17.785390'
    - 
    - 
  - - 1928
    - Thread#abort_on_exception= boolean =>true or false
    - 106
    - '2013-06-23 00:22:41.242496'
    - '2013-06-25 06:16:18.075665'
    - 
    - 
  - - 1929
    - Thread#add_trace_func(proc) =>proc
    - 106
    - '2013-06-23 00:22:41.544689'
    - '2013-06-25 06:16:18.221200'
    - Adds proc as a handler for tracing.
    - 
  - - 1930
    - Thread#alive? =>true or false
    - 106
    - '2013-06-23 00:22:41.882107'
    - '2013-06-25 06:16:18.522383'
    - Returns true if thr is running or sleeping.
    - 
  - - 1931
    - Thread#backtrace =>array
    - 106
    - '2013-06-23 00:22:42.362547'
    - '2013-06-25 06:16:18.846161'
    - Returns the current backtrace of the target thread.
    - 
  - - 1932
    - Thread#backtrace_locations(*args) =>array or nil
    - 106
    - '2013-06-23 00:22:42.653682'
    - '2013-06-25 06:16:19.149470'
    - ! 'Returns the execution stack for the target thread—an array containing

      backtrace location objects.'
    - 
  - - 1933
    - Thread#exit =>thr or nil
    - 106
    - '2013-06-23 00:22:42.967348'
    - '2013-06-25 06:16:19.450467'
    - 
    - 
  - - 1934
    - Thread#kill =>thr or nil
    - 106
    - '2013-06-23 00:22:43.436379'
    - '2013-06-25 06:16:19.763143'
    - 
    - 
  - - 1935
    - Thread#terminate =>thr or nil
    - 106
    - '2013-06-23 00:22:43.774090'
    - '2013-06-25 06:16:19.920813'
    - Terminates thr and schedules another thread to be run.
    - 
  - - 1936
    - Thread#group =>thgrp or nil
    - 106
    - '2013-06-23 00:22:44.065209'
    - '2013-06-25 06:16:20.209659'
    - ! 'Returns the ThreadGroup which contains the

      given thread, or returns nil if thr is not a

      member of any group.'
    - 
  - - 1937
    - Thread#inspect =>string
    - 106
    - '2013-06-23 00:22:44.511936'
    - '2013-06-25 06:16:20.500747'
    - Dump the name, id, and status of thr to a string.
    - 
  - - 1938
    - Thread#join =>thr
    - 106
    - '2013-06-23 00:22:44.847452'
    - '2013-06-25 06:16:20.689937'
    - 
    - 
  - - 1939
    - Thread#join(limit) =>thr
    - 106
    - '2013-06-23 00:22:45.185097'
    - '2013-06-25 06:16:21.013321'
    - The calling thread will suspend execution and run this thr.
    - 
  - - 1940
    - Thread#key?(sym) =>true or false
    - 106
    - '2013-06-23 00:22:45.632145'
    - '2013-06-25 06:16:21.181539'
    - ! 'Returns true if the given string (or symbol) exists as a

      fiber-local variable.'
    - 
  - - 1941
    - Thread#keys =>array
    - 106
    - '2013-06-23 00:22:45.934078'
    - '2013-06-25 06:16:21.517832'
    - Returns an array of the names of the fiber-local variables (as Symbols).
    - 
  - - 1942
    - Thread#exit =>thr or nil
    - 106
    - '2013-06-23 00:22:46.269965'
    - '2013-06-25 06:16:21.819836'
    - 
    - 
  - - 1943
    - Thread#kill =>thr or nil
    - 106
    - '2013-06-23 00:22:46.772225'
    - '2013-06-25 06:16:22.121185'
    - 
    - 
  - - 1944
    - Thread#terminate =>thr or nil
    - 106
    - '2013-06-23 00:22:47.087655'
    - '2013-06-25 06:16:22.411470'
    - 
    - 
  - - 1945
    - Thread#pending_interrupt?(error = nil) =>true/false
    - 106
    - '2013-06-23 00:22:47.389868'
    - '2013-06-25 06:16:22.713002'
    - 
    - 
  - - 1946
    - Thread#priority =>integer
    - 106
    - '2013-06-23 00:22:47.725434'
    - '2013-06-25 06:16:23.025002'
    - ! 'Returns the priority of thr. Default is inherited from the current

      thread which creating the new thread, or zero for the initial main thread;

      higher-priority thread will run more frequently than lower-priority threads

      (but lower-priority threads can also run).'
    - 
  - - 1947
    - Thread#priority= integer =>thr
    - 106
    - '2013-06-23 00:22:48.216927'
    - '2013-06-25 06:16:23.192608'
    - ! 'Sets the priority of thr to integer. Higher-priority

      threads will run more frequently than lower-priority threads (but

      lower-priority threads can also run).'
    - 
  - - 1948
    - Thread#raise
    - 106
    - '2013-06-23 00:22:48.541187'
    - '2013-06-23 06:55:54.995417'
    - 
    - 
  - - 1949
    - Thread#raise(string)
    - 106
    - '2013-06-23 00:22:48.834766'
    - '2013-06-23 06:55:55.160444'
    - 
    - 
  - - 1950
    - Thread#raise(exception [, string [, array]])
    - 106
    - '2013-06-23 00:22:49.304034'
    - '2013-06-25 05:12:19.941533'
    - ! 'Raises an exception from the given thread. The caller does not have to be

      thr. See Kernel#raise

      for more information.'
    - 
  - - 1951
    - Thread#run =>thr
    - 106
    - '2013-06-23 00:22:49.650506'
    - '2013-06-25 06:16:23.505323'
    - Wakes up thr, making it eligible for scheduling.
    - 
  - - 1952
    - Thread#safe_level =>integer
    - 106
    - '2013-06-23 00:22:49.976359'
    - '2013-06-25 06:16:23.807774'
    - ! 'Returns the safe level in effect for thr. Setting thread-local

      safe levels can help when implementing sandboxes which run insecure code.'
    - 
  - - 1953
    - Thread#set_trace_func(proc) =>proc
    - 106
    - '2013-06-23 00:22:50.321832'
    - '2013-06-25 06:16:24.109534'
    - 
    - 
  - - 1954
    - Thread#set_trace_func(nil) =>nil
    - 106
    - '2013-06-23 00:22:50.670567'
    - '2013-06-25 06:16:24.399588'
    - ! 'Establishes proc on thr as the handler for tracing, or

      disables tracing if the parameter is nil.'
    - 
  - - 1955
    - Thread#status =>string, false or nil
    - 106
    - '2013-06-23 00:22:51.017293'
    - '2013-06-25 06:16:24.678821'
    - Returns the status of thr.
    - 
  - - 1956
    - Thread#stop? =>true or false
    - 106
    - '2013-06-23 00:22:51.464266'
    - '2013-06-25 06:16:24.902495'
    - Returns true if thr is dead or sleeping.
    - 
  - - 1957
    - Thread#terminate =>thr or nil
    - 106
    - '2013-06-23 00:22:51.788813'
    - '2013-06-25 06:16:25.069960'
    - 
    - 
  - - 1958
    - Thread#thread_variable?(key) =>true or false
    - 106
    - '2013-06-23 00:22:52.102181'
    - '2013-06-25 06:16:25.372023'
    - ! 'Returns true if the given string (or symbol) exists as a

      thread-local variable.'
    - 
  - - 1959
    - Thread#thread_variable_get(key) =>obj or nil
    - 106
    - '2013-06-23 00:22:52.595525'
    - '2013-06-25 06:16:25.695130'
    - ! 'Returns the value of a thread local variable that has been set.  Note that

      these are different than fiber local values.  For fiber local values,

      please see Thread#[] and Thread#[]=.'
    - 
  - - 1960
    - Thread#thread_variable_set(key, value)
    - 106
    - '2013-06-23 00:22:52.897805'
    - '2013-06-25 05:12:21.186190'
    - ! 'Sets a thread local with key to value.  Note that

      these are local to threads, and not to fibers.  Please see #thread_variable_get

      and Thread#[] for more information.'
    - 
  - - 1961
    - Thread#thread_variables =>array
    - 106
    - '2013-06-23 00:22:53.222233'
    - '2013-06-25 06:16:25.885405'
    - Returns an array of the names of the thread-local variables (as Symbols).
    - 
  - - 1962
    - Thread#value =>obj
    - 106
    - '2013-06-23 00:22:53.669115'
    - '2013-06-25 06:16:26.186455'
    - Waits for thr to complete, using join, and returns its value.
    - 
  - - 1963
    - Thread#wakeup =>thr
    - 106
    - '2013-06-23 00:22:54.006782'
    - '2013-06-25 06:16:26.489247'
    - ! 'Marks a given thread as eligible for scheduling, however it may still

      remain blocked on I/O.'
    - 
  - - 1964
    - ThreadGroup#add(thread) =>thgrp
    - 109
    - '2013-06-23 00:22:59.904488'
    - '2013-06-25 06:16:26.646955'
    - ! 'Adds the given thread to this group, removing it from any

      other group to which it may have previously been a member.'
    - 
  - - 1965
    - ThreadGroup#enclose =>thgrp
    - 109
    - '2013-06-23 00:23:00.519740'
    - '2013-06-25 06:16:27.292190'
    - Prevents threads from being added to or removed from the receiving ThreadGroup.
    - 
  - - 1966
    - ThreadGroup#enclosed? =>true or false
    - 109
    - '2013-06-23 00:23:00.986505'
    - '2013-06-25 06:16:27.582103'
    - ! 'Returns true if the thgrp is enclosed. See also

      #enclose.'
    - 
  - - 1967
    - ThreadGroup#list =>array
    - 109
    - '2013-06-23 00:23:01.488530'
    - '2013-06-25 06:16:27.861840'
    - ! 'Returns an array of all existing Thread objects

      that belong to this group.'
    - 
  - - 1968
    - TracePoint#new(*events) { |obj| block } =>obj
    - 111
    - '2013-06-23 00:23:03.626031'
    - '2013-06-25 06:16:28.040918'
    - ! 'Returns a new TracePoint object, not enabled

      by default.'
    - 
  - - 1969
    - TracePoint#trace(*events) { |obj| block } =>obj
    - 111
    - '2013-06-23 00:23:04.149198'
    - '2013-06-25 06:16:28.241996'
    - ! 'A convenience method for ::new,

      that activates the trace automatically.'
    - 
  - - 1970
    - TracePoint#disable =>true or false
    - 111
    - '2013-06-23 00:23:04.462456'
    - '2013-06-25 06:16:28.553799'
    - 
    - 
  - - 1971
    - TracePoint#disable { block } =>obj
    - 111
    - '2013-06-23 00:23:04.978954'
    - '2013-06-25 06:16:28.868666'
    - Deactivates the trace
    - 
  - - 1972
    - TracePoint#enable =>true or false
    - 111
    - '2013-06-23 00:23:05.304463'
    - '2013-06-25 06:16:29.158194'
    - 
    - 
  - - 1973
    - TracePoint#enable { block } =>obj
    - 111
    - '2013-06-23 00:23:05.606670'
    - '2013-06-25 06:16:29.459693'
    - Activates the trace
    - 
  - - 1974
    - TracePoint#enabled? =>true or false
    - 111
    - '2013-06-23 00:23:05.920157'
    - '2013-06-25 06:16:29.616307'
    - The current status of the trace
    - 
  - - 1975
    - TracePoint#inspect =>string
    - 111
    - '2013-06-23 00:23:06.402018'
    - '2013-06-25 06:16:29.917337'
    - Return a string containing a human-readable TracePoint status.
    - 
  - - 1976
    - TrueClass#true & obj =>true or false
    - 112
    - '2013-06-23 00:23:08.196750'
    - '2013-06-25 06:16:30.230505'
    - ! 'And—Returns false if obj is nil or

      false, true otherwise.'
    - 
  - - 1977
    - TrueClass#true ^ obj =>!obj
    - 112
    - '2013-06-23 00:23:08.707679'
    - '2013-06-25 06:16:30.543279'
    - ! 'Exclusive Or—Returns true if obj is nil

      or false, false otherwise.'
    - 
  - - 1978
    - TrueClass#to_s =>"true"
    - 112
    - '2013-06-23 00:23:09.032390'
    - '2013-06-25 06:16:30.865937'
    - The string representation of true is “true”.
    - 
  - - 1979
    - TrueClass#true | obj =>true
    - 112
    - '2013-06-23 00:23:09.367518'
    - '2013-06-25 06:16:31.011810'
    - ! 'Or—Returns true. As anObject is an argument to a

      method call, it is always evaluated; there is no short-circuit evaluation

      in this case.'
    - 
  - - 1980
    - UnboundMethod#arity =>fixnum
    - 114
    - '2013-06-23 00:23:13.452465'
    - '2013-06-25 06:16:31.313336'
    - ! 'Returns an indication of the number of arguments accepted by a method.

      Returns a nonnegative integer for methods that take a fixed number of

      arguments. For Ruby methods that take a variable number of arguments,

      returns -n-1, where n is the number of required arguments. For methods

      written in C, returns -1 if the call takes a variable number of arguments.'
    - 
  - - 1981
    - UnboundMethod#bind(obj) =>method
    - 114
    - '2013-06-23 00:23:13.932256'
    - '2013-06-25 06:16:31.626567'
    - ! 'Bind umeth to obj. If Klass was the class

      from which umeth was obtained, obj.kind_of?(Klass)

      must be true.'
    - 
  - - 1982
    - UnboundMethod#clone =>new_method
    - 114
    - '2013-06-23 00:23:14.267917'
    - '2013-06-25 06:16:31.939615'
    - Returns a clone of this method.
    - 
  - - 1983
    - UnboundMethod#eql?(other_meth) =>true or false
    - 114
    - '2013-06-23 00:23:14.592392'
    - '2013-06-25 06:16:32.240884'
    - ! 'Two method objects are equal if they are bound to the same object and refer

      to the same method definition and their owners are the same class or

      module.'
    - 
  - - 1984
    - UnboundMethod#hash =>integer
    - 114
    - '2013-06-23 00:23:15.085987'
    - '2013-06-25 06:16:32.553051'
    - Returns a hash value corresponding to the method object.
    - 
  - - 1985
    - UnboundMethod#inspect =>string
    - 114
    - '2013-06-23 00:23:15.410773'
    - '2013-06-25 06:16:32.720728'
    - Returns the name of the underlying method.
    - 
  - - 1986
    - UnboundMethod#name =>symbol
    - 114
    - '2013-06-23 00:23:15.746388'
    - '2013-06-25 06:16:33.021951'
    - Returns the name of the method.
    - 
  - - 1987
    - UnboundMethod#original_name =>symbol
    - 114
    - '2013-06-23 00:23:16.248452'
    - '2013-06-25 06:16:33.279018'
    - Returns the original name of the method.
    - 
  - - 1988
    - UnboundMethod#owner =>class_or_module
    - 114
    - '2013-06-23 00:23:16.552722'
    - '2013-06-25 06:16:33.446669'
    - Returns the class or module that defines the method.
    - 
  - - 1989
    - UnboundMethod#parameters =>array
    - 114
    - '2013-06-23 00:23:16.877082'
    - '2013-06-25 06:16:33.736727'
    - Returns the parameter information of this method.
    - 
  - - 1990
    - UnboundMethod#source_location =>[String, Fixnum]
    - 114
    - '2013-06-23 00:23:17.358387'
    - '2013-06-25 06:16:33.907445'
    - ! 'Returns the Ruby source filename and line number containing this method or

      nil if this method was not defined in Ruby (i.e. native)'
    - 
  - - 1991
    - UnboundMethod#to_s =>string
    - 114
    - '2013-06-23 00:23:17.693959'
    - '2013-06-25 06:16:34.218778'
    - Returns the name of the underlying method.
    - 
